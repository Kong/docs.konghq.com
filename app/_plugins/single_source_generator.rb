module SingleSource
  class Generator < Jekyll::Generator
    priority :highest
    def generate(site)
      Dir.glob('app/_data/docs_nav_*.yml').each do|f|
        data = SafeYAML.load(File.read(f))
        next unless data.is_a?(Hash) && data['generate']

        # Assume that the whole file should be treated as generated
        assume_generated = data['assume_generated'].nil? ? true : data['assume_generated']
        createPages(data['items'], site, data['product'], data['version'], assume_generated)
      end
    end

    def createPages(data, site, product, version, assume_generated)
      data.each do |v,k|
        # Enable generation of specific files as required
        next unless v['generated'] || assume_generated

        # Handle when it's the root page.
        # We always want to generate this, even if
        # it's an absolute_url
        if v['url'] === "/#{product}/" && !v['src']
          v['src'] = 'index'
        end

        # Absolute URLs are expected to be generated by
        # another method, unless there's a 'src' set
        if (v['url'] && !v['absolute_url']) || v['src']
          # Is it an in-page link? If so, skip it
          next if v['url'] && v['url'].include?("/#")
          site.pages << SingleSourcePage.new(site, v['src'], v['url'], product, version)
        end

        # If there are any children, generate those too
        if v['items']
          createPages(v['items'], site, product, version, assume_generated)
        end
      end
    end
  end

  class SingleSourcePage < Jekyll::Page
    def initialize(site, src, dest, product, version)
      # Configure variables that Jekyll depends on
      @site = site
      
      # Normalise the URL by removing the leading /
      if dest[0] === "/"
        dest = dest[1..-1]
      end

      # If there's no 'src' key provided, assume it's the same as the url
      src = dest unless src

      # Remove trailing slashes if they exist
      src.chomp!("/")

      # Set self.ext and self.basename by extracting information from the page filename
      process("index.md")

      # We want to write to <url>
      outputPath = dest # TODO: FIX
      outputPath = "" if src == "index"

      # This is the directory that we're going to write the output file to
      @dir = "#{product}/#{version}/#{outputPath}"

      # If the src file doesn't start with a /, assume it's within the product folder
      # Otherwise, it's an absolute src path and we should start from /src
      unless src[0] === "/"
        src = "#{product}/#{src}"
      end

      # Read the source file, either `<src>.md or <src>/index.md`
      file = "src/#{src}.md"
      file = "src/#{src}/index.md" unless File.exists?(file)
      content = File.read(file)

      # Load content + frontmatter from the file
      if content =~ Jekyll::Document::YAML_FRONT_MATTER_REGEXP
        @content = Regexp.last_match.post_match
        @data = SafeYAML.load(Regexp.last_match(1))
      end

      # Set the "Edit on GitHub" link url
      @data['edit_link'] = file;

      # Set the layout if it's not already provided
      @data['layout'] = 'docs-v2' unless self.data['layout']
    end
  end
end

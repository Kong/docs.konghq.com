kuma:
  controlPlane:
    mode: "zone"
    # (action): please specify a name for the zone
    zone:

    tls:
      apiServer:
        # (action): please prepare the content of this secret before installing Kong Mesh
        # it contains the keys "tls.crt" and "tls.key", and the content items should be in "PEM" format
        # more details on preparing certificates: https://docs.konghq.com/mesh/latest/production/secure-deployment/certificates/
        secretName: kong-mesh-apiserver-tls
        kdsZoneClient:
          # (action): please prepare the content of this secret before installing Kong Mesh
          # the certificate can be extracted from the trusted global CP server
          # it should contain the key "ca.crt", and the content certificate should be in "PEM" format
          # more details on certificates verifying: https://docs.konghq.com/mesh/latest/production/secure-deployment/certificates/#control-plane-to-control-plane-multizone
          secretName: kong-mesh-kds-global-ca
          skipVerify: false

    apiServer:
      corsAllowedDomains:
        # change these values you want to access the control plane API server or Mesh GUI from a custom domain
        - https://localhost:5682
        # if you want to access the API server using the HTTP port, add the following line
        # - http://localhost:5681

    defaults:
      # change these values if you want to open the admin access rights of control plane API server to more groups
      adminRoleGroups:
        - mesh-system:admin
        - system:masters

    # (action): please specify the address of the global CP
    # e.g. grpcs://my-global-cp.my-hostname.com:5685
    kdsGlobalAddress: ""

    envVars:
      KMESH_MULTIZONE_GLOBAL_KDS_AUTH_TYPE: cpToken
      # if you want to access the API server using the HTTP port, change the following switch to "true"
      KUMA_API_SERVER_HTTP_ENABLED: "false"

    secrets:
      # (action): please prepare the content of this secret before installing Kong Mesh
      # the CP token is only required when installing a zone CP that is connecting to a global CP
      # to obtain this CP token, please generate it using the `kumactl` connecting to the global CP
      # kumactl generate zone-token --zone <zone-name> --scope cp --valid-for 43920h > $TOKEN_FLIE
      # kubectl create  -n kong-mesh-system secret generic kong-mesh-global-cp-token --from-file token=$TOKEN_FLIE
      - Secret: kong-mesh-global-cp-token
        Key: token
        Env: KMESH_MULTIZONE_ZONE_KDS_AUTH_CP_TOKEN_INLINE

    # please tune the resource allocation according to your actual mesh size and traffic load after Kong Mesh is installed.
    # try to make the resource limits identical to requests to make components are assigned as a QoS class of Guaranteed
    # more detail on sizing the CP: https://docs.konghq.com/mesh/latest/introduction/kuma-requirements/#sizing-your-control-plane
    resources:
      requests:
        cpu: 1000m
        memory: 1024Mi
      limits:
        cpu: 1000m
        memory: 1024Mi

    replicas: 2
    autoscaling:
      enabled: true

      metrics:
        - type: Resource
          resource:
            name: cpu
            target:
              type: Utilization
              averageUtilization: 50
        - type: Resource
          resource:
            name: memory
            target:
              type: Utilization
              averageUtilization: 50


    podDisruptionBudget:
      enabled: true

  cni:
    # -- Install Kuma with CNI instead of proxy init container
    enabled: false
    resources:
      requests:
        cpu: 100m
        memory: 100Mi
      limits:
        cpu: 100m
        memory: 100Mi

  ingress:
    # -- If true, it deploys Ingress for cross cluster communication
    enabled: false
    # please tune the resource allocation according to your actual mesh size and traffic load after Kong Mesh is installed.
    # try to make the resource limits identical to requests to make components are assigned as a QoS class of Guaranteed
    resources:
      requests:
        cpu: 1000m
        memory: 1024Mi
      limits:
        cpu: 1000m
        memory: 1024Mi

    replicas: 2
    autoscaling:
      enabled: true
      metrics:
        - type: Resource
          resource:
            name: cpu
            target:
              type: Utilization
              averageUtilization: 50
        - type: Resource
          resource:
            name: memory
            target:
              type: Utilization
              averageUtilization: 50

    podDisruptionBudget:
      enabled: true

ratelimit:
  # -- Whether Ratelimit Service should be deployed
  enabled: false
  replicas: 2
  autoscaling:
    enabled: true
    minReplicas: 2
    maxReplicas: 5
    metrics:
      - type: Resource
        resource:
          name: cpu
          target:
            type: Utilization
            averageUtilization: 80

  # please tune the resource allocation according to your actual mesh size and traffic load after Kong Mesh is installed.
  # try to make the resource limits identical to requests to make components are assigned as a QoS class of Guaranteed
  resources:
    requests:
      cpu: 500m
      memory: 512Mi
    limits:
      cpu: 500m
      memory: 512Mi

  secrets:
    # (action): please prepare the content of this secret before installing Kong Mesh
    # the value should be set according to your redis server configuration
    # it is only required when the ratelimit component is enabled
    - Secret: ratelimit-redis-auth
      Key: redis-pass
      Env: REDIS_AUTH
global:
  ratelimit:
    servertls:
      enabled: true
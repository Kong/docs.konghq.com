kuma:
  nameOverride: kong-mesh
  # The default registry and tag to use for all Kuma images
  global:
    image:
      registry: "docker.io/kong"
      tag:

  controlPlane:
    secrets: # {Env: "KMESH_LICENSE_INLINE", Secret: "kong-mesh-license", Key: "license"}
    image:
      repository: "kuma-cp"
    webhooks:
      validator:
        additionalRules: |
          - apiGroups:
              - kuma.io
            apiVersions:
              - v1alpha1
            operations:
              - CREATE
              - UPDATE
              - DELETE
            resources:
              - opapolicies
              - accessaudits
              - accessroles
              - accessrolebindings
      ownerReference:
        additionalRules: |
          - apiGroups:
              - kuma.io
            apiVersions:
              - v1alpha1
            operations:
              - CREATE
            resources:
              - opapolicies
  plugins:
    policies:
      meshglobalratelimits: {}
      meshopas: {}
ratelimit:
  # -- Whether Ratelimit Service should be deployed
  enabled: false
  # -- Ratelimit service docker image
  image:
    # -- Ratelimit Service ImagePullPolicy
    pullPolicy: IfNotPresent
    # -- Ratelimit Service image registry
    registry: "envoyproxy"
    # -- Ratelimit Service image repository
    repository: "ratelimit"
    # -- Ratelimit Service image tag
    tag: "542a6047"
  # -- Log level of ratelimit service. Available values are: "INFO", "DEBUG"
  logLevel: INFO
  # -- Whether debug port should be exposed
  exposeDebugPort: false
  redis:
    # -- Redis address. Need to be specified for ratelimit service to start
    address:
    # -- Redis port. Need to be specified for ratelimit service to start
    port:
  # -- Additional environment variables that will be passed to the ratelimit service
  envVars: {}
  service:
    # -- Service type of the Ratelimit Service
    type: ClusterIP
    # -- Additional annotations to put on the Ratelimit service
    annotations: { }
    # -- Port on which Ratelimit Service is exposed
    port: 10003
    # -- Port on which service is exposed on Node for service of type NodePort
    nodePort:
  # -- Additional pod annotations (deprecated favor `podAnnotations`)
  annotations: { }
  # -- Additional pod annotations
  podAnnotations: { }
  # -- (object with { Env: string, Secret: string, Key: string }) Secrets to add as environment variables,
  # where `Env` is the name of the env variable,
  # `Secret` is the name of the Secret,
  # and `Key` is the key of the Secret value to use
  secrets: # {Env: "REDIS_AUTH", Secret: "ratelimit-redis-auth", Key: "redis-pass"}
  #  someSecret:
  #    Secret: some-secret
  #    Key: secret_key
  #    Env: SOME_SECRET
  # Horizontal Pod Autoscaling configuration
  autoscaling:
    # -- Whether to enable Horizontal Pod Autoscaling, which requires the [Metrics Server](https://github.com/kubernetes-sigs/metrics-server) in the cluster
    enabled: false
    # -- The minimum CP pods to allow
    minReplicas: 1
    # -- The max CP pods to scale to
    maxReplicas: 5
    # -- For clusters that don't support autoscaling/v2beta, autoscaling/v1 is used
    targetCPUUtilizationPercentage: 80
    # -- For clusters that do support autoscaling/v2beta, use metrics
    metrics:
      - type: Resource
        resource:
          name: cpu
          target:
            type: Utilization
            averageUtilization: 80
  # -- Number of replicas of the Ratelimit Service. Ignored when autoscaling is enabled
  replicas: 1
  # -- Optionally override the resource spec
  resources:
    requests:
      cpu: 50m
      memory: 64Mi
    limits:
      memory: 512Mi
  # -- Labels to add to resources in addition to default labels
  extraLabels: { }
  # -- Security context at the pod level for ratelimit service
  podSecurityContext:
    runAsNonRoot: true
    runAsUser: 5678
    runAsGroup: 5678
  # -- Security context at the container level for ratelimit service
  containerSecurityContext:
    readOnlyRootFilesystem: true
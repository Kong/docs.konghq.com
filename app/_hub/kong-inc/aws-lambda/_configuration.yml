name: aws-lambda
service_id: true
route_id: true
consumer_id: true
protocols:
  - name: http
  - name: https
  - name: grpc
  - name: grpcs
dbless_compatible: 'yes'
config:
  - name: aws_key
    required: semi
    value_in_examples: <AWS_KEY>
    urlencode_in_examples: true
    default: null
    datatype: string
    encrypted: true
    referenceable: true
    description: |
      The AWS key credential to be used when invoking the function. The `aws_key` value is required
      if `aws_secret` is defined. If `aws_key` and `aws_secret` are not set, the plugin uses an
      IAM role inherited from the instance running Kong to authenticate. Can be symmetrically encrypted
      if using Kong Gateway and [data encryption](/gateway/latest/kong-production/db-encryption/)
      is configured.
  - name: aws_secret
    required: semi
    value_in_examples: <AWS_SECRET>
    urlencode_in_examples: true
    default: null
    datatype: string
    encrypted: true
    referenceable: true
    description: |
      The AWS secret credential to be used when invoking the function. The `aws_secret` value is required
      if `aws_key` is defined. If `aws_key` and `aws_secret` are not set, the plugin uses an
      IAM role inherited from the instance running Kong to authenticate. Can be symmetrically encrypted
      if using Kong Gateway and [data encryption](/gateway/latest/kong-production/db-encryption/)
      is configured.
  - name: aws_region  # old version, do not update
    maximum_version: "2.5.x"
    required: true
    default:
    value_in_examples: <AWS_REGION>
    datatype: string
    description: |
      The AWS region where the Lambda function is located. The plugin does not
      attempt to validate the supplied region name. If an invalid region name
      is provided, the plugin responds with an HTTP `500 Internal Server Error`
      at runtime and logs a DNS resolution failure. Either `aws_region` or `host`
      must be provided.
  - name: aws_region  # old version, do not update
    minimum_version: "2.6.x"  
    maximum_version: "2.8.x"
    required: false
    default: null
    value_in_examples: <AWS_REGION>
    datatype: string
    description: |
      The AWS region where the Lambda function is located. The plugin does not
      attempt to validate the supplied region name. If an invalid region name
      is provided, the plugin responds with an HTTP `500 Internal Server Error`
      at runtime and logs a DNS resolution failure.

      The plugin will automatically
      detect the AWS region on runtime via `AWS_REGION` or `AWS_DEFAULT_REGION` environment
      variables when neither `aws_region` nor `host` is specified in plugin configuration.
      Using environment variables enables regionally distributed Kong cluster nodes
      to connect to the closest AWS region. If `aws_region`, `host` and environment
      variables have not been specified, the plugin responds with an HTTP
      `500 Internal Server Error` at run-time.

  - name: aws_region  # current version of parameter
    minimum_version: "3.0.x"
    required: semi
    default: null
    value_in_examples: <AWS_REGION>
    datatype: string
    description: |
      The AWS region where the Lambda function is located. The plugin does not
      attempt to validate the supplied region name.

      The plugin has two methods of detecting the AWS region: the `aws_region`
      parameter, or one of the `AWS_REGION` or `AWS_DEFAULT_REGION` environment
      variables. One of these must be set.

      If `region` is not specified in plugin configuration, the plugin
      automatically detects the AWS region on runtime via one of the environment
      variables.
      Using environment variables enables regionally distributed Kong cluster nodes
      to connect to the closest AWS region.

      The AWS region is required for AWS SigV4.
      If `aws_region` or the `AWS_REGION` or `AWS_DEFAULT_REGION` environment
      variables have not been specified, or an invalid region name has been provided,
      the plugin responds with an HTTP `500 Internal Server Error` at runtime.

  - name: aws_assume_role_arn
    minimum_version: "2.8.x"
    required: false
    default: null
    value_in_examples: <AWS_ASSUME_ROLE_ARN>
    datatype: string
    referenceable: true
    description: |
      The target AWS IAM role ARN used to invoke the Lambda function. Typically this is
      used for a cross-account Lambda function invocation.
  - name: aws_role_session_name
    minimum_version: "2.8.x"
    required: false
    default: '`kong`'
    value_in_examples: <AWS_ROLE_SESSION_NAME>
    datatype: string
    description: |
      The identifier of the assumed role session. It is used for uniquely identifying
      a session when the same target role is assumed by different principals or
      for different reasons. The role session name is also used in the ARN of the assumed role principle.

  - name: host
    minimum_version: "2.1.x"
    maximum_version: "2.5.x"
    required: semi
    default: null
    value_in_examples: null
    datatype: string
    description: |
      The host where the Lambda function is located. This value can point to a
      local Lambda server, allowing for easier debugging.

      Either `aws_region` or `host` must be provided.

  - name: host
    minimum_version: "3.0.x"
    required: false
    default: null
    value_in_examples: null
    datatype: string
    description: |
      The host where the Lambda function is located. This value can point to a
      local Lambda server, allowing for easier debugging.

      To set a region, use the `aws_region` parameter.

  - name: function_name
    required: true
    default: null
    value_in_examples: <LAMBDA_FUNCTION_NAME>
    datatype: string
    description: |
      The AWS Lambda function name to invoke. This may contain
      the function name only (`my-function`), the full ARN
      (arn:aws:lambda:us-west-2:123456789012:function:my-function) or a
      partial ARN (123456789012:function:my-function). You can also append a version
      number or alias to any of the formats.
  - name: qualifier
    required: false
    default: null
    datatype: string
    description: |
      The [`Qualifier`](http://docs.aws.amazon.com/lambda/latest/dg/API_Invoke.html#API_Invoke_RequestSyntax) to use when invoking the function.
  - name: invocation_type
    required: true
    default: '`RequestResponse`'
    datatype: string
    description: |
      The [`InvocationType`](http://docs.aws.amazon.com/lambda/latest/dg/API_Invoke.html#API_Invoke_RequestSyntax) to use when invoking the function. Available types are `RequestResponse`, `Event`, `DryRun`.
  - name: log_type
    required: true
    default: '`Tail`'
    datatype: string
    description: |
      The [`LogType`](http://docs.aws.amazon.com/lambda/latest/dg/API_Invoke.html#API_Invoke_RequestSyntax) to use when invoking the function. By default, `None` and `Tail` are supported.
  - name: timeout
    required: true
    default: '`60000`'
    datatype: number
    description: An optional timeout in milliseconds when invoking the function.
  - name: port
    required: false
    default: '`443`'
    datatype: integer
    description: |
      The TCP port that the plugin uses to connect to the server.
  - name: keepalive
    required: true
    default: '`60000`'
    datatype: number
    description: |
      An optional value in milliseconds that defines how long an idle connection lives before being closed.
  - name: unhandled_status
    required: false
    default: '`200`, `202`, or `204`'
    datatype: integer
    description: |
      The response status code to use (instead of the default `200`, `202`, or `204`) in the case of an
      [`Unhandled` Function Error](https://docs.aws.amazon.com/lambda/latest/dg/API_Invoke.html#API_Invoke_ResponseSyntax).
  - name: forward_request_body
    required: false
    default: '`false`'
    datatype: boolean
    description: |
      An optional value that defines whether the request body is sent in the `request_body` field of the JSON-encoded request.
      If the body arguments can be parsed, they are sent in the separate `request_body_args` field of the request.
      The body arguments can be parsed for `application/json`, `application/x-www-form-urlencoded`, and `multipart/form-data` content types.
  - name: forward_request_headers
    required: false
    default: '`false`'
    datatype: boolean
    description: |
      An optional value that defines whether the original HTTP request headers are
      sent as a map in the `request_headers` field of the JSON-encoded request.
  - name: forward_request_method
    required: false
    default: '`false`'
    datatype: boolean
    description: |
      An optional value that defines whether the original HTTP request method verb is
      sent in the `request_method` field of the JSON-encoded request.
  - name: forward_request_uri
    required: false
    default: '`false`'
    datatype: boolean
    description: |
      An optional value that defines whether the original HTTP request URI is sent in
      the `request_uri` field of the JSON-encoded request. Request URI arguments (if any) are sent in
      the separate `request_uri_args` field of the JSON body.
  - name: is_proxy_integration
    required: false
    default: '`false`'
    datatype: boolean
    description: |
      An optional value that defines whether the response format to receive from the Lambda to
      [this format](https://docs.aws.amazon.com/apigateway/latest/developerguide/set-up-lambda-proxy-integrations.html#api-gateway-simple-proxy-for-lambda-output-format).
  - name: awsgateway_compatible
    required: false
    default: '`false`'
    datatype: boolean
    description: |
      An optional value that defines whether the plugin should wrap requests into the Amazon API gateway.
  - name: proxy_url
    required: semi
    default: null
    datatype: string
    value_in_examples: http://my-proxy-server:3128
    description: |
      An optional value that defines whether the plugin should connect through
      the given proxy server URL. Include the request scheme in the URL, which
      must be `http`. For example: `http://my-proxy-server:3128`.

      Kong Gateway uses HTTP tunneling via the [CONNECT HTTP](https://httpwg.org/specs/rfc7231.html#CONNECT)
      method so that no details of the AWS Lambda request are leaked to the proxy server.

  - name: proxy_scheme # deprecated and removed
    maximum_version: "2.8.x"
    required: semi
    default: null
    datatype: string
    description: |

      {:.important}
      > As of Kong Gateway 2.8.0.0, this parameter is deprecated.
      > <br><br>
      > If running Kong Gateway 2.7.x or earlier, the
      `proxy_scheme` value is required if `proxy_url` is defined. In 2.8.x or
      later versions, `proxy_scheme` is not required.

      An optional value that defines which HTTP scheme to use for connecting through the proxy server. The
      supported schemes are `http` and `https`.

  - name: skip_large_bodies
    required: false
    default: '`true`'
    datatype: boolean
    description: |
      An optional value that defines whether Kong should send large
      bodies that are buffered to disk. Note that enabling this option will have an impact
      on system memory depending on the number of requests simultaneously in flight at any given point in time
      and on the maximum size of each request. Also this option blocks all requests being handled by the
      nginx workers. That could be tens of thousands of other transactions that are not being processed. For small I/O
      operations, such a delay would generally not be problematic. In cases where the body size is in the order of MB,
      such a delay would cause notable interruptions in request processing. Given all of the potential
      downsides resulting from enabling this option, consider increasing the
      [client_body_buffer_size](http://nginx.org/en/docs/http/ngx_http_core_module.html#client_body_buffer_size)
      value instead.
  - name: base64_encode_body
    minimum_version: "2.2.x"
    required: false
    default: '`true`'
    datatype: boolean
    description: |
      An optional value that Base64-encodes the request body.
  - name: aws_imds_protocol_version
    minimum_version: "2.8.x"
    required: true
    default: '`v1`'
    datatype: string
    description: |
      Identifier to select the IMDS protocol version to use, either
      `v1` or `v2`. If `v2` is selected, an additional session
      token is requested from the EC2 metadata service by the plugin
      to secure the retrieval of the EC2 instance role. Note that
      if Kong Gateway is running inside a container on an
      EC2 instance, the EC2 instance metadata must be configured
      accordingly. 
      
      Refer to the Considerations section in the
      [Retrieve Instance Metadata section of the EC2 manual](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instancedata-data-retrieval.html)
      for details.
extra: |
  **Reminder**: By default, cURL sends payloads with an
  `application/x-www-form-urlencoded` MIME type, which will naturally be URL-
  decoded by Kong. To ensure special characters that are likely to appear in
  your AWS key or secret (like `+`) are correctly decoded, you must
  URL-encode them with `--data-urlencode`.
  Alternatives to this approach would be to send your payload with a
  different MIME type (like `application/json`), or to use a different HTTP client.

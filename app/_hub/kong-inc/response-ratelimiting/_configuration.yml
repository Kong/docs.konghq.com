params:
  name: response-ratelimiting
  service_id: true
  route_id: true
  consumer_id: true
  protocols:
    - name: http
    - name: https
    - name: grpc
    - name: grpcs
  dbless_compatible: partially
  dbless_explanation: |
    The plugin will run fine with the `local` policy (which doesn't use the database) or
    the `redis` policy (which uses an independent Redis, so it is compatible with DB-less).

    The plugin will not work with the `cluster` policy, which requires writes to the database.
  config:
    - name: 'limits.{limit_name}'
      required: true
      value_in_examples: <SMS>
      datatype: string
      description: 'This is a list of custom objects that you can set, with arbitrary names set in the `{limit_name`} placeholder, like `config.limits.sms.minute=20` if your object is called "SMS".'
    - name: 'limits.{limit_name}.second'
      required: semi
      datatype: number
      description: The amount of HTTP requests the developer can make per second. At least one limit must exist.
    - name: 'limits.{limit_name}.minute'
      required: semi
      value_in_examples: 10
      datatype: number
      description: The amount of HTTP requests the developer can make per minute. At least one limit must exist.
    - name: 'limits.{limit_name}.hour'
      required: semi
      datatype: number
      description: The amount of HTTP requests the developer can make per hour. At least one limit must exist.
    - name: 'limits.{limit_name}.day'
      required: semi
      datatype: number
      description: The amount of HTTP requests the developer can make per day. At least one limit must exist.
    - name: 'limits.{limit_name}.month'
      required: semi
      datatype: number
      description: The number of HTTP requests the developer can make per month. A month is defined as a 30-day interval of time, not a calendar month. At least one limit must exist.
    - name: 'limits.{limit_name}.year'
      required: semi
      datatype: number
      description: The number of HTTP requests the developer can make per year. A year is defined as a 365-day interval of time, not a calendar year. At least one limit must exist.
    - name: header_name
      required: false
      default: '`X-Kong-Limit`'
      datatype: string
      description: The name of the response header used to increment the counters.
    - name: block_on_first_violation
      required: true
      default: '`false`'
      datatype: boolean
      description: A boolean value that determines if the requests should be blocked as soon as one limit is being exceeded. This will block requests that are supposed to consume other limits too.
    - name: limit_by
      required: false
      default: '`consumer`'
      datatype: string
      description: 'The entity that will be used when aggregating the limits: `consumer`, `credential`, `ip`. If the `consumer` or the `credential` cannot be determined, the system will always fallback to `ip`.'
    - name: policy
      required: false
      default: '`local`'
      value_in_examples: local
      datatype: string
      description: |
        The rate-limiting policies to use for retrieving and incrementing the
        limits. Available values are:
        - `local`: Counters are stored locally in-memory on the node.
        - `cluster`: Counters are stored in the Kong datastore and shared across
        the nodes.
        - `redis`: Counters are stored on a Redis server and shared
        across the nodes.

        In DB-less, hybrid mode, and Konnect, the `cluster` config policy is not supported.
        For DB-less mode or Konnect, use one of `redis` or `local`; for hybrid mode, use
        `redis`, or `local` for data planes only.

        For details on which policy should be used, refer to the
        [implementation considerations](/hub/kong-inc/rate-limiting/#implementation-considerations).
    - name: fault_tolerant
      required: true
      default: '`true`'
      datatype: boolean
      description: 'A boolean value that determines if the requests should be proxied even if Kong has troubles connecting a third-party datastore. If `true`, requests will be proxied anyway, effectively disabling the rate-limiting function until the datastore is working again. If `false`, then the clients will see `500` errors.'
    - name: hide_client_headers
      required: true
      default: '`false`'
      datatype: boolean
      description: Optionally hide informative response headers.
    - name: redis_host
      required: semi
      datatype: string
      description: 'When using the `redis` policy, this property specifies the address to the Redis server.'
    - name: redis_port
      required: false
      default: '`6379`'
      datatype: integer
      description: 'When using the `redis` policy, this property specifies the port of the Redis server.'
    - name: redis_username
      minimum_version: "2.8.x"
      required: false
      datatype: string
      referenceable: true
      description: |
        When using the `redis` policy, this property specifies the username to connect to the Redis server when ACL authentication is desired.

        This requires Redis v6.0.0+. The username **cannot** be set to `default`.
    - name: redis_password
      required: false
      datatype: string
      referenceable: true
      description: |
        When using the `redis` policy, this property specifies the password to connect to the Redis server.
    - name: redis_timeout
      required: false
      default: '`2000`'
      datatype: number
      description: 'When using the `redis` policy, this property specifies the timeout in milliseconds of any command submitted to the Redis server.'
    - name: redis_database
      required: false
      default: '`0`'
      datatype: number
      description: 'When using the `redis` policy, this property specifies Redis database to use.'
    - name: redis_ssl
      minimum_version: "3.1.x"
      required: true
      default: '`false`'
      datatype: boolean
      description: |
        When using the `redis` policy, this property specifies if SSL is used to connect to the Redis server.
    - name: redis_ssl_verify
      minimum_version: "3.1.x"
      required: true
      default: '`false`'
      datatype: boolean
      description: |
        When using the `redis` policy with `redis_ssl` set to `true`, this property specifies if the server SSL certificate is validated. Note that you need to configure the `lua_ssl_trusted_certificate` to specify the CA (or server) certificate used by your Redis server. You may also need to configure `lua_ssl_verify_depth` accordingly.
    - name: redis_server_name
      minimum_version: "3.1.x"
      required: false
      datatype: string
      description: |
        When using the `redis` policy with `redis_ssl` set to `true`, this property specifies the server name for the TLS extension Server Name Indication (SNI) 

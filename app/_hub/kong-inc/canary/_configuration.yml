name: canary
service_id: true
route_id: true
consumer_id: false
dbless_compatible: 'yes'
protocols:
  - name: http
  - name: https
  - name: grpc
  - name: grpcs
config:
  - name: start
    maximum_version: "3.1.x"
    required: semi
    default: null
    value_in_examples: null
    datatype: number
    description: |
      Future time in seconds since epoch, when the canary release will start.
      Ignored when `percentage` is set, or when using `allow` or `deny` in `hash`.

  - name: start
    minimum_version: "3.2.x"
    default: current timestamp
    value_in_examples: null
    datatype: number
    description: |
      Future time in seconds since epoch, when the canary release will start.
      Ignored when `percentage` is set, or when using `allow` or `deny` in `hash`.

      If no value is set for the `start` field, it defaults to the 
      timestamp of the moment that the plugin instance is created.

  - name: duration
    required: null
    default: 3600
    value_in_examples: null
    datatype: number
    description: |
      The duration of the transition in seconds. Ignored when `percentage` is set, or
      when using `allow` or `deny` in `hash`.
  - name: percentage
    required: semi
    default: null
    value_in_examples: 50
    datatype: number
    description: |
      Fixed percentage of traffic to be routed to new target, if given overrides `start` and `duration`. The
      value must be between 0 and 100.
  - name: steps
    required: null
    default: 1000
    value_in_examples: null
    datatype: number
    description: |
      Number of steps the release should be broken into.
  - name: upstream_host
    required: semi
    default: null
    value_in_examples: example.com
    datatype: string
    description: |
      The target hostname where traffic will be routed. Required if `upstream_uri` and `upstream_port` are not set.
  - name: upstream_fallback
    required: false
    default: false
    value_in_examples: null
    datatype: boolean
    description: |
      Whether the plugin will fall back to the original upstream if the Canary Upstream doesn't have at least one healthy target. (`upstream_host` must point to a valid Kong Upstream entity.)
  - name: upstream_port
    required: semi
    default: null
    value_in_examples: 80
    datatype: integer
    description: |
      The target port where traffic will be routed. Required if `upstream_uri` and `upstream_host` are not set.
      Must be a value between 0 and 65535.
  - name: upstream_uri
    required: semi
    default: null
    value_in_examples: null
    datatype: string
    description: |
      The Upstream URI where traffic will be routed. Required if `upstream_port` and `upstream_host` are not set.
  - name: hash
    required: null
    default: consumer
    value_in_examples: null
    datatype: string
    description: |
      Entity to be used for hashing. Options: `consumer`, `ip`, `header`, `allow`, `deny`, or `none`.
      When using `consumer` or `ip`, make sure to properly set the settings for trusted IPs
      (see the `trusted_ips` and `real_ip_header` settings in the Kong configuration file.)
  - name: groups
    required: null
    default: null
    value_in_examples: null
    datatype: array of string elements
    description: |
      An array of strings with the group names that are allowed or denied. Set `hash` to either `allow` (the listed groups
      go into the canary) or `deny` (the listed groups will NOT go into the canary.)
  - name: hash_header
    required: semi
    default: null
    value_in_examples: null
    datatype: string
    description: |
      Header name whose value will be used as hash input. Required if `config.hash` is set to `header`.
  - name: canary_by_header_name
    minimum_version: "2.8.x"
    required: null
    default: null
    value_in_examples: null
    datatype: string
    description: |
      Header name that, when present on a request, overrides the configured canary
      functionality.

      * If the configured header is present with the value `always`, the request will
      always go to the canary upstream.
      * If the header is present with the value `never`, the request will never go to the
      canary upstream.

      For all other values, the configured canary rules will be applied.

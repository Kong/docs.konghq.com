name: proxy-cache-advanced
service_id: true
route_id: true
consumer_id: true
protocols:
  - name: http
  - name: https
  - name: grpc
  - name: grpcs
dbless_compatible: 'yes'
config:
  - name: response_code
    required: true
    default: '200, 301, 404'
    value_in_examples:
      - '200'
    datatype: array of type integer
    description: |
      Upstream response status code considered cacheable. The integers must be a value
      between 100 and 900.
  - name: request_method
    required: true
    default: '`["GET","HEAD"]`'
    value_in_examples:
      - GET
      - HEAD
    datatype: array of string elements
    description: |
      Downstream request methods considered cacheable. Available options: `HEAD`, `GET`, `POST`, `PATCH`, `PUT`.
  - name: content_type
    required: true
    default: 'text/plain, application/json'
    value_in_examples:
      - text/plain
      - application/json
    datatype: array of string elements
    description: |
      Upstream response content types considered cacheable. The plugin performs an **exact match** against each specified value; for example, if the upstream is expected to respond with a `application/json; charset=utf-8` content-type, the plugin configuration must contain said value or a `Bypass` cache status is returned.
  - name: vary_headers
    required: false
    default: null
    value_in_examples: null
    datatype: array of string elements
    description: |
      Relevant headers considered for the cache key. If undefined, none of the headers are taken into consideration.
  - name: vary_query_params
    required: false
    default: null
    value_in_examples: null
    datatype: array of string elements
    description: |
      Relevant query parameters considered for the cache key. If undefined, all params are taken into consideration.
  - name: cache_ttl
    required: null
    default: 300
    value_in_examples: null
    datatype: integer
    description: |
      TTL in seconds of cache entities.
  - name: cache_control
    required: true
    default: false
    value_in_examples: null
    datatype: boolean
    description: |
      When enabled, respect the Cache-Control behaviors defined in [RFC7234](https://tools.ietf.org/html/rfc7234#section-5.2).
  - name: storage_ttl
    required: false
    default: null
    value_in_examples: null
    datatype: integer
    description: |
      Number of seconds to keep resources in the storage backend. This value is independent
      of `cache_ttl` or resource TTLs defined by Cache-Control behaviors.
  - name: strategy
    required: true
    default: null
    value_in_examples: memory
    datatype: string
    description: |
      The backing data store in which to hold cache entities. Accepted values are: `memory` and `redis`.
  - name: memory.dictionary_name
    required: true
    default: kong_db_cache
    value_in_examples: null
    datatype: string
    description: |
      The name of the shared dictionary in which to hold cache entities when the memory strategy is selected. Note that this dictionary currently must be defined manually in the Kong Nginx template.
  - name: redis.host
    required: semi
    default: null
    value_in_examples: null
    datatype: string
    description: |
      Host to use for Redis connection when the redis strategy is defined.
  - name: redis.port
    required: semi
    default: 6379
    value_in_examples: null
    datatype: integer
    description: |
      Port to use for Redis connections when the `redis` strategy is defined. Must be a
      value between 0 and 65535. Default: 6379.
  - name: redis.ssl
    required: false
    default: false
    value_in_examples: null
    datatype: boolean
    description: |
      If set to `true`, then uses SSL to connect to Redis.

      **Note:** This parameter is only available for Kong Gateway versions
      2.2.x and later.
  - name: redis.ssl_verify
    required: false
    default: false
    value_in_examples: null
    datatype: boolean
    description: |
      If set to `true`, then verifies the validity of the server SSL certificate. Note that you need to configure the
      [lua_ssl_trusted_certificate](/gateway/latest/reference/configuration/#lua_ssl_trusted_certificate)
      to specify the CA (or server) certificate used by your Redis server. You may also need to configure
      [lua_ssl_verify_depth](/gateway/latest/reference/configuration/#lua_ssl_verify_depth) accordingly.

      **Note:** This parameter is only available for Kong Gateway versions
      2.2.x and later.
  - name: redis.server_name
    required: false
    default: null
    value_in_examples: null
    datatype: string
    description: |
      Specifies the server name for the new TLS extension Server Name Indication (SNI) when connecting over SSL.

      **Note:** This parameter is only available for Kong Gateway versions
      2.2.x and later.
  - name: redis.timeout
    required: semi
    default: 2000
    value_in_examples: null
    datatype: number
    description: |
      Connection timeout to use for Redis connection when the `redis` strategy is defined.
  - name: redis.password
    required: semi
    default: null
    value_in_examples: null
    datatype: string
    referenceable: true
    description: |
      Password to use for Redis connection when the `redis` strategy is defined.
      If undefined, no AUTH commands are sent to Redis.
  - name: redis.database
    required: semi
    default: 0
    value_in_examples: null
    datatype: integer
    description: |
      Database to use for Redis connection when the `redis` strategy is defined.
  - name: redis.sentinel_master
    required: semi
    default: null
    value_in_examples: null
    datatype: string
    description: |
      Sentinel master to use for Redis connection when the `redis` strategy is defined. Defining this value implies using Redis Sentinel.
  - name: redis.sentinel_username
    minimum_version: "2.8.x"
    required: semi
    default: null
    value_in_examples: null
    datatype: string
    referenceable: true
    description: |
      Sentinel username to authenticate with a Redis Sentinel instance.
      If undefined, ACL authentication will not be performed. This requires Redis v6.2.0+.
  - name: redis.sentinel_password
    minimum_version: "2.8.x"
    required: semi
    default: null
    value_in_examples: null
    datatype: string
    referenceable: true
    description: |
      Sentinel password to authenticate with a Redis Sentinel instance.
      If undefined, no AUTH commands are sent to Redis Sentinels.
  - name: redis.sentinel_role
    required: semi
    default: null
    value_in_examples: null
    datatype: string
    description: |
      Sentinel role to use for Redis connections when the `redis` strategy is defined. Defining this value
      implies using Redis Sentinel. Available options:  `master`, `slave`, `any`.
  - name: redis.sentinel_addresses
    required: semi
    default: null
    value_in_examples: null
    datatype: array of string elements
    description: |
      Sentinel addresses to use for Redis connections when the `redis` strategy is defined.
      Defining this value implies using Redis Sentinel. Each string element must
      be a hostname. The minimum length of the array is 1 element.
  - name: redis.cluster_addresses
    required: semi
    default: null
    value_in_examples: null
    datatype: array of string elements
    description: |
      Cluster addresses to use for Redis connection when the `redis` strategy is defined.
      Defining this value implies using Redis cluster. Each string element must
      be a hostname. The minimum length of the array is 1 element.
  - name: redis.keepalive_backlog
    required: false
    default: null
    value_in_examples: null
    datatype: integer
    description: |
      If specified, limits the total number of opened connections for a pool. If the
      connection pool is full, all connection queues beyond the maximum limit go into
      the backlog queue. Once the backlog queue is full, subsequent connect operations
      will fail and return `nil`. Queued connect operations resume once the number of
      connections in the pool is less than `keepalive_pool_size`. Note that queued
      connect operations are subject to set timeouts.
  - name: redis.keepalive_pool
    required: false
    default: generated from string template
    value_in_examples: null
    datatype: string
    description: |
      The custom name of the connection pool. If not specified, the connection pool
      name is generated from the string template `"<host>:<port>"` or `"<unix-socket-path>"`.
  - name: redis.keepalive_pool_size
    required: false
    default: 30
    value_in_examples: null
    datatype: integer
    description: |
      The size limit for every cosocket connection pool associated with every remote
      server, per worker process. If no `keepalive_pool_size` is specified and no `keepalive_backlog`
      is specified, no pool is created. If no `keepalive_pool_size` is specified and `keepalive_backlog`
      is specified, then the pool uses the default value `30`.
  - name: bypass_on_err
    required: false
    default: false
    value_in_examples: null
    datatype: boolean
    description: |
      Unhandled errors while trying to retrieve a cache entry (such as redis down) are resolved with `Bypass`, with the request going upstream.
extra: |

  <div class="alert alert-ee red">
  <strong>Warning:</strong> The <code>content_type</code> parameter requires
  an exact match. For example, if your Upstream expects
  <code>application/json; charset=utf-8</code> and the
  <code>config.content_type</code> value is only <code>application/json</code>
  (a partial match), then the proxy cache is bypassed.
  </div>

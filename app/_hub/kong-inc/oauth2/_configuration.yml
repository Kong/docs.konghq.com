name: oauth2
service_id: true
route_id: false
consumer_id: false
protocols:
  - name: http
  - name: https
  - name: grpc
  - name: grpcs
  - name: ws
    minimum_version: "3.0.x"
  - name: wss
    minimum_version: "3.0.x"
yaml_examples: false
konnect_examples: false
dbless_compatible: 'no'
dbless_explanation: |
  For its regular work, the plugin needs to both generate and delete tokens, and commit those changes to the database, which is not compatible with DB-less.

  In addition to this, its Admin API endpoints offer several POST, PATCH, PUT, and DELETE methods for tokens and credentials. None of them would work on DB-less.
config:
  - name: scopes
    required: semi
    default: null
    value_in_examples:
      - email
      - phone
      - address
    datatype: array of string elements
    description: |
      Describes an array of scope names that will be available to the end user. If `mandatory_scope` is
      set to `true`, then `scopes` are required.
  - name: mandatory_scope
    required: true
    default: '`false`'
    value_in_examples: true
    datatype: boolean
    description: An optional boolean value telling the plugin to require at least one `scope` to be authorized by the end user.
  - name: provision_key
    required: true
    default: '`true`'
    value_in_examples: <autogenerated>
    datatype: string
    encrypted: true
    description: |
      The unique key the plugin has generated when it has been added to the Service.
  - name: token_expiration
    required: true
    default: '`7200`'
    datatype: number
    description: |
      An optional integer value telling the plugin how many seconds a token should last, after which the client will
      need to refresh the token. Set to `0` to disable the expiration.
  - name: enable_authorization_code
    required: true
    default: '`false`'
    value_in_examples: true
    datatype: boolean
    description: |
      An optional boolean value to enable the three-legged Authorization Code flow ([RFC 6742 Section 4.1](https://tools.ietf.org/html/rfc6749#section-4.1)).
  - name: enable_client_credentials
    required: true
    default: '`false`'
    datatype: boolean
    description: |
      An optional boolean value to enable the Client Credentials Grant flow ([RFC 6742 Section 4.4](https://tools.ietf.org/html/rfc6749#section-4.4)).
  - name: enable_implicit_grant
    required: true
    default: '`false`'
    datatype: boolean
    description: |
      An optional boolean value to enable the Implicit Grant flow which allows to provision a token as a result of the authorization process ([RFC 6742 Section 4.2](https://tools.ietf.org/html/rfc6749#section-4.2)).
  - name: enable_password_grant
    required: true
    default: '`false`'
    datatype: boolean
    description: |
      An optional boolean value to enable the Resource Owner Password Credentials Grant flow ([RFC 6742 Section 4.3](https://tools.ietf.org/html/rfc6749#section-4.3)).
  - name: auth_header_name
    required: false
    default: '`authorization`'
    datatype: string
    description: |
      The name of the header that is supposed to carry the access token. Default: `authorization`.
  - name: hide_credentials
    required: true
    default: '`false`'
    datatype: boolean
    description: |
      An optional boolean value telling the plugin to show or hide the credential from the upstream service.
      If `true`, the plugin will strip the credential from the request (the header containing the client credentials)
      before proxying it.
  - name: accept_http_if_already_terminated
    required: true
    default: '`false`'
    datatype: boolean
    description: |
      Accepts HTTPs requests that have already been terminated by a proxy or load balancer and the
      `x-forwarded-proto: https` header has been added to the request. Only enable this option
      if the Kong server cannot be publicly accessed and the only entry point is such proxy or load balancer.
  - name: anonymous
    required: false
    default: null
    datatype: string
    description:
      An optional string (consumer UUID or username) value to use as an “anonymous” consumer if authentication fails. If empty (default null), the request fails with an authentication failure `4xx`. Note that this value must refer to the consumer `id` or `username` attribute, and **not** its `custom_id`.
    minimum_version: "3.1.x"
  - name: anonymous
    required: false
    default: null
    datatype: string      
    description: |
      An optional string (consumer UUID) value to use as an anonymous consumer if authentication fails.
      If empty (default), the request fails with an authentication failure `4xx`. Note that this value
      must refer to the consumer `id` attribute that is internal to Kong Gateway, and **not** its `custom_id`.
    maximum_version: "3.0.x"
  - name: global_credentials
    required: true
    default: '`false`'
    datatype: boolean
    description: |
      An optional boolean value that allows using the same OAuth credentials generated by the plugin with
      any other Service whose OAuth 2.0 plugin configuration also has `config.global_credentials=true`.
  - name: refresh_token_ttl
    required: true
    default: '`1209600`'
    datatype: number
    description: |
      An optional integer value telling the plugin how many seconds a token/refresh token pair is valid for,
      and can be used to generate a new access token. Default value is 2 weeks. Set to `0` to keep the token/refresh
      token pair valid indefinitely.
  - name: reuse_refresh_token
    required: true
    default: false
    datatype: boolean
    description: |
      An optional boolean value that indicates whether an OAuth refresh token is
      reused when refreshing an access token.
  - name: pkce
    required: false
    default: '`lax`'
    datatype: string
    description: |
      Specifies a mode of how the Proof Key for Code Exchange (PKCE) should be
      handled by the plugin. The possible modes are `none`, `lax`, and `strict`.
      The `strict` mode enforces PKCE on both authorization and token endpoints for
      all the clients. The `lax` mode enforces PKCE for public clients, but it does
      not enforce it for confidential clients. The `none` mode does not enforce PKCE
      on any client. In any case, if a client asks for PKCE on authorization
      endpoint, the PKCE is also enforced on token endpoint.
extra: |

  Once applied, any user with a valid credential can access the Service.
  To restrict usage to only some of the authenticated users, also add the
  [ACL](/plugins/acl/) plugin (not covered here) and create allowed or
  denied groups of users.

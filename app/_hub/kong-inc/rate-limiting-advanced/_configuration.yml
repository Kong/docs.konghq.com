params:
  name: rate-limiting-advanced
  service_id: true
  route_id: true
  consumer_id: true
  protocols:
    - name: http
    - name: https
    - name: grpc
    - name: grpcs
  dbless_compatible: partially
  dbless_explanation: |
    The cluster strategy is not supported in DB-less and hybrid modes. For Kong
    Gateway in DB-less or hybrid mode, the `redis` strategy is the only available option to configure the plugin with a central data store.

    {:.note}
    > **Note**: We recommend setting `namespace` to a static value in DB-less mode.
    > The `namespace` will be regenerated on every configuration change if not explicitly set, resetting counters to zero.

  config:
    - name: limit
      required: true
      default: null
      value_in_examples:
        - '5'
      datatype: array of number elements
      description: |
        One or more requests-per-window limits to apply. There must be a matching
        number of window limits and sizes specified.
    - name: window_size
      required: true
      default: null
      value_in_examples:
        - '30'
      datatype: array of number elements
      description: |
        One or more window sizes to apply a limit to (defined in seconds). There
        must be a matching number of window limits and sizes specified.
    - name: identifier
      required: true
      default: consumer
      value_in_examples: consumer
      datatype: string
      description: |
        The type of identifier used to generate the rate limit key.
        Defines the scope used to increment the rate limiting counters.
        Can be `ip`, `credential`, `consumer`, `service`, `header`, or `path`.
    - name: path
      required: semi
      datatype: string
      description: |
        Request path to use as the rate limit key when `config.identifier` is
        configured with the value `path`. Ignored when `config.identifier` has any other value.
    - name: header_name
      required: semi
      datatype: string
      description: |
        Header name to use as the rate limit key when `config.identifier` is
        configured with the value `header`. Ignored when `config.identifier` is not `header`.
    - name: dictionary_name
      required: true
      default: kong_rate_limiting_counters
      value_in_examples: null
      datatype: string
      description: |
        The shared dictionary where counters are stored. When the plugin is
        configured to synchronize counter data externally (that is 
        `config.strategy` is `cluster` or `redis` and `config.sync_rate` isn't
        `-1`), this dictionary serves as a buffer to populate counters in the
        data store on each synchronization cycle.
    - name: sync_rate
      required: true
      default: null
      value_in_examples: -1
      datatype: number
      description: |
        How often to sync counter data to the central data store. A value of 0
        results in synchronous behavior; a value of -1 ignores sync behavior
        entirely and only stores counters in node memory. A value greater than
        0 will sync the counters in the specified number of seconds. The minimum
        allowed interval is 0.02 seconds (20ms).
    - name: namespace
      required: semi
      default: random_auto_generated_string
      value_in_examples: example_namespace
      datatype: string
      description: |
        The rate limiting library namespace to use for this plugin instance. Counter
        data and sync configuration is isolated in each namespace.

        {:.important}
        > **Important**: If managing Kong Gateway with **declarative configuration** or running
        Kong Gateway in **DB-less mode**, set the `namespace` explicitly in your declarative configuration.
        > <br><br>
        > If not set, you will run into the following issues:
        * In DB-less mode, this field will be regenerated automatically on every configuration change.
        * If applying declarative configuration with decK, decK will automatically fail the update and require a 
        `namespace` value.


    - name: strategy # old version of param description
      maximum_version: "2.8.x"
      required: true
      default: cluster
      value_in_examples: local
      datatype: string
      description: |
        The rate-limiting strategy to use for retrieving and incrementing the
        limits. Available values are:
        - `cluster`: Counters are stored in the Kong datastore and shared across
           the nodes.
        - `redis`: Counters are stored on a Redis server and shared
           across the nodes.
        - `local`: Counters are stored locally in-memory on the node (same effect
           as setting `sync_rate` to `-1`).

        In DB-less, hybrid mode, and Konnect, the `cluster` config strategy
        is not supported.

        For details on which strategy should be used, refer to the
        [implementation considerations](/hub/kong-inc/rate-limiting/#implementation-considerations).

    - name: strategy # current
      minimum_version: "3.0.x"
      required: true
      default: local
      value_in_examples: local
      datatype: string
      description: |
        The rate-limiting strategy to use for retrieving and incrementing the
        limits. Available values are:
        - `local`: Counters are stored locally in-memory on the node (same effect
           as setting `sync_rate` to `-1`).
        - `cluster`: Counters are stored in the Kong datastore and shared across
           the nodes.
        - `redis`: Counters are stored on a Redis server and shared
           across the nodes.

        In DB-less, hybrid mode, and Konnect, the `cluster` config strategy
        is not supported. 
        
        From `3.0.0.0` onwards, Kong disallows
        the plugin enablement if the strategy is `cluster` and `sync_rate` is `-1`
        with DB-less or hybrid mode. From `3.2.0.0` onward, please
        use a different strategy or set `sync_rate` to `-1`.

        For details on which strategy should be used, refer to the
        [implementation considerations](/hub/kong-inc/rate-limiting/#implementation-considerations).

    - name: hide_client_headers
      required: false
      default: false
      value_in_examples: false
      datatype: boolean
      description: |
        Optionally hide informative response headers that would otherwise
        provide information about the current status of limits and counters as
        described in the paragraph [Headers sent to the client](#headers-sent-to-the-client).
        Available options: `true` or `false`.
    - name: redis.host
      required: semi
      default: null
      value_in_examples: null
      datatype: string
      description: |
        Host to use for Redis connection when the `redis` strategy is defined.
        This parameter accepts a hostname or an IP address as a value.
    - name: redis.port
      required: semi
      default: 6379
      value_in_examples: null
      datatype: integer
      description: |
        Specifies the Redis server port when using the `redis` strategy. Must be a
        value between 0 and 65535. Default: 6379.
    - name: redis.ssl
      minimum_version: "2.2.x"
      required: false
      default: false
      value_in_examples: null
      datatype: boolean
      description: |
        If set to true, then uses SSL to connect to Redis.

    - name: redis.ssl_verify
      minimum_version: "2.2.x"
      required: false
      default: false
      value_in_examples: null
      datatype: boolean
      description: |
        If set to true, then verifies the validity of the server SSL certificate. Note that you need to configure the
        [lua_ssl_trusted_certificate](/gateway/latest/reference/configuration/#lua_ssl_trusted_certificate)
        to specify the CA (or server) certificate used by your redis server. You may also need to configure
        [lua_ssl_verify_depth](/gateway/latest/reference/configuration/#lua_ssl_verify_depth) accordingly.

    - name: redis.server_name
      minimum_version: "2.2.x"
      required: false
      default: null
      value_in_examples: null
      datatype: string
      description: |
        Specifies the server name for the new TLS extension Server Name Indication (SNI) when connecting over SSL.

    - name: redis.timeout # old version
      maximum_version: "2.4.x"
      required: semi
      default: 2000
      value_in_examples: null
      datatype: number
      description: |
        Connection timeout (in milliseconds) to use for Redis connection when the `redis` strategy is defined.

    - name: redis.timeout # current
      minimum_version: "2.5.x"
      required: semi
      default: 2000
      value_in_examples: null
      datatype: number
      description: |
        Connection timeout (in milliseconds) to use for Redis connection when the `redis` strategy is defined.
        This field is deprecated and replaced with `redis.connect_timeout`, `redis.send_timeout`, and `redis.read_timeout`.
        The `redis.timeout` field will continue to work in a backwards compatible way, but it is recommended to use the replacement fields.
        If set to something other than the default, a deprecation warning will be logged in the log file, stating the field's deprecation
        and planned removal in v3.x.x.
    - name: redis.connect_timeout
      minimum_version: "2.5.x"
      required: semi
      default: 2000
      datatype: number
      description: |
        Connection timeout to use for Redis connection when the `redis` strategy is defined.
    - name: redis.send_timeout
      minimum_version: "2.5.x"
      required: semi
      default: 2000
      datatype: number
      description: |
        Send timeout to use for Redis connection when the `redis` strategy is defined.
    - name: redis.read_timeout
      minimum_version: "2.5.x"
      required: semi
      default: 2000
      datatype: number
      description: |
        Read timeout to use for Redis connection when the `redis` strategy is defined.
    - name: redis.username
      minimum_version: "2.8.x"
      required: semi
      default: null
      value_in_examples: null
      datatype: string
      referenceable: true
      description: |
        Username to use for Redis connection when the `redis` strategy is defined and ACL authentication is desired.
        If undefined, ACL authentication will not be performed.

        This requires Redis v6.0.0+. The username **cannot** be set to `default`.
    - name: redis.password
      required: semi
      default: null
      value_in_examples: null
      datatype: string
      referenceable: true
      description: |
        Password to use for Redis connection when the `redis` strategy is defined.
        If undefined, no AUTH commands are sent to Redis.
    - name: redis.database
      required: semi
      default: 0
      value_in_examples: null
      datatype: integer
      description: |
        Database to use for Redis connection when the `redis` strategy is defined.
    - name: redis.sentinel_master
      required: semi
      default: null
      value_in_examples: null
      datatype: string
      description: |
        Sentinel master to use for Redis connections when the `redis` strategy is defined.
        Defining this value implies using Redis Sentinel.
    - name: redis.sentinel_username
      minimum_version: "2.8.x"
      required: semi
      default: null
      value_in_examples: null
      datatype: string
      referenceable: true
      description: |
        Sentinel username to authenticate with a Redis Sentinel instance.
        If undefined, ACL authentication will not be performed. This requires Redis v6.2.0+.
    - name: redis.sentinel_password
      required: semi
      default: null
      value_in_examples: null
      datatype: string
      referenceable: true
      description: |
        Sentinel password to authenticate with a Redis Sentinel instance.
        If undefined, no AUTH commands are sent to Redis Sentinels.
    - name: redis.sentinel_role
      required: semi
      default: null
      value_in_examples: null
      datatype: string
      description: |
        Sentinel role to use for Redis connections when the `redis` strategy is defined.
        Defining this value implies using Redis Sentinel. Available options:  `master`, `slave`, `any`.
    - name: redis.sentinel_addresses
      required: semi
      default: null
      value_in_examples: null
      datatype: array of string elements
      description: |
        Sentinel addresses to use for Redis connections when the `redis` strategy is defined.
        Defining this value implies using Redis Sentinel. Each string element must
        consist of a hostname (or IP address) and port. The minimum length of the array is 1 element.
    - name: redis.cluster_addresses
      required: semi
      default: null
      value_in_examples: null
      datatype: array of string elements
      description: |
        Cluster addresses to use for Redis connections when the `redis` strategy is defined.
        Defining this value implies using Redis cluster. Each string element must
        consist of a hostname (or IP address) and port. The minimum length of the array is 1 element.
    - name: redis.keepalive_backlog
      minimum_version: "2.5.x"
      required: false
      default: null
      value_in_examples: null
      datatype: integer
      description: |
        If specified, limits the total number of opened connections for a pool. If the
        connection pool is full, all connection queues beyond the maximum limit go into
        the backlog queue. Once the backlog queue is full, subsequent connect operations
        will fail and return `nil`. Queued connect operations resume once the number of
        connections in the pool is less than `keepalive_pool_size`. Note that queued
        connect operations are subject to set timeouts.
    - name: redis.keepalive_pool
      minimum_version: "2.5.x"
      required: false
      default: generated from string template
      value_in_examples: null
      datatype: string
      description: |
        The custom name of the connection pool. If not specified, the connection pool
        name is generated from the string template `"<host>:<port>"` or `"<unix-socket-path>"`.
    - name: redis.keepalive_pool_size
      minimum_version: "2.5.x"
      required: false
      default: 30
      value_in_examples: null
      datatype: integer
      description: |
        The size limit for every cosocket connection pool associated with every remote
        server, per worker process. If no `keepalive_pool_size` is specified and no `keepalive_backlog`
        is specified, no pool is created. If no `keepalive_pool_size` is specified and `keepalive_backlog`
        is specified, then the pool uses the default value `30`.
    - name: window_type
      required: true
      default: sliding
      value_in_examples: null
      datatype: string
      description: |
        Sets the time window type to either `sliding` (default) or `fixed`.
        Sliding windows apply the rate limiting logic while taking into account
        previous hit rates (from the window that immediately precedes the current)
        using a dynamic weight.
        Fixed windows consist of buckets that are statically assigned to a
        definitive time range, each request is mapped to only one fixed window
        based on its timestamp and will affect only that window's counters.
        For more information refer to the
        [Enterprise Rate Limiting Library Overview](/gateway/latest/reference/rate-limiting/#overview).
    - name: retry_after_jitter_max
      required: true
      default: 0
      value_in_examples: null
      datatype: number
      description: |
        The upper bound of a jitter (random delay) in seconds to be added to the `Retry-After`
        header of denied requests (status = `429`) in order to prevent all the clients
        from coming back at the same time. The lower bound of the jitter is `0`; in this case,
        the `Retry-After` header is equal to the `RateLimit-Reset` header.
    - name: enforce_consumer_groups
      minimum_version: "2.7.x"
      required: false
      default: false
      value_in_examples: true
      datatype: boolean
      description: |
        Set to `true` to enable `consumer_groups`, which allows the settings
        from one of the allowed consumer groups to override the given plugin
        configuration.
    - name: consumer_groups
      minimum_version: "2.7.x"
      required: semi
      default: null
      value_in_examples:
        - group1
        - group2
      datatype: array of string elements
      description: |
        List of consumer groups allowed to override the rate limiting
        settings for the given Route or Service. Required if
        `enforce_consumer_groups` is set to `true`.

        Flipping `enforce_consumer_groups` from `true` to `false` disables the
        group override, but does not clear the list of consumer groups.
        You can then flip `enforce_consumer_groups` to `true` to re-enforce the
        groups.
    - name: disable_penalty
      minimum_version: "3.1.x"
      required: false
      default: false
      value_in_examples: null
      datatype: boolean
      description: |
        If set to `true`, this doesn't count denied requests (status = `429`). If set to `false`, all requests, including denied ones, are counted. This parameter only affects the `sliding` window_type.
    - name: error_code
      minimum_version: "3.1.x"
      required: false
      default: 429
      datatype: number
      description: |
        Set a custom error code to return when the rate limit is exceeded.
    - name: error_message
      minimum_version: "3.1.x"
      required: false
      default: rate limit exceeded
      datatype: string
      description: |
        Set a custom error message to return when the rate limit is exceeded.

  extra: |
    **Notes:**

     * The plugin does not support the `cluster` strategy in
       [hybrid mode](/gateway/latest/plan-and-deploy/hybrid-mode/).
       The `redis` strategy must be used instead.

     * Redis configuration values are ignored if the `cluster` strategy is used.

     * PostgreSQL 9.5+ is required when using the `cluster` strategy with `postgres` as the backing Kong cluster data store.

     * The `dictionary_name` directive was added to prevent the usage of the `kong` shared dictionary,
       which could lead to `no memory` errors.

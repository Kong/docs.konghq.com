name: Unbundled Plugin
service_id: true
route_id: true
consumer_id: false
protocols:
  - name: http
  - name: https
  - name: grpc
  - name: grpcs
dbless_compatible: 'yes'
config:
  - name: realm
    required: false
    default: ngx.var.host
    datatype: string
    description: |
      When authentication or authorization fails, or there is an unexpected
      error, the plugin sends an `WWW-Authenticate` header with the `realm`
      attribute value.
  - name: enable_hs_signatures
    required: false
    default: false
    datatype: boolean
    description: |
      Tokens signed with HMAC algorithms such as `HS256`, `HS384`, or `HS512` are not
      accepted by default. If you need to accept such tokens for verification,
      enable this setting.
  - name: enable_instrumentation
    required: false
    default: false
    datatype: boolean
    description: |
      When you are experiencing problems in production and don't want to change
      the logging level on Kong nodes, which requires a reload, use this
      parameter to enable instrumentation for the request. The parameter writes
      log entries with some added information using `ngx.CRIT` (CRITICAL) level.
  - name: access_token_issuer
    required: false
    default: kong
    datatype: string
    description: |
      The `iss` claim of a signed or re-signed access token is set to this value.
      Original `iss` claim of the incoming token (possibly introspected) is
      stored in `original_iss` claim of the newly signed access token.
  - name: access_token_keyset
    required: false
    default: kong
    datatype: string
    description: |
      Selects the private key for access token signing.
  - name: access_token_jwks_uri
    required: false
    default: null
    datatype: string
    description: |
      If you want to use config.verify_access_token_signature, you must specify
      the URI where the plugin can fetch the public keys (JWKS) to verify the
      signature of the access token. If you don't specify a URI and you pass a
      JWT token to the plugin, then the plugin responds with
      `401 Unauthorized`.
  - name: access_token_request_header
    required: false
    default: authorization
    datatype: string
    description: |
      This parameter tells the name of the header where to look for the access token.
      By default, the plugin searches it from `Authorization: Bearer <token>` header
      (the value being magic key `authorization:bearer`). If you don't want to
      do anything with `access token`, then you can set this to `null` or `""` (empty string).
      Any header can be used to pass the access token to the plugin. Two predefined
      values are `authorization:bearer` and `authorization:basic`.
  - name: access_token_leeway
    required: false
    default: 0
    datatype: number
    description: |
      Adjusts clock skew between the token issuer and Kong. The value
      is added to the token's `exp` claim before checking token expiry against
      Kong servers' current time in seconds. You can disable access token
      `expiry` verification altogether with `config.verify_access_token_expiry`.
  - name: access_token_scopes_required
    required: false
    default: null
    datatype: array of string elements
    description: |
      Specify the required values (or scopes) that are checked by a
      claim specified by `config.access_token_scopes_claim`. For example,
      `[ "employee demo-service", "superadmin" ]` can be given as
      `"employee demo-service,superadmin"` (form post) would mean that the claim
      needs to have values `"employee"` and `"demo-service"` **OR** that the claim
      needs to have the value of `"superadmin"` to be successfully authorized for
      the upstream access. If required scopes are
      not found in access token, the plugin responds with `403 Forbidden`.
  - name: access_token_scopes_claim
    required: false
    default:
      - scope
    datatype: array of string elements
    description: |
      Specify the claim in an access token to verify against values of
      `config.access_token_scopes_required`. This supports nested claims. For
      example, with Keycloak you could use `[ "realm_access", "roles" ]`, which can
      be given as `realm_access,roles` (form post).
      If the claim is not found in the access token, and you have specified
      `config.access_token_scopes_required`,
      the plugin responds with `403 Forbidden`.
  - name: access_token_consumer_claim
    required: false
    default: null
    datatype: array of string elements
    description: |
      When you set a value for this parameter, the plugin tries to map an arbitrary
      claim specified with this configuration parameter (for example, `sub` or `username`) in
      an access token to Kong consumer entity. Kong consumers have an `id`, a `username`,
      and a `custom_id`. The `config.access_token_consumer_by` parameter
      tells the plugin which of these Kong consumer properties can be used for mapping.
      If this parameter is enabled but the mapping fails, such as when there's
      a non-existent Kong consumer, the plugin responds with `403 Forbidden`.
      Kong [consumer mapping](#consumer-mapping) is useful when you want to communicate this information
      to other plugins such as [ACL](/hub/kong-inc/acl/) or [rate limiting](/hub/kong-inc/rate-limiting/).
      The JWT Signer plugin also sets a couple of standard Kong
      upstream consumer headers.
  - name: access_token_consumer_by
    required: false
    default:
      - username
      - custom_id
    datatype: array of string elements
    description: |
      When the plugin tries to apply an access token to a Kong consumer mapping,
      it tries to find a matching Kong consumer from properties defined using
      this configuration parameter. The parameter can take an array of
      values. Valid values are `id`, `username`, and `custom_id`.
  - name: access_token_upstream_header
    required: false
    default: 'authorization:bearer'
    datatype: string
    description: |
      Removes the config.access_token_request_header from the request after reading its
      value. With `config.access_token_upstream_header`, you can specify the upstream header where the
      plugin adds the Kong signed token. If you don't specify a value,
      such as use `null` or `""` (empty string), the plugin does not even try to
      sign or re-sign the token.
  - name: access_token_upstream_leeway
    required: false
    default: 0
    datatype: number
    description: |
      If you want to add or perhaps subtract (using a negative value) expiry
      time of the original access token, you can specify a value that is added to
      the original access token's `exp` claim.
  - name: access_token_introspection_endpoint
    required: false
    default: null
    datatype: string
    description: |
      When you use opaque access tokens and you want to turn on access token
      introspection, you need to specify the OAuth 2.0 introspection endpoint URI
      with this configuration parameter. Otherwise, the plugin does not try
      introspection and returns `401 Unauthorized` instead.
  - name: access_token_introspection_authorization
    required: false
    default: null
    datatype: string
    description: |
      If the introspection endpoint requires client authentication (client being
      the JWT Signer plugin), you can specify the `Authorization` header's value with this
      configuration parameter. For example, if you use client credentials, enter
      the value of `"Basic base64encode('client_id:client_secret')"`
      to this configuration parameter. You are responsible for providing the full string
      of the header and doing all of the necessary encodings (such as base64)
      required on a given endpoint.
  - name: access_token_introspection_body_args
    required: false
    default: null
    datatype: string
    description: |
      If you need to pass additional body arguments to an introspection endpoint
      when the plugin introspects the opaque access token, use this config parameter
      to specify them. You should URL encode the value. For example: `resource=` or `a=1&b=&c`.
  - name: access_token_introspection_hint
    required: false
    default: access_token
    datatype: string
    description: |
      If you need to give hint parameter when introspecting an access token,
      use this parameter to specify the value. By default, the plugin
      sends `hint=access_token`.
  - name: access_token_introspection_jwt_claim
    required: false
    default: null
    datatype: array of string elements
    description: |
      If your introspection endpoint returns an access token in one of the keys
      (or claims) within the introspection results (`JSON`), the plugin can use that value
      instead of the introspection results when doing expiry verification and
      signing of the new token issued by Kong. For example, if you specify
      `[ "token_string" ]`, which can be given as `"token_string"` (form post)
      to this configuration parameter, the plugin looks for key `token_string`
      in JSON of the introspection results and uses that as an access token instead
      of using introspection JSON directly. If the key cannot be found, the
      plugin responds with `401 Unauthorized`. Also if the key is found
      but cannot be decoded as JWT, it also responds with `401 Unauthorized`.
  - name: access_token_introspection_scopes_required
    required: false
    default: null
    datatype: array of string elements
    description: |
      Specify the required values (or scopes) that are checked by an
      introspection claim/property specified by `config.access_token_introspection_scopes_claim`.
      For example, `[ "employee demo-service", "superadmin" ]` can be given as `"employee demo-service,superadmin"`
      (form post) would mean that the claim needs to have values `"employee"` and `"demo-service"` **OR**
      that the claim needs to have value of `"superadmin"` to be successfully authorized for the upstream
      access. If required scopes are not found in access token introspection results (`JSON`),
      the plugin responds with `403 Forbidden`.
  - name: access_token_introspection_scopes_claim
    required: true
    default:
      - scope
    datatype: array of string elements
    description: |
      Specify the claim/property in access token introspection results
      (`JSON`) to be verified against values of `config.access_token_introspection_scopes_required`.
      This supports nested claims. For example, with Keycloak you could use `[ "realm_access", "roles" ]`,
      which can be given as `realm_access,roles` (form post). If the claim is not found in access
      token introspection results, and you have specified `config.access_token_introspection_scopes_required`,
      the plugin responds with `403 Forbidden`.
  - name: access_token_introspection_consumer_claim
    required: false
    default: null
    datatype: array of string elements
    description: |
      When you set a value for this parameter, the plugin tries to map an arbitrary
      claim specified with this configuration parameter (such as `sub` or `username`)
      in access token introspection results to the Kong consumer entity. Kong consumers
      have an `id`, a `username`, and a `custom_id`. The
      `config.access_token_introspection_consumer_by` parameter tells the plugin which of these
      Kong consumer properties can be used for mapping. If this parameter is enabled
      but the mapping fails, such as when there's
      a non-existent Kong consumer, the plugin responds
      with `403 Forbidden`. Kong [consumer mapping](#consumer-mapping) is useful when you want to
      communicate this information to other plugins such as [ACL](/hub/kong-inc/acl/)
      or [rate limiting](/hub/kong-inc/rate-limiting/). The JWT Signer plugin also
      sets a couple of standard Kong upstream consumer headers.
extra: |
  **Configuration Notes:**

  Most of the parameters are optional, but you need to specify some options to actually
  make the plugin work:

  * For example, signature verification cannot be done without the plugin knowing about
  `config.access_token_jwks_uri` and/or `config.channel_token_jwks_uri`.

  * Also for introspection to work, you need to specify introspection endpoints
  `config.access_token_introspection_endpoint` and/or `config.channel_token_introspection_endpoint`.

publisher: Kong Inc.
desc: Verify and sign one or two tokens in a request
description: |
  This is a sample unbundled plugin with overrides
enterprise: true
plus: true
type: plugin
categories:
  - authentication
kong_version_compatibility:
  community_edition:
    compatible: null
  enterprise_edition:
    compatible: true

openapi: 3.0.2
info:
  contact:
    email: support@konghq.com
    name: Kong Inc
    url: https://konghq.com
  description: The API for configuring Konnect Control Planes.
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  title: Konnect Control Planes Configuration
  version: 2.0.0
servers:
  - url: https://us.api.konghq.com/v2
    description: US Region Konnect Platform Base URL
  - url: https://eu.api.konghq.com/v2
    description: EU Region Konnect Platform Base URL
  - url: https://au.api.konghq.com/v2
    description: AU Region Konnect Platform Base URL
security:
  - konnectAccessToken: []
  - personalAccessToken: []
tags:
  - description: Gateway services
    name: Services
  - description: Gateway routes
    name: Routes
  - description: Plugins
    name: Plugins
  - description: Consumers
    name: Consumers
  - description: Consumer Groups
    name: consumer-groups
  - description: Certificates
    name: Certificates
  - description: SNIs
    name: SNIs
  - description: CA certificates
    name: CA Certificates
  - description: Upstreams
    name: Upstreams
  - description: Vaults
    name: Vaults
  - description: Keys
    name: Keys
  - description: Key-sets
    name: Key-sets
  - description: Information routes
    name: Information
  - description: Target routes
    name: Targets
  - description: DP Nodes
    name: DP Nodes
  - description: DP Certificates
    name: DP Certificates
  - description: Custom Plugin Schemas
    name: Custom Plugin Schemas
externalDocs:
  description: Documentation for Kong Gateway and its APIs
  url: https://docs.konghq.com
paths:
  /control-planes/{controlPlaneId}/expected-config-hash:
    get:
      summary: Fetch Expected Config Hash
      tags:
        - DP Nodes
      responses:
        '200':
          $ref: '#/components/responses/get-expected-config-hash'
      operationId: get-expected-config-hash
      description: >-
        Retrieve the expected config hash for this control plane. The expected
        config hash can be used to verify if the config hash of a data plane
        node is up to date with the control plane. The config hash will be the
        same if they are in sync.
      parameters:
        - $ref: '#/components/parameters/page_size'
        - $ref: '#/components/parameters/page_number'
    parameters:
      - $ref: '#/components/parameters/controlPlaneId'
  /control-planes/{controlPlaneId}/dp-client-certificates:
    parameters:
      - $ref: '#/components/parameters/controlPlaneId'
    get:
      summary: List DP Client Certificates
      responses:
        '200':
          $ref: '#/components/responses/list-dp-client-certs'
      operationId: get-dp-client-certificates
      tags:
        - DP Certificates
      description: >-
        Returns a list of pinned dataplane client certificates that are
        associated to this control plane. A pinned dataplane certificate allows
        dataplanes configured with the certificate and corresponding private key
        to establish connection with this control plane.
      parameters:
        - $ref: '#/components/parameters/page_size'
        - $ref: '#/components/parameters/page_number'
    post:
      summary: Pin New DP Client Certificate
      operationId: post-dp-client-certificates
      responses:
        '201':
          $ref: '#/components/responses/get-dp-client-cert'
      tags:
        - DP Certificates
      description: >-
        Pin a new DP Client Certificate to this control plane. A pinned
        dataplane certificate allows dataplanes configured with the certificate
        and corresponding private key to establish connection with this control
        plane.
      requestBody:
        $ref: '#/components/requestBodies/create-dp-client-cert'
  /control-planes/{controlPlaneId}/dp-client-certificates/{certificateId}:
    parameters:
      - $ref: '#/components/parameters/controlPlaneId'
      - schema:
          type: string
        name: certificateId
        in: path
        required: true
    get:
      summary: Fetch DP Client Certificate
      tags:
        - DP Certificates
      responses:
        '200':
          $ref: '#/components/responses/get-dp-client-cert'
      operationId: get-dp-client-certificates-cert_id
      description: >-
        Retrieve a pinned dataplane client certificate associated to this
        control plane. A pinned dataplane certificate allows dataplanes
        configured with the certificate and corresponding private key to
        establish connection with this control plane.
      parameters:
        - $ref: '#/components/parameters/page_size'
        - $ref: '#/components/parameters/page_number'
    delete:
      summary: Delete DP Client Certificate
      operationId: delete-dp-client-certificates-cert_id
      responses:
        '204':
          description: No Content
      tags:
        - DP Certificates
      description: >-
        Remove a pinned dataplane client certificate associated to this control
        plane. Removing a pinned dataplane certificate would invalidate any
        dataplanes currently connected to this control plane using this
        certificate.
  /control-planes/{controlPlaneId}/nodes:
    get:
      summary: List Data Plane Node Records
      responses:
        '200':
          $ref: '#/components/responses/list-nodes'
      operationId: get-nodes
      tags:
        - DP Nodes
      description: >-
        Returns a list of data plane node records that are associated to this
        control plane. A data plane node record contains metadata information
        for the data plane running Kong Gateway.
      parameters:
        - $ref: '#/components/parameters/page_size'
        - $ref: '#/components/parameters/page_number'
    parameters:
      - $ref: '#/components/parameters/controlPlaneId'
  /control-planes/{controlPlaneId}/nodes/{nodeId}:
    parameters:
      - schema:
          type: string
        name: nodeId
        in: path
        required: true
      - $ref: '#/components/parameters/controlPlaneId'
    get:
      summary: Fetch Data Plane Node Record
      responses:
        '200':
          $ref: '#/components/responses/get-node'
      operationId: get-nodes-node_id
      tags:
        - DP Nodes
      description: >-
        Retrieve a specific data plane node record associated to this control
        plane. A data plane node record contains all the metadata information of
        the Kong Gateway dataplane.
      parameters:
        - $ref: '#/components/parameters/pagination-size'
        - $ref: '#/components/parameters/pagination-tags-filter'
    delete:
      summary: Delete Data Plane Node Record
      operationId: delete-nodes-node_id
      responses:
        '204':
          description: No Content
      tags:
        - DP Nodes
      description: >-
        Remove a specific data plane node record associated to this control
        plane. Deleting this record does not prevent the data plane node from
        re-connecting to the control plane.
  /control-planes/{controlPlaneId}/core-entities/plugin-schemas:
    parameters:
      - $ref: '#/components/parameters/controlPlaneId'
    get:
      summary: List custom plugin schemas associated with a control plane
      responses:
        '200':
          $ref: '#/components/responses/list-plugin-schemas'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
      operationId: list-plugin-schemas
      description: >-
        Returns an array of custom plugins schemas associated with a control
        plane.
      parameters:
        - $ref: '#/components/parameters/PageSize'
        - $ref: '#/components/parameters/PageAfter'
        - $ref: '#/components/parameters/PageBefore'
      tags:
        - Custom Plugin Schemas
    post:
      summary: Upload custom plugin schema
      operationId: create-plugin-schemas
      responses:
        '201':
          $ref: '#/components/responses/plugin-schemas'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '409':
          $ref: '#/components/responses/Conflict'
      tags:
        - Custom Plugin Schemas
      description: Upload a custom plugin schema associated with a control plane.
      requestBody:
        $ref: '#/components/requestBodies/create-plugin-schemas'
  /control-planes/{controlPlaneId}/core-entities/plugin-schemas/{name}:
    parameters:
      - $ref: '#/components/parameters/controlPlaneId'
      - schema:
          type: string
          example: myplugin
        name: name
        in: path
        required: true
        description: The custom plugin name
    get:
      summary: Fetch custom plugin schema
      responses:
        '200':
          $ref: '#/components/responses/plugin-schemas'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      operationId: get-plugin-schema
      description: Returns information about a custom plugin from a given name.
      tags:
        - Custom Plugin Schemas
    delete:
      summary: Delete custom plugin schema
      operationId: delete-plugin-schemas
      responses:
        '204':
          description: No Content
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      description: Delete an individual custom plugin schema.
      tags:
        - Custom Plugin Schemas
    put:
      summary: Create or update a custom plugin schema
      operationId: update-plugin-schemas
      responses:
        '200':
          $ref: '#/components/responses/plugin-schemas'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      description: Create or update an individual custom plugin schema.
      tags:
        - Custom Plugin Schemas
      requestBody:
        $ref: '#/components/requestBodies/create-plugin-schemas'
  /control-planes/{controlPlaneId}/core-entities/ca_certificates:
    parameters:
      - $ref: '#/components/parameters/controlPlaneId'
    get:
      description: >-
        Retrieve a list of all available Certificate Authority (CA)
        certificates, including the certificate ID, creation date, and other
        details. You can use query parameters to filter the results by size or
        tags, for example `/ca-certificates?size=50&tags=enterprise`.
      operationId: list-ca_certificates
      parameters:
        - $ref: '#/components/parameters/pagination-size'
        - $ref: '#/components/parameters/pagination-offset'
        - $ref: '#/components/parameters/pagination-tags-filter'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CA-Certificate'
          description: A successful response listing CA Certificates
      summary: List all CA certificates
      tags:
        - CA Certificates
    post:
      description: >-
        Create a new Certificate Authority (CA) certificate. The request body
        must include the `cert` property, the certificate data in PEM format; it
        can also include `cert_digest`, a digest of the certificate in hex
        format for verifying the certificates integrity, and `tags`, an optional
        list of tags to categorize the certificate. 
      operationId: create-ca_certificate
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CA-Certificate'
          description: The created certificate object.
        '400':
          description: Invalid CA certificate
      summary: Create a new CA certificate
      tags:
        - CA Certificates
      requestBody:
        $ref: '#/components/requestBodies/CA-cert-request'
  /control-planes/{controlPlaneId}/core-entities/ca_certificates/{ca_certificate_id}:
    delete:
      description: >-
        Delete the specified Certificate Authority (CA) certificate using the
        provided ca_certificate_id.
      operationId: delete-ca_certificate
      responses:
        '204':
          description: Successfully deleted CA Certificate or the resource didn't exist
      summary: Delete a CA Certificate
      tags:
        - CA Certificates
    get:
      description: >-
        Retrieve details about the specified Certificate Authority (CA)
        certificate using the provided path parameter `ca_certificate_id`.
      operationId: get-ca_certificate
      parameters:
        - description: The unique identifier of the certificate to retrieve.
          in: path
          name: ca_certificate_id
          required: true
          schema:
            type: string
          examples:
            example:
              summary: Example CA certificate ID
              value: 04fbeacf-a9f1-4a5d-ae4a-b0407445db3f
        - $ref: '#/components/parameters/pagination-offset'
        - $ref: '#/components/parameters/pagination-size'
        - $ref: '#/components/parameters/pagination-tags-filter'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CA-Certificate'
          description: >-
            The specified CA certificate exists in the system, and the response
            includes details about the certificate.
        '404':
          description: Resource does not exist
          content:
            application/json:
              schema:
                type: object
                x-examples:
                  Example 1:
                    code: 5
                    message: not found
                properties:
                  code:
                    type: integer
                    description: Error code
                    example: 5
                  message:
                    type: string
                    description: A message describing the error message.
                    example: not found
              examples:
                404 Not Found:
                  value:
                    code: 5
                    message: not found
      summary: Fetch a CA certificate
      tags:
        - CA Certificates
    put:
      description: >-
        Create or Update a CA Certificate using the provided path parameter
        `ca_certificate_id`.
      operationId: updatet-ca_certificate
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CA-Certificate'
          description: Successfully upserted CA Certificate
        '400':
          content:
            application/json:
              schema:
                type: object
          description: Invalid CA Certificate
      summary: Update a CA Certificate
      tags:
        - CA Certificates
      requestBody:
        $ref: '#/components/requestBodies/CA-cert-request'
    parameters:
      - $ref: '#/components/parameters/ca_certificate_id'
      - $ref: '#/components/parameters/controlPlaneId'
  /control-planes/{controlPlaneId}/core-entities/certificates:
    get:
      description: >-
        Retrieve a list of all available certificate/ You can use query
        parameters to filter the results by size or tags, for example
        `/certificates?size=50&tags=enterprise`.
      operationId: list-certificates
      parameters:
        - $ref: '#/components/parameters/pagination-size'
        - $ref: '#/components/parameters/pagination-offset'
        - $ref: '#/components/parameters/pagination-tags-filter'
      responses:
        '200':
          $ref: '#/components/responses/certificate_response'
      summary: List all certificates
      tags:
        - Certificates
    post:
      description: >-
        Create a new certificate with the provided details. Use this endpoint to
        add a new certificate to the system. The request body must include the
        certificate data and other details required for creating a new
        certificate.
      operationId: create-certificate
      responses:
        '200':
          $ref: '#/components/responses/certificate_response'
        '400':
          content:
            application/json:
              schema:
                type: object
          description: Invalid Certificate
      summary: Create a new Certificate
      tags:
        - Certificates
      requestBody:
        $ref: '#/components/requestBodies/cert-request'
    parameters:
      - name: controlPlaneId
        in: path
        required: true
        schema:
          type: string
          example: 9524ec7d-36d9-465d-a8c5-83a3c9390458
        description: >-
          The ID of your control plane. This variable is available in the
          Konnect manager
  /control-planes/{controlPlaneId}/core-entities/certificates/{certificate_id}:
    delete:
      description: |
        Delete a Certificate
      operationId: delete-certificate
      parameters:
        - description: ID of the Certificate to delete
          in: path
          name: certificate_id
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Successfully deleted Certificate or the resource didn't exist
      summary: Delete a Certificate
      tags:
        - Certificates
    get:
      description: >-
        Retrieve details about the specified certificate using the provided path
        parameter `certificate_id`.
      operationId: get-certificate
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Certificate'
          description: HTTP 200 OK
        '404':
          description: Resource does not exist
      summary: Fetch a Certificate
      tags:
        - Certificates
      parameters:
        - $ref: '#/components/parameters/pagination-offset'
        - $ref: '#/components/parameters/pagination-tags-filter'
        - $ref: '#/components/parameters/pagination-size'
    put:
      description: >
        Update details about the specified certificate using the provided path
        parameter `certificate_id`.


        Inserts (or replaces) the certificate under the requested
        `certificate_id`with the definition specified in the request body. When
        the `id` attribute has the structure of a UUID, the certificate being
        inserted/replaced will be identified by its `id`. Otherwise it will be
        identified by the `name`.


        When creating a new Certificate without specifying `id` (neither in the
        path or the request body), then it will be auto-generated.
      operationId: update-certificate-put
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Certificate'
          description: Successfully upserted Certificate
        '400':
          content:
            application/json:
              schema:
                type: object
          description: Invalid Certificate
      summary: Update a Certificate
      tags:
        - Certificates
      requestBody:
        $ref: '#/components/requestBodies/cert-request'
    parameters:
      - name: certificate_id
        in: path
        required: true
        schema:
          type: string
          example: 7fca84d6-7d37-4a74-a7b0-93e576089a41
        description: The unique identifier of the Certificate to retrieve.
      - name: controlPlaneId
        in: path
        required: true
        schema:
          type: string
          example: 9524ec7d-36d9-465d-a8c5-83a3c9390458
        description: >-
          The ID of your control plane. This variable is available in the
          Konnect manager
  /control-planes/{controlPlaneId}/core-entities/certificates/{certificate_name_or_id}/snis:
    get:
      description: >-
        Retrieve a paginated list of all SNIs associated with a certificate. Use
        this endpoint to retrieve a list of SNIs that are linked to a specific
        certificate. You can use the optional query parameters to filter the
        results based on specific criteria. The response will include the list
        of SNIs and pagination information. See the response schema for details
        on the expected format of the response body.
      parameters:
        - $ref: '#/components/parameters/pagination-size'
        - $ref: '#/components/parameters/pagination-offset'
        - $ref: '#/components/parameters/pagination-tags-filter'
      responses:
        '200':
          $ref: '#/components/responses/sni-response'
      summary: List SNIs associated with a certificate
      tags:
        - SNIs
      operationId: get-sni-with-certificate
    post:
      description: >-
        Create a new SNI and associate it with a certificate in the system. Use
        this endpoint to add a new SNI to the system and link it to a specific
        certificate.
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SNI'
          description: Successfully created SNI
        '400':
          content:
            application/json:
              schema:
                type: object
              examples:
                Bad Request:
                  value:
                    code: 3
                    message: data constraint error
                    details:
                      - '@type': type.googleapis.com/kong.admin.model.v1.ErrorDetail
                        type: ERROR_TYPE_REFERENCE
                        field: certificate.id
                        messages:
                          - >-
                            certificate_id (type: foreign) constraint failed for
                            value 'a3ad71a8-6685-4b03-a101-980a953544f6': 
          description: Invalid SNI
      summary: Create a new SNI associated with a Certificate
      tags:
        - SNIs
      requestBody:
        $ref: '#/components/requestBodies/create-sni'
      operationId: create-sni-for-certificate
    parameters:
      - $ref: '#/components/parameters/certificate_name_or_id'
      - $ref: '#/components/parameters/controlPlaneId'
  /control-planes/{controlPlaneId}/core-entities/certificates/{certificate_id}/snis/{sni_id}:
    delete:
      description: Delete a an SNI associated with a a Certificate using an ID.
      responses:
        '204':
          description: Successfully deleted SNI or the resource didn't exist
      summary: Delete a an SNI associated with a Certificate
      tags:
        - SNIs
      operationId: delete-sni-for-certificate
    get:
      description: Get an SNI associated with a Certificate using ID or name.
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SNI'
          description: Successfully fetched SNI
        '404':
          description: Resource does not exist
      summary: Fetch an SNI associated with a certificate
      tags:
        - SNIs
      operationId: fetch-sni-with-certificate
      parameters:
        - $ref: '#/components/parameters/pagination-offset'
        - $ref: '#/components/parameters/pagination-size'
        - $ref: '#/components/parameters/pagination-tags-filter'
    put:
      description: >-
        Create or Update an SNI associated with a Certificate using ID or name.


        Inserts (or replaces) the SNI under the requested resource with the
        definition specified in the body. The SNI will be identified by the id
        attribute.


        When the name or id attribute has the structure of a UUID, the SNI being
        inserted/replaced will be identified by its id. Otherwise it will be
        identified by its name.


        When creating a new SNI without specifying id (neither in the URL nor in
        the body), then it will be auto-generated.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SNI'
        description: Description of the SNI
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SNI'
          description: Successfully upserted SNI
        '400':
          content:
            application/json:
              schema:
                type: object
          description: Invalid SNI
      summary: Upsert an SNI associated with a certificate
      tags:
        - SNIs
      operationId: upsert-sni-for-certificate
    parameters:
      - $ref: '#/components/parameters/certificate_id'
      - $ref: '#/components/parameters/sni_id'
      - $ref: '#/components/parameters/controlPlaneId'
  /control-planes/{controlPlaneId}/core-entities/consumers:
    get:
      description: >-
        Retrieve a list of all consumers.You can use query parameters to filter
        the results by size or tags, for example
        `/consumers?size=50&tags=enterprise`.
      operationId: list-consumers
      parameters:
        - $ref: '#/components/parameters/pagination-size'
        - $ref: '#/components/parameters/pagination-offset'
        - $ref: '#/components/parameters/pagination-tags-filter'
      responses:
        '200':
          $ref: '#/components/responses/consumer-create-response'
      summary: List all Consumers
      tags:
        - Consumers
    post:
      description: Create a new Consumer
      operationId: create-consumer
      responses:
        '200':
          $ref: '#/components/responses/consumer-create-response'
        '400':
          content:
            application/json:
              schema:
                type: object
          description: Invalid Consumer
      summary: Create a new Consumer
      tags:
        - Consumers
      requestBody:
        $ref: '#/components/requestBodies/consumer-request'
    parameters:
      - $ref: '#/components/parameters/controlPlaneId'
  /control-planes/{controlPlaneId}/core-entities/consumers/{consumer_id}:
    delete:
      description: >-
        Delete a specific consumer from the system using either the consumer ID
        or the consumer username. This operation is irreversible and permanently
        removes all data associated with the specified consumer. If the consumer
        was deleted succesfully the endpoint will return a 204 response
        indicating that the resource did not exist.
      operationId: delete-consumer
      responses:
        '204':
          description: Successfully deleted Consumer or the resource didn't exist
      summary: Delete a Consumer
      tags:
        - Consumers
    get:
      description: >-
        Retrieve the details of a specific consumer in the system using either
        the consumer ID or the consumer username. If the consumer with the
        specified ID or username cannot be found, the endpoint will return a
        404.
      operationId: get-consumer
      responses:
        '200':
          $ref: '#/components/responses/consumer-create-response'
        '404':
          description: Resource does not exist
      summary: Fetch a Consumer
      tags:
        - Consumers
      parameters:
        - $ref: '#/components/parameters/pagination-offset'
        - $ref: '#/components/parameters/pagination-size'
        - $ref: '#/components/parameters/pagination-tags-filter'
    put:
      description: >-
        Create or Update Consumer using ID or username. The consumer will be
        identified via the username or id attribute.If the consumer with the
        specified ID or username cannot be found, the endpoint will return a
        404.


        When the username or id attribute has the structure of a UUID, the
        Consumer being inserted/replaced will be identified by its id. Otherwise
        it will be identified by its username.


        When creating a new Consumer without specifying id (neither in the URL
        nor in the body), then it will be auto-generated.


        Notice that specifying a username in the URL and a different one in the
        request body is not allowed.
      operationId: upsert-consumer
      responses:
        '200':
          $ref: '#/components/responses/consumer-response-data'
        '400':
          description: Bad Request
        '404':
          description: Not Found
      summary: Update a Consumer
      tags:
        - Consumers
      requestBody:
        $ref: '#/components/requestBodies/consumer-request'
    parameters:
      - $ref: '#/components/parameters/consumer_id'
      - $ref: '#/components/parameters/controlPlaneId'
  /control-planes/{controlPlaneId}/core-entities/consumers/{consumer_id}/plugins:
    get:
      description: 'Retrieve a list of all plugins associated with a consumer. '
      parameters:
        - $ref: '#/components/parameters/pagination-size'
        - $ref: '#/components/parameters/pagination-offset'
        - $ref: '#/components/parameters/pagination-tags-filter'
      responses:
        '200':
          $ref: '#/components/responses/plugin-response'
      summary: List all plugins associated with a consumer
      tags:
        - Plugins
      operationId: list-plugins-for-consumer
    post:
      description: Create a new Plugin associated with a Consumer
      responses:
        '200':
          $ref: '#/components/responses/plugin-response'
        '400':
          content:
            application/json:
              schema:
                type: object
          description: Invalid Plugin
      summary: Create a new Plugin associated with a Consumer
      tags:
        - Plugins
      requestBody:
        $ref: '#/components/requestBodies/plugin-request'
      operationId: create-plugin-for-consumer
    parameters:
      - $ref: '#/components/parameters/consumer_id'
      - $ref: '#/components/parameters/controlPlaneId'
  /control-planes/{controlPlaneId}/core-entities/consumers/{consumer_id}/plugins/{plugin_id_or_instance_name}:
    delete:
      description: Delete a a Plugin associated with a a Consumer using ID.
      responses:
        '204':
          description: Successfully deleted Plugin or the resource didn't exist
      summary: Delete a a Plugin associated with a a Consumer
      tags:
        - Plugins
      operationId: delete-plugin-for-consumer
    get:
      description: Get a Plugin associated with a Consumer using ID.
      responses:
        '200':
          $ref: '#/components/responses/plugin-response'
        '404':
          description: Resource does not exist
      summary: Fetch a Plugin associated with a Consumer
      tags:
        - Plugins
      operationId: fetch-plugin-for-consumer
      parameters:
        - $ref: '#/components/parameters/pagination-offset'
        - $ref: '#/components/parameters/pagination-size'
        - $ref: '#/components/parameters/pagination-tags-filter'
    put:
      description: Create or Update a Plugin associated with a Consumer using ID.
      responses:
        '200':
          $ref: '#/components/responses/plugin-response'
      summary: Upsert a Plugin associated with a Consumer
      tags:
        - Plugins
      requestBody:
        $ref: '#/components/requestBodies/plugin-request'
      operationId: upsert-plugin-for-consumer
    parameters:
      - $ref: '#/components/parameters/consumer_id'
      - $ref: '#/components/parameters/plugin_id_or_instance_name'
      - $ref: '#/components/parameters/controlPlaneId'
  /control-planes/{controlPlaneId}/core-entities/key-sets:
    get:
      description: >
        Retrieve a list of all Key-sets in the system. A Key Set object holds a
        collection of asymmetric key objects. This entity allows to logically
        group keys by their purpose. Key Sets can be both tagged and filtered by
        tags.
      operationId: list-key-sets
      parameters:
        - $ref: '#/components/parameters/pagination-size'
        - $ref: '#/components/parameters/pagination-offset'
        - $ref: '#/components/parameters/pagination-tags-filter'
      responses:
        '200':
          $ref: '#/components/responses/key-set-response'
      summary: List all Key-sets
      tags:
        - Key-sets
    post:
      description: >-
        This endpoint allows creating a new Key-set by sending a JSON object
        that describes the Key-set to be created.The request body must contain
        all the fields required to create a new Key-set. 
      operationId: create-key-set
      responses:
        '200':
          $ref: '#/components/responses/key-set-response'
        '400':
          description: ' Returned if the request contains invalid data.'
      summary: Create a new Key-set
      tags:
        - Key-sets
      requestBody:
        $ref: '#/components/requestBodies/key-set-request'
    parameters:
      - $ref: '#/components/parameters/controlPlaneId'
  /control-planes/{controlPlaneId}/core-entities/key-sets/{key-set_id_or_name}:
    delete:
      description: Delete a Key-set.
      operationId: delete-key-set
      responses:
        '204':
          description: Successfully deleted Key-set or the resource didn't exist
      summary: Delete a Key-set
      tags:
        - Key-sets
    get:
      description: >-
        This endpoint retrieves information about a specific key-set based on
        its ID or name.
      operationId: get-key-set
      responses:
        '200':
          $ref: '#/components/responses/key-set-response'
        '404':
          description: Resource does not exist
      summary: Fetch a Key-set
      tags:
        - Key-sets
      parameters:
        - $ref: '#/components/parameters/pagination-offset'
        - $ref: '#/components/parameters/pagination-size'
        - $ref: '#/components/parameters/pagination-tags-filter'
    put:
      description: Update a Key-set using ID or name.
      operationId: upsert-key-set
      responses:
        '200':
          $ref: '#/components/responses/key-set-response'
        '400':
          content:
            application/json:
              schema:
                type: object
          description: Invalid Key-set
      summary: Update a Key-set
      tags:
        - Key-sets
      requestBody:
        $ref: '#/components/requestBodies/key-set-request'
    parameters:
      - $ref: '#/components/parameters/key-set_id_or_name'
      - $ref: '#/components/parameters/controlPlaneId'
  /control-planes/{controlPlaneId}/core-entities/keys:
    get:
      description: List all Keys
      operationId: list-keys
      parameters:
        - $ref: '#/components/parameters/pagination-size'
        - $ref: '#/components/parameters/pagination-offset'
        - $ref: '#/components/parameters/pagination-tags-filter'
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/Key'
                    type: array
                  offset:
                    $ref: '#/components/schemas/pagination-offset-response'
          description: A successful response listing Keys
      summary: List all Keys
      tags:
        - Keys
    post:
      description: >-
        This API endpoint allows you to create a new key. When the request is
        successful, the API will respond with a 200 status code and a JSON
        object that represents the newly created key. If the request is invalid,
        the API will respond with a `400` status code and an error message in
        the response body.
      operationId: create-key
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Key'
          description: Successfully created Key
        '400':
          content:
            application/json:
              schema:
                type: object
          description: Invalid Key
      summary: Create a new Key
      tags:
        - Keys
      requestBody:
        $ref: '#/components/requestBodies/keys-request'
    parameters:
      - $ref: '#/components/parameters/controlPlaneId'
  /control-planes/{controlPlaneId}/core-entities/keys/{key_id_or_name}:
    delete:
      description: Delete a Key
      operationId: delete-key
      responses:
        '204':
          description: Successfully deleted Key or the resource didn't exist
      summary: Delete a Key
      tags:
        - Keys
    get:
      description: Get a Key using ID or name.
      operationId: get-key
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Key'
              examples:
                example:
                  value:
                    id: d958f66b-8e99-44d2-b0b4-edd5bbf24658
                    jwk: '{alg:RSA,  kid: 42,  ...}'
                    kid: '42'
                    name: a-key
                    pem:
                      private_key: '-----BEGIN'
                      public_key: '-----BEGIN'
                    set:
                      id: b86b331c-dcd0-4b3e-97ce-47c5a9543031
          description: Successfully fetched Key
        '404':
          description: Resource does not exist
      summary: Fetch a Key
      tags:
        - Keys
      parameters:
        - $ref: '#/components/parameters/pagination-offset'
        - $ref: '#/components/parameters/pagination-size'
        - $ref: '#/components/parameters/pagination-tags-filter'
    put:
      description: Create or Update Key using ID or name.
      operationId: upsert-key
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Key'
              examples:
                Example:
                  value:
                    id: d958f66b-8e99-44d2-b0b4-edd5bbf24658
                    jwk: '{alg:RSA,  kid: 42,  ...}'
                    kid: '42'
                    name: a-key
                    pem:
                      private_key: '-----BEGIN'
                      public_key: '-----BEGIN'
                    set:
                      id: b86b331c-dcd0-4b3e-97ce-47c5a9543031
          description: Successfully upserted Key
        '400':
          content:
            application/json:
              schema:
                type: object
          description: Invalid Key
      summary: Upsert a Key
      tags:
        - Keys
      requestBody:
        $ref: '#/components/requestBodies/keys-request'
    parameters:
      - $ref: '#/components/parameters/key_id_or_name'
      - $ref: '#/components/parameters/controlPlaneId'
  /control-planes/{controlPlaneId}/core-entities/plugins:
    get:
      description: >-
        This endpoint allows you to list all the plugins. You can use query
        parameters to filter the results by size or tags, for example
        `/plugins?size=50&tags=enterprise`.
      operationId: list-plugins
      parameters:
        - $ref: '#/components/parameters/pagination-size'
        - $ref: '#/components/parameters/pagination-offset'
        - $ref: '#/components/parameters/pagination-tags-filter'
      responses:
        '200':
          $ref: '#/components/responses/plugin-response'
      summary: List all Plugins
      tags:
        - Plugins
    post:
      description: Create a new Plugin.
      operationId: create-plugin
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Plugin'
              examples:
                example:
                  value:
                    config:
                      anonymous: null
                      hide_credentials: false
                      key_in_body: false
                      key_in_header: true
                      key_in_query: true
                      key_names:
                        - apikey
                      run_on_preflight: true
                    enabled: true
                    id: 3fd1eea1-885a-4011-b986-289943ff8177
                    name: key-auth
                    protocols:
                      - grpc
                      - grpcs
                      - http
                      - https
          description: Successfully created Plugin
        '400':
          content:
            application/json:
              schema:
                type: object
          description: Invalid Plugin
      summary: Create a new Plugin
      tags:
        - Plugins
      requestBody:
        $ref: '#/components/requestBodies/plugin-request'
    parameters:
      - $ref: '#/components/parameters/controlPlaneId'
  /control-planes/{controlPlaneId}/core-entities/plugins/{plugin_id_or_instance_name}:
    delete:
      description: Delete a Plugin
      operationId: delete-plugin
      responses:
        '204':
          description: Successfully deleted Plugin or the resource didn't exist
      summary: Delete a Plugin
      tags:
        - Plugins
    get:
      description: Get a Plugin using ID.
      operationId: get-plugin
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Plugin'
          description: Successfully fetched Plugin
        '404':
          description: Resource does not exist
      summary: Fetch a Plugin
      tags:
        - Plugins
      parameters:
        - $ref: '#/components/parameters/pagination-offset'
        - $ref: '#/components/parameters/pagination-size'
        - $ref: '#/components/parameters/pagination-tags-filter'
    put:
      description: Create or Update Plugin using ID.
      operationId: upsert-plugin
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Plugin'
              examples:
                example:
                  value:
                    config:
                      anonymous: null
                      hide_credentials: false
                      key_in_body: false
                      key_in_header: true
                      key_in_query: true
                      key_names:
                        - apikey
                      run_on_preflight: true
                    enabled: true
                    id: 3fd1eea1-885a-4011-b986-289943ff8177
                    name: key-auth
                    protocols:
                      - grpc
                      - grpcs
                      - http
                      - https
          description: Successfully upserted Plugin
        '400':
          content:
            application/json:
              schema:
                type: object
          description: Invalid Plugin
      summary: Upsert a Plugin
      tags:
        - Plugins
      requestBody:
        $ref: '#/components/requestBodies/plugin-request'
    parameters:
      - $ref: '#/components/parameters/plugin_id_or_instance_name'
      - $ref: '#/components/parameters/controlPlaneId'
  /control-planes/{controlPlaneId}/core-entities/routes:
    get:
      description: >-
        List all routes


        route entities define rules to match client requests. Each route is
        associated with a service, and a service may have multiple routes
        associated to it. Every request matching a given route will be proxied
        to its associated service.


        > Note: Path handling algorithms v1 was deprecated in Kong 3.0. From
        Kong 3.0, when router_flavor is set to expressions, route.path_handling
        will be unconfigurable and the path handling behavior will be v0; when
        router_flavor is set to traditional_compatible, the path handling
        behavior will be v0 regardless of the value of route.path_handling. Only
        router_flavor = traditional will support path_handling v1' behavior.
      operationId: list-routes
      parameters:
        - $ref: '#/components/parameters/pagination-size'
        - $ref: '#/components/parameters/pagination-offset'
        - $ref: '#/components/parameters/pagination-tags-filter'
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/Route'
                    type: array
                  offset:
                    $ref: '#/components/schemas/pagination-offset-response'
          description: A successful response listing routes
      summary: List all routes
      tags:
        - Routes
    post:
      description: Create a new route
      operationId: create-route
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Route'
          description: Successfully created route
        '400':
          content:
            application/json:
              schema:
                type: object
          description: Invalid route
      summary: Create a new route
      tags:
        - Routes
      requestBody:
        $ref: '#/components/requestBodies/route-request'
    parameters:
      - $ref: '#/components/parameters/controlPlaneId'
  /control-planes/{controlPlaneId}/core-entities/routes/{route_id}:
    delete:
      description: Delete a route.
      operationId: delete-route
      responses:
        '204':
          description: Successfully deleted route or the resource didn't exist
      summary: Delete a route
      tags:
        - Routes
    get:
      description: Get a route using ID or name.
      operationId: get-route
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Route'
          description: Successfully fetched route
        '404':
          description: Resource does not exist
      summary: Fetch a route
      tags:
        - Routes
      parameters:
        - $ref: '#/components/parameters/pagination-offset'
        - $ref: '#/components/parameters/pagination-size'
        - $ref: '#/components/parameters/pagination-tags-filter'
    put:
      description: Create or Update route using ID or name.
      operationId: upsert-route
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Route'
          description: Successfully upserted route
        '400':
          content:
            application/json:
              schema:
                type: object
          description: Invalid route
      summary: Update a route
      tags:
        - Routes
      requestBody:
        $ref: '#/components/requestBodies/route-request'
    parameters:
      - name: controlPlaneId
        in: path
        required: true
        schema:
          type: string
          example: 9524ec7d-36d9-465d-a8c5-83a3c9390458
        description: >-
          The ID of your control plane. This variable is available in the
          Konnect manager
      - schema:
          type: string
        name: route_id
        in: path
        required: true
  /control-planes/{controlPlaneId}/core-entities/routes/{route_id}/plugins:
    get:
      description: List all Plugins associated with a a route
      parameters:
        - $ref: '#/components/parameters/pagination-size'
        - $ref: '#/components/parameters/pagination-offset'
        - $ref: '#/components/parameters/pagination-tags-filter'
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/Plugin'
                    type: array
                  offset:
                    $ref: '#/components/schemas/pagination-offset-response'
          description: A successful response listing Plugins
      summary: List all Plugins associated with a route
      tags:
        - Plugins
      operationId: list-plugins-for-route
    post:
      description: Create a new Plugin associated with a route
      responses:
        '200':
          $ref: '#/components/responses/plugin-response'
        '400':
          content:
            application/json:
              schema:
                type: object
          description: Invalid Plugin
      summary: Create a new Plugin associated with a route
      tags:
        - Plugins
      requestBody:
        $ref: '#/components/requestBodies/plugin-request'
      operationId: create-plugin-for-route
    parameters:
      - $ref: '#/components/parameters/route_id'
      - $ref: '#/components/parameters/controlPlaneId'
  /control-planes/{controlPlaneId}/core-entities/routes/{route_id}/plugins/{plugin_id_or_instance_name}:
    delete:
      description: Delete a a Plugin associated with a a route using ID.
      responses:
        '204':
          description: Successfully deleted Plugin or the resource didn't exist
      summary: Delete a a Plugin associated with a route
      tags:
        - Plugins
      operationId: delete-plugin-for-route
    get:
      description: Get a Plugin associated with a route using ID.
      parameters:
        - description: ID or name of the related route
          in: path
          name: route_id
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/pagination-offset'
        - $ref: '#/components/parameters/pagination-size'
        - $ref: '#/components/parameters/pagination-tags-filter'
      responses:
        '200':
          $ref: '#/components/responses/plugin-response'
        '404':
          description: Resource does not exist
      summary: Fetch a Plugin associated with a route
      tags:
        - Plugins
      operationId: fetch-plugin-for-route
    put:
      description: Create or Update a Plugin associated with a route using ID.
      responses:
        '200':
          $ref: '#/components/responses/plugin-response'
        '400':
          content:
            application/json:
              schema:
                type: object
          description: Invalid Plugin
      summary: Upsert a Plugin associated with a route
      tags:
        - Plugins
      requestBody:
        $ref: '#/components/requestBodies/plugin-request'
      operationId: upsert-plugin-for-route
    parameters:
      - $ref: '#/components/parameters/route_id'
      - $ref: '#/components/parameters/plugin_id_or_instance_name'
      - $ref: '#/components/parameters/controlPlaneId'
  /control-planes/{controlPlaneId}/core-entities/services:
    get:
      description: List all services
      operationId: list-services
      parameters:
        - $ref: '#/components/parameters/pagination-size'
        - $ref: '#/components/parameters/pagination-offset'
        - $ref: '#/components/parameters/pagination-tags-filter'
      responses:
        '200':
          $ref: '#/components/responses/service-response'
      summary: List all services
      tags:
        - Services
    post:
      description: Create a new service
      operationId: create-service
      responses:
        '201':
          content:
            application/json:
              schema:
                type: object
                properties:
                  connect_timeout:
                    type: integer
                  created_at:
                    type: integer
                  enabled:
                    type: boolean
                  host:
                    type: string
                  id:
                    type: string
                  name:
                    type: string
                  path:
                    type: string
                  port:
                    type: integer
                  protocol:
                    type: string
                  read_timeout:
                    type: integer
                  retries:
                    type: integer
                  updated_at:
                    type: integer
                  write_timeout:
                    type: integer
                x-examples:
                  Example 1:
                    connect_timeout: 6000
                    created_at: 1684437851
                    enabled: true
                    host: example.com
                    id: ebf4e826-b17a-4e23-9d58-2621c9faa135
                    name: my-service
                    path: /some_api
                    port: 80
                    protocol: http
                    read_timeout: 6000
                    retries: 5
                    updated_at: 1684437851
                    write_timeout: 6000
              examples:
                http service creation:
                  value:
                    connect_timeout: 6000
                    created_at: 1684437851
                    enabled: true
                    host: example.com
                    id: ebf4e826-b17a-4e23-9d58-2621c9faa135
                    name: my-service
                    path: /some_api
                    port: 80
                    protocol: http
                    read_timeout: 6000
                    retries: 5
                    updated_at: 1684437851
                    write_timeout: 6000
          description: Successfully created service
        '400':
          content:
            application/json:
              schema:
                type: object
          description: Invalid service
      summary: Create a new service
      tags:
        - Services
      requestBody:
        $ref: '#/components/requestBodies/service-request'
    parameters:
      - $ref: '#/components/parameters/controlPlaneId'
  /control-planes/{controlPlaneId}/core-entities/services/{service_id}:
    delete:
      description: Delete a service
      operationId: delete-service
      parameters:
        - description: ID or name of the service to delete
          in: path
          name: service_id
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Successfully deleted service or the resource didn't exist
      summary: Delete a service
      tags:
        - Services
    get:
      description: Get a service using ID or name.
      operationId: get-service
      responses:
        '200':
          $ref: '#/components/responses/service-response'
        '404':
          description: Resource does not exist
      summary: Fetch a service
      tags:
        - Services
      parameters:
        - $ref: '#/components/parameters/pagination-offset'
        - $ref: '#/components/parameters/pagination-size'
        - $ref: '#/components/parameters/pagination-tags-filter'
    put:
      description: Create or Update service using ID or name.
      operationId: upsert-service
      responses:
        '200':
          $ref: '#/components/responses/service-response'
        '400':
          content:
            application/json:
              schema:
                type: object
          description: Invalid service
      summary: Upsert a service
      tags:
        - Services
      requestBody:
        $ref: '#/components/requestBodies/service-request'
    parameters:
      - $ref: '#/components/parameters/service_id'
      - $ref: '#/components/parameters/controlPlaneId'
  /control-planes/{controlPlaneId}/core-entities/services/{service_id}/plugins:
    get:
      description: List all Plugins associated with a a service
      parameters:
        - $ref: '#/components/parameters/pagination-size'
        - $ref: '#/components/parameters/pagination-offset'
        - $ref: '#/components/parameters/pagination-tags-filter'
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/Plugin'
                    type: array
                  offset:
                    $ref: '#/components/schemas/pagination-offset-response'
          description: A successful response listing Plugins
      summary: List all Plugins associated with a service
      tags:
        - Plugins
      operationId: get-plugins-for-service
    post:
      description: Create a new Plugin associated with a service
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Plugin'
          description: Successfully created Plugin
        '400':
          content:
            application/json:
              schema:
                type: object
          description: Invalid Plugin
      summary: Create a new Plugin associated with a service
      tags:
        - Plugins
      requestBody:
        $ref: '#/components/requestBodies/plugin-request'
      operationId: create-plugin-for-service
    parameters:
      - $ref: '#/components/parameters/service_id'
      - $ref: '#/components/parameters/controlPlaneId'
  /control-planes/{controlPlaneId}/core-entities/services/{service_id}/plugins/{plugin_id_or_instance_name}:
    delete:
      description: Delete a a Plugin associated with a a service using ID.
      responses:
        '204':
          description: Successfully deleted Plugin or the resource didn't exist
      summary: Delete a a plugin associated with a service
      tags:
        - Plugins
      operationId: delete-plugin-for-a-service
    get:
      description: Get a Plugin associated with a service using ID.
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Plugin'
          description: Successfully fetched Plugin
        '404':
          description: Resource does not exist
      summary: Fetch a Plugin associated with a service
      tags:
        - Plugins
      operationId: fetch-plugin-with-a-service
      parameters:
        - $ref: '#/components/parameters/pagination-offset'
        - $ref: '#/components/parameters/pagination-size'
        - $ref: '#/components/parameters/pagination-tags-filter'
    put:
      description: Create or Update a Plugin associated with a service using ID.
      responses:
        '201':
          $ref: '#/components/responses/plugin-response'
        '400':
          content:
            application/json:
              schema:
                type: object
          description: Invalid Plugin
      summary: Upsert a plugin associated with a service
      tags:
        - Plugins
      requestBody:
        $ref: '#/components/requestBodies/plugin-request'
      operationId: upsert-plugin-for-a-service
    parameters:
      - $ref: '#/components/parameters/service_id'
      - $ref: '#/components/parameters/plugin_id_or_instance_name'
      - $ref: '#/components/parameters/controlPlaneId'
  /control-planes/{controlPlaneId}/core-entities/services/{service_id}/routes:
    get:
      description: List all routes associated with a a service
      parameters:
        - description: ID or name of the related service
          in: path
          name: service_id
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/pagination-size'
        - $ref: '#/components/parameters/pagination-offset'
        - $ref: '#/components/parameters/pagination-tags-filter'
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/Route'
                    type: array
                  offset:
                    $ref: '#/components/schemas/pagination-offset-response'
              examples:
                Example 1:
                  value:
                    data:
                      - hosts:
                          - foo.example.com
                          - foo.example.us
                        id: 56c4566c-14cc-4132-9011-4139fcbbe50a
                        name: example-route
                        paths:
                          - /v1
                          - /v2
                        service:
                          id: bd380f99-659d-415e-b0e7-72ea05df3218
                    offset: string
          description: A successful response listing routes
      summary: List all routes associated with a service
      tags:
        - Routes
      operationId: list-routes-for-service
    post:
      description: Create a new route associated with a service
      parameters:
        - description: ID or name of the related service
          in: path
          name: service_id
          required: true
          schema:
            type: string
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Route'
              examples:
                Created route:
                  value:
                    created_at: 1684438957
                    headers:
                      x-another-header:
                        - bla
                      x-my-header:
                        - foo
                        - bar
                    hosts:
                      - example.com
                      - foo.test
                    https_redirect_status_code: 426
                    id: 40dac76a-ce79-4bca-844d-afb44b9d8784
                    methods:
                      - GET
                      - POST
                    name: my-route
                    path_handling: v0
                    paths:
                      - /foo
                      - /bar
                    preserve_host: false
                    protocols:
                      - http
                      - https
                    regex_priority: 0
                    request_buffering: true
                    response_buffering: true
                    service:
                      id: b073426b-1087-42e5-85d9-a2bf9fe0a09d
                    strip_path: true
                    tags:
                      - user-level
                      - low-priority
                    updated_at: 1684438957
          description: Successfully created route
        '400':
          content:
            application/json:
              schema:
                type: object
          description: Invalid route
      summary: Create a new route associated with a service
      tags:
        - Routes
      requestBody:
        $ref: '#/components/requestBodies/route-request'
      operationId: create-route-for-service
    parameters:
      - $ref: '#/components/parameters/service_id'
      - $ref: '#/components/parameters/controlPlaneId'
  /control-planes/{controlPlaneId}/core-entities/services/{service_id}/routes/{route_id}:
    delete:
      description: Delete a a route associated with a a service using ID or name.
      responses:
        '204':
          description: Successfully deleted route or the resource didn't exist
      summary: Delete a a route associated with a service
      tags:
        - Routes
      operationId: delete-route-for-service
    get:
      description: Get a route associated with a service using ID or name.
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Route'
              examples:
                Example 1:
                  value:
                    hosts:
                      - foo.example.com
                      - foo.example.us
                    id: 56c4566c-14cc-4132-9011-4139fcbbe50a
                    name: example-route
                    paths:
                      - /v1
                      - /v2
                    service:
                      id: bd380f99-659d-415e-b0e7-72ea05df3218
          description: Successfully fetched route
        '404':
          description: Resource does not exist
      summary: Fetch a route associated with a service
      tags:
        - Routes
      operationId: fetch-route-for-service
      parameters:
        - $ref: '#/components/parameters/pagination-offset'
        - $ref: '#/components/parameters/pagination-size'
        - $ref: '#/components/parameters/pagination-tags-filter'
    put:
      description: Create or Update a route associated with a service using ID or name.
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Route'
              examples:
                Example 1:
                  value:
                    hosts:
                      - foo.example.com
                      - foo.example.us
                    id: 56c4566c-14cc-4132-9011-4139fcbbe50a
                    name: example-route
                    paths:
                      - /v1
                      - /v2
                    service:
                      id: bd380f99-659d-415e-b0e7-72ea05df3218
          description: Successfully upserted route
        '400':
          content:
            application/json:
              schema:
                type: object
          description: Invalid route
      summary: Upsert a route associated with a service
      tags:
        - Routes
      requestBody:
        $ref: '#/components/requestBodies/route-request'
      operationId: upsert-route-for-service
    parameters:
      - $ref: '#/components/parameters/service_id'
      - $ref: '#/components/parameters/route_id'
      - $ref: '#/components/parameters/controlPlaneId'
  /control-planes/{controlPlaneId}/core-entities/snis:
    get:
      description: List all SNIs
      operationId: list-snis
      parameters:
        - $ref: '#/components/parameters/pagination-size'
        - $ref: '#/components/parameters/pagination-offset'
        - $ref: '#/components/parameters/pagination-tags-filter'
      responses:
        '200':
          $ref: '#/components/responses/sni-response'
      summary: List all SNIs
      tags:
        - SNIs
    post:
      description: Create a new SNI
      operationId: create-sni
      responses:
        '200':
          $ref: '#/components/responses/sni-response'
        '400':
          content:
            application/json:
              schema:
                type: object
          description: Invalid SNI
      summary: Create a new SNI
      tags:
        - SNIs
      requestBody:
        $ref: '#/components/requestBodies/create-sni'
    parameters:
      - $ref: '#/components/parameters/controlPlaneId'
  /control-planes/{controlPlaneId}/core-entities/snis/{sni_id}:
    delete:
      description: Delete an SNI
      operationId: delete-sni
      responses:
        '204':
          description: Successfully deleted SNI or the resource didn't exist
      summary: Delete an SNI
      tags:
        - SNIs
    get:
      description: Get an SNI using ID or name.
      operationId: get-sni
      responses:
        '200':
          $ref: '#/components/responses/sni-response'
        '404':
          description: Resource does not exist
      summary: Fetch an SNI
      tags:
        - SNIs
      parameters:
        - $ref: '#/components/parameters/pagination-offset'
        - $ref: '#/components/parameters/pagination-size'
        - $ref: '#/components/parameters/pagination-tags-filter'
    put:
      description: Create or Update SNI using ID or name.
      operationId: upsert-sni
      responses:
        '200':
          $ref: '#/components/responses/sni-response'
        '400':
          content:
            application/json:
              schema:
                type: object
          description: Invalid SNI
      summary: Update an SNI
      tags:
        - SNIs
      requestBody:
        $ref: '#/components/requestBodies/create-sni'
    parameters:
      - $ref: '#/components/parameters/sni_id'
      - $ref: '#/components/parameters/controlPlaneId'
  /control-planes/{controlPlaneId}/core-entities/upstreams:
    get:
      description: >
        List all registered upstreams. You can filter the results by pagination
        size, offset, or tags like `/upstreams?size=10&offset=0`.
      operationId: list-upstreams
      parameters:
        - $ref: '#/components/parameters/pagination-size'
        - $ref: '#/components/parameters/pagination-offset'
        - $ref: '#/components/parameters/pagination-tags-filter'
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/Upstream'
                    type: array
                  offset:
                    $ref: '#/components/schemas/pagination-offset-response'
              examples:
                example:
                  value:
                    data:
                      - algorithm: round-robin
                        hash_fallback: none
                        hash_on: none
                        hash_on_cookie_path: /
                        healthchecks:
                          active:
                            concurrency: 10
                            healthy:
                              http_statuses:
                                - 200
                                - 302
                              interval: 0
                              successes: 0
                            http_path: /
                            https_verify_certificate: true
                            timeout: 1
                            type: http
                            unhealthy:
                              http_failures: 0
                              http_statuses:
                                - 429
                                - 404
                                - 500
                                - 501
                                - 502
                                - 503
                                - 504
                                - 505
                              interval: 0
                              tcp_failures: 0
                              timeouts: 0
                          passive:
                            healthy:
                              http_statuses:
                                - 200
                                - 201
                                - 202
                                - 203
                                - 204
                                - 205
                                - 206
                                - 207
                                - 208
                                - 226
                                - 300
                                - 301
                                - 302
                                - 303
                                - 304
                                - 305
                                - 306
                                - 307
                                - 308
                              successes: 0
                            type: http
                            unhealthy:
                              http_failures: 0
                              http_statuses:
                                - 429
                                - 500
                                - 503
                              tcp_failures: 0
                              timeouts: 0
                          threshold: 0
                        id: 6eed5e9c-5398-4026-9a4c-d48f18a2431e
                        name: api.example.internal
                        slots: 10000
                    offset: string
          description: A successful response listing Upstreams
      summary: List all Upstreams
      tags:
        - Upstreams
    post:
      description: |
        Create a new Upstream
      operationId: create-upstream
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Upstream'
          description: Successfully created Upstream
        '400':
          content:
            application/json:
              schema:
                type: object
          description: Invalid Upstream
      summary: Create a new Upstream
      tags:
        - Upstreams
      requestBody:
        $ref: '#/components/requestBodies/upstream-request'
    parameters:
      - $ref: '#/components/parameters/controlPlaneId'
  /control-planes/{controlPlaneId}/core-entities/upstreams/{upstream_id}:
    delete:
      description: Delete an Upstream
      operationId: delete-upstream
      responses:
        '204':
          description: Successfully deleted Upstream or the resource didn't exist
      summary: Delete an Upstream
      tags:
        - Upstreams
    get:
      description: Get an Upstream using ID or name.
      operationId: get-upstream
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Upstream'
          description: Successfully fetched Upstream
        '404':
          description: Resource does not exist
      summary: Fetch an Upstream
      tags:
        - Upstreams
      parameters:
        - $ref: '#/components/parameters/pagination-offset'
        - $ref: '#/components/parameters/pagination-size'
        - $ref: '#/components/parameters/pagination-tags-filter'
    put:
      description: Create or Update Upstream using ID or name.
      operationId: upsert-upstream
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Upstream'
              examples:
                Example 1:
                  value:
                    id: 58c8ccbb-eafb-4566-991f-2ed4f678fa70
                    created_at: 1422386534
                    name: my-upstream
                    algorithm: round-robin
                    hash_on: none
                    hash_fallback: none
                    hash_on_cookie_path: /
                    slots: 10000
                    healthchecks:
                      passive:
                        type: http
                        healthy:
                          http_statuses:
                            - 200
                            - 201
                            - 202
                            - 203
                            - 204
                            - 205
                            - 206
                            - 207
                            - 208
                            - 226
                            - 300
                            - 301
                            - 302
                            - 303
                            - 304
                            - 305
                            - 306
                            - 307
                            - 308
                          successes: 0
                        unhealthy:
                          http_statuses:
                            - 429
                            - 500
                            - 503
                          timeouts: 0
                          http_failures: 0
                          tcp_failures: 0
                      active:
                        https_verify_certificate: true
                        healthy:
                          http_statuses:
                            - 200
                            - 302
                          successes: 0
                          interval: 0
                        unhealthy:
                          http_failures: 0
                          http_statuses:
                            - 429
                            - 404
                            - 500
                            - 501
                            - 502
                            - 503
                            - 504
                            - 505
                          timeouts: 0
                          tcp_failures: 0
                          interval: 0
                        type: http
                        concurrency: 10
                        headers:
                          type: object
                          properties:
                            x-my-header:
                              type: array
                              items:
                                type: string
                              description: The value(s) of the x-my-header header.
                            x-another-header:
                              type: array
                              items:
                                type: string
                              description: The value(s) of the x-another-header header.
                        timeout: 1
                        http_path: /
                        https_sni: example.com
                      threshold: 0
                    tags:
                      - user-level
                      - low-priority
                    host_header: example.com
                    client_certificate:
                      id: ea29aaa3-3b2d-488c-b90c-56df8e0dd8c6
                    use_srv_name: false
          description: Successfully upserted Upstream
        '400':
          content:
            application/json:
              schema:
                type: object
          description: Invalid Upstream
      summary: Update an Upstream
      tags:
        - Upstreams
      requestBody:
        $ref: '#/components/requestBodies/upstream-request'
    parameters:
      - $ref: '#/components/parameters/upstream_id'
      - $ref: '#/components/parameters/controlPlaneId'
  /control-planes/{controlPlaneId}/core-entities/upstreams/{upstream_id}/targets:
    get:
      description: List all Targets associated with a an Upstream
      parameters:
        - description: ID or name of the related Upstream
          in: path
          name: upstream_id
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/pagination-size'
        - $ref: '#/components/parameters/pagination-offset'
        - $ref: '#/components/parameters/pagination-tags-filter'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Target'
          description: A successful response listing Targets
      summary: List all Targets associated with an Upstream
      tags:
        - Targets
      operationId: list-targets-for-upstream
    post:
      description: Create a new Target associated with an Upstream
      parameters:
        - description: ID or name of the related Upstream
          in: path
          name: upstream_id
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Target'
              examples:
                Successfully created Target:
                  value:
                    id: 173a6cee-90d1-40a7-89cf-0329eca780a6
                    created_at: 1422386534
                    upstream:
                      id: bdab0e47-4e37-4f0b-8fd0-87d95cc4addc
                    target: example.com:8000
                    weight: 100
                    tags:
                      - user-level
                      - low-priority
          description: Successfully created Target
        '400':
          content:
            application/json:
              schema:
                type: object
          description: Invalid Target
      summary: Create a new Target associated with an Upstream
      tags:
        - Targets
      requestBody:
        $ref: '#/components/requestBodies/target-request'
      operationId: create-target-for-upstream
    parameters:
      - $ref: '#/components/parameters/upstream_id'
      - $ref: '#/components/parameters/controlPlaneId'
  /control-planes/{controlPlaneId}/core-entities/upstreams/{upstream_id}/targets/{target_id}:
    delete:
      description: Delete a a Target associated with a an Upstream using ID or target.
      responses:
        '204':
          description: Successfully deleted Target or the resource didn't exist
      summary: Delete a a Target associated with a an Upstream
      tags:
        - Targets
      operationId: delete-upstream-target
    get:
      description: Get a Target associated with an Upstream using ID or target.
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Target'
          description: Successfully fetched Target
        '404':
          description: Resource does not exist
      summary: Fetch a Target associated with an Upstream
      tags:
        - Targets
      operationId: fetch-target-for-upstream
      parameters:
        - $ref: '#/components/parameters/pagination-offset'
        - $ref: '#/components/parameters/pagination-size'
        - $ref: '#/components/parameters/pagination-tags-filter'
    put:
      description: >-
        Create or Update a Target associated with an Upstream using ID or
        target.
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Target'
          description: Successfully upserted Target
        '400':
          content:
            application/json:
              schema:
                type: object
          description: Invalid Target
      summary: Upsert a Target associated with an Upstream
      tags:
        - Targets
      requestBody:
        $ref: '#/components/requestBodies/target-request'
      operationId: upsert-target-for-upstream
    parameters:
      - $ref: '#/components/parameters/upstream_id'
      - $ref: '#/components/parameters/target_id'
      - $ref: '#/components/parameters/controlPlaneId'
  /control-planes/{controlPlaneId}/core-entities/vaults:
    get:
      description: List all Vaults
      operationId: list-vaults
      parameters:
        - $ref: '#/components/parameters/pagination-size'
        - $ref: '#/components/parameters/pagination-offset'
        - $ref: '#/components/parameters/pagination-tags-filter'
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/Vault'
                    type: array
                  offset:
                    $ref: '#/components/schemas/pagination-offset-response'
          description: A successful response listing Vaults
      summary: List all Vaults
      tags:
        - Vaults
    post:
      description: Create a new Vault
      operationId: create-vault
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vault'
          description: Successfully created Vault
        '400':
          content:
            application/json:
              schema:
                type: object
          description: Invalid Vault
      summary: Create a new Vault
      tags:
        - Vaults
      requestBody:
        $ref: '#/components/requestBodies/vault-request'
    parameters:
      - $ref: '#/components/parameters/controlPlaneId'
  /control-planes/{controlPlaneId}/core-entities/vaults/{vault_id_or_prefix}:
    delete:
      description: Delete a Vault
      operationId: delete-vault
      parameters:
        - description: ID or prefix of the Vault to delete
          in: path
          name: vault_id_or_prefix
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Successfully deleted Vault or the resource didn't exist
      summary: Delete a Vault
      tags:
        - Vaults
    get:
      description: |-
        Get a Vault using ID or prefix.

        Vault entities are used to configure different Vault connectors.
      operationId: get-vault
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vault'
          description: Successfully fetched Vault
        '404':
          description: Resource does not exist
      summary: Fetch a Vault
      tags:
        - Vaults
      parameters:
        - $ref: '#/components/parameters/pagination-offset'
        - $ref: '#/components/parameters/pagination-size'
        - $ref: '#/components/parameters/pagination-tags-filter'
    put:
      description: Create or Update Vault using ID or prefix.
      operationId: upsert-vault
      parameters:
        - description: Name or ID of the Vault to lookup
          in: path
          name: vault_id_or_prefix
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vault'
          description: Successfully upserted Vault
        '400':
          content:
            application/json:
              schema:
                type: object
          description: Invalid Vault
      summary: Upsert a Vault
      tags:
        - Vaults
      requestBody:
        $ref: '#/components/requestBodies/vault-request'
    parameters:
      - $ref: '#/components/parameters/vault_id_or_prefix'
      - $ref: '#/components/parameters/controlPlaneId'
  /control-planes/{controlPlaneId}/core-entities/schemas/plugins/{plugin_name}:
    parameters:
      - schema:
          type: string
          example: basic-auth
        name: plugin_name
        in: path
        required: true
        description: The name of a Kong plugin
      - $ref: '#/components/parameters/controlPlaneId'
    get:
      summary: Retrieve Plugin Schema
      tags:
        - Information
      responses:
        '200':
          description: OK
      operationId: get-schemas-plugins-plugin_name
      description: >
        Retrieve the schema of a plugin’s configuration. This is useful to
        understand what fields a plugin accepts, and can be used for building
        third-party integrations to the Kong’s plugin system.
      parameters:
        - $ref: '#/components/parameters/pagination-offset'
        - $ref: '#/components/parameters/pagination-size'
        - $ref: '#/components/parameters/pagination-tags-filter'
  /control-planes/{controlPlaneId}/core-entities/consumer_groups:
    parameters:
      - $ref: '#/components/parameters/controlPlaneId'
    get:
      summary: List consumer groups
      tags:
        - consumer-groups
      responses:
        '200':
          $ref: '#/components/responses/consumer-groups-response'
      operationId: get-controlPlaneId-core-entities-consumer_groups
      description: Returns a list of active consumer groups.
      parameters:
        - $ref: '#/components/parameters/pagination-offset'
        - $ref: '#/components/parameters/pagination-size'
        - $ref: '#/components/parameters/pagination-tags-filter'
    post:
      summary: Create a consumer group
      operationId: post-controlPlaneId-core-entities-consumer_groups
      responses:
        '200':
          $ref: '#/components/responses/consumer-groups-response'
      description: >-
        Create a consumer group by passing a name and optional tags in the
        request body.
      requestBody:
        $ref: '#/components/requestBodies/consumer-groups-request'
      tags:
        - consumer-groups
    delete:
      summary: Delete a consumer group
      operationId: delete-consumer_groups-group_name_or_id
      responses:
        '204':
          description: |
            HTTP/1.1 204 No Content
      description: >
        Delete a consumer group. Deleting a consumer group removes all consumers
        from that group. This operation does not delete existing consuemrs.
      tags:
        - consumer-groups
  /control-planes/{controlPlaneId}/core-entities/consumer_groups/{group_id}:
    parameters:
      - $ref: '#/components/parameters/controlPlaneId'
      - $ref: '#/components/parameters/group_id'
    get:
      summary: List a specific consumer group
      tags:
        - consumer-groups
      responses:
        '200':
          $ref: '#/components/responses/consumer-groups-response'
      operationId: get-controlPlaneId-core-entities-consumer_groups-consumer_id
      description: >-
        Return information about a specific consumer group by passing the
        `group_id` as a path parameter.
      parameters:
        - $ref: '#/components/parameters/pagination-offset'
        - $ref: '#/components/parameters/pagination-size'
        - $ref: '#/components/parameters/pagination-tags-filter'
    put:
      summary: Create a consumer group
      operationId: put-controlPlaneId-core-entities-consumer_groups-group_id
      responses:
        '200':
          $ref: '#/components/responses/consumer-response-data'
      requestBody:
        $ref: '#/components/requestBodies/consumer-request'
      description: Create a consumer group.
      tags:
        - consumer-groups
    delete:
      summary: Delete consumer group
      operationId: delete-controlPlaneId-core-entities-consumer_groups-group_id
      responses:
        '204':
          description: No Content
      description: Delete consumer group.
      tags:
        - consumer-groups
  /control-planes/{controlPlaneId}/core-entities/consumer_groups/{group_id}/consumers:
    parameters:
      - $ref: '#/components/parameters/controlPlaneId'
      - $ref: '#/components/parameters/group_id'
    get:
      summary: List all consumers in a consumer group
      tags:
        - consumer-groups
      responses:
        '200':
          $ref: '#/components/responses/consumer-groups-response'
      operationId: get-controlPlaneId-core-entities-consumer_groups-group_id-consumers
      description: Returns a list of consumers that belong to a consumer group.
    post:
      description: Add a consumer to a group
      summary: Add a consumer to a group
      operationId: post-controlPlaneId-core-entities-consumer_groups-group_id-consumers
      responses:
        '201':
          $ref: '#/components/responses/return-consumer-group'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                consumer:
                  type: string
                  description: >-
                    The consumer ID for the consumer that you want to add to a
                    group.
                  example: 288f2bfc-04e2-4ec3-b6f3-40408dff5417
      tags:
        - consumer-groups
    delete:
      summary: Remove all consumers from a consumer group
      operationId: delete-controlPlaneId-core-entities-consumer_groups-group_id-consumers
      responses:
        '204':
          description: No Content
      description: >-
        Removes all consumers from a consumer group. Does not delete any
        consumers.consumers.
      tags:
        - consumer-groups
  /control-planes/{controlPlaneId}/core-entities/consumers/{consumer_id}/consumer_groups:
    parameters:
      - $ref: '#/components/parameters/controlPlaneId'
      - $ref: '#/components/parameters/consumer_id'
    get:
      summary: List consumer groups for a consumer
      tags:
        - consumer-groups
      responses:
        '200':
          $ref: '#/components/responses/consumer-groups-response'
      operationId: get-controlPlaneId-core-entities-consumer_id-consumer_groups
      description: |
        View all consumer groups that a consumer is assigned to.
    post:
      summary: Add a consumer to a group
      operationId: post-controlPlaneId-core-entities-consumers-consumer_id-consumer_groups
      responses:
        '200':
          $ref: '#/components/responses/consumer-groups-response'
      description: >
        Add a consumer to a specific consumer group.


        If you add a consumer to multiple groups:


        If all groups are allowed by the Rate Limiting Advanced plugin, only the
        first group’s settings will apply.

        Otherwise, whichever group is specified in the Rate Limiting Advanced
        plugin will be active.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                consumer_group_id:
                  type: string
                  description: The consumer group UUID.
                  example: 1e965e47-d185-4e9e-8bc7-94ea6ae75b2e
      tags:
        - consumer-groups
    delete:
      summary: Remove a consumer from all groups
      operationId: >-
        delete-controlPlaneId-core-entities-consumers-consumer_id-consumer_groups
      responses:
        '204':
          description: No Content
      description: Remove a consumer from all groups
      tags:
        - consumer-groups
components:
  parameters:
    pagination-offset:
      description: >-
        Offset from which to return the next set of resources. Use the value of
        the 'offset' field from the response of a list operation as input here
        to paginate through all the resources
      in: query
      name: offset
      schema:
        type: string
    pagination-size:
      description: Number of resources to be returned.
      in: query
      name: size
      schema:
        default: 100
        maximum: 1000
        minimum: 1
        type: integer
    pagination-tags-filter:
      description: >-
        A list of tags to filter the list of resources on. Multiple tags can be
        concatenated using ',' to mean AND or using '/' to mean OR.
      example: tag1,tag2
      in: query
      name: tags
      schema:
        type: string
    service_id:
      name: service_id
      description: ID **or** name of the service to lookup
      example: 7fca84d6-7d37-4a74-a7b0-93e576089a41
      in: path
      required: true
      schema:
        type: string
    ca_certificate_id:
      name: ca_certificate_id
      description: ID of the related certificate
      in: path
      required: true
      schema:
        type: string
        example: 7fca84d6-7d37-4a74-a7b0-93e576089a41
    certificate_id:
      name: certificate_id
      in: path
      required: true
      schema:
        type: string
        example: 7fca84d6-7d37-4a74-a7b0-93e576089a41
      description: The unique identifier of the Certificate to retrieve.
    certificate_name_or_id:
      name: certificate_name_or_id
      in: path
      required: true
      schema:
        type: string
        enum:
          - a3ad71a8-6685-4b03-a101-980a953544f6
          - name
        example: name
      description: >-
        The unique identifier or the `name` attribute of the Certificate whose
        SNIs are to be retrieved. When using this endpoint, only SNIs associated
        to the specified Certificate will be listed.
    sni_id:
      name: sni_id
      in: path
      required: true
      schema:
        type: string
        example: my-sni
      description: The unique identifier or the name of the SNI to retrieve.
    consumer_id:
      name: consumer_id
      in: path
      schema:
        type: string
        example: e94215b0-9198-42ce-bf0b-98afff31b2a7
      description: The unique identifier or the username of the Consumer to retrieve.
      required: true
    plugin_id_or_instance_name:
      name: plugin_id_or_instance_name
      in: path
      required: true
      schema:
        type: string
        example: response-ratelimiting
      description: The unique identifier of the Plugin to create or update.
    key-set_id_or_name:
      name: key-set_id_or_name
      in: path
      required: true
      schema:
        type: string
        example: 46CA83EE-671C-11ED-BFAB-2FE47512C77A
      description: >-
        The unique identifier or the `name` attribute of the Key Set that should
        be associated to the newly-created Key.
    key_id_or_name:
      name: key_id_or_name
      in: path
      required: true
      schema:
        type: string
        example: 24D0DBDA-671C-11ED-BA0B-EF1DCCD3725
      description: The unique identifier or the name of the Key to retrieve.
    upstream_id:
      name: upstream_id
      in: path
      required: true
      schema:
        type: string
        example: 7fca84d6-7d37-4a74-a7b0-93e576089a41
      description: >-
        The unique identifier of the Upstream associated to the Certificate to
        be retrieved.
    target_id:
      name: target_id
      in: path
      required: true
      schema:
        type: string
        example: e94215b0-9198-42ce-bf0b-98afff31b2a7
      description: The `id` of an existing target entry.
    vault_id_or_prefix:
      name: vault_id_or_prefix
      in: path
      required: true
      schema:
        type: string
        example: env
      description: The unique identifier or the prefix of the Vault to retrieve.
    controlPlaneId:
      name: controlPlaneId
      in: path
      required: true
      schema:
        type: string
        example: 9524ec7d-36d9-465d-a8c5-83a3c9390458
      description: >-
        The ID of your control plane. This variable is available in the Konnect
        manager
    route_id:
      name: route_id
      in: path
      required: true
      schema:
        type: string
        example: e94215b0-9198-42ce-bf0b-98afff31b2a7
      description: The unique identifier or the name of the route to retrieve.
    group_id:
      name: group_id
      in: path
      required: true
      schema:
        type: string
        example: be4bcfca-b1df-4fac-83cc-5cf6774bf48e
      description: The UUID of the consumer group.
    page_size:
      name: page_size
      in: query
      required: false
      schema:
        type: integer
      description: The number of items to include in a page.
    page_number:
      name: page_number
      in: query
      required: false
      schema:
        type: integer
      description: The specific page number in the collection results.
    PageSize:
      name: page[size]
      description: >-
        The maximum number of items to include per page. The last page of a
        collection may include fewer items.
      required: false
      in: query
      allowEmptyValue: true
      schema:
        type: integer
        example: 10
    PageAfter:
      name: page[after]
      description: >-
        Request the next page of data, starting with the item after this
        parameter.
      required: false
      in: query
      allowEmptyValue: true
      schema:
        type: string
        example: ewogICJpZCI6ICJoZWxsbyB3b3JsZCIKfQ
    PageBefore:
      name: page[before]
      description: >-
        Request the next page of data, starting with the item before this
        parameter.
      required: false
      in: query
      allowEmptyValue: true
      schema:
        type: string
        example: ewogICJpZCI6ICJoZWxsbyB3b3JsZCIKfQ
  schemas:
    CA-Certificate:
      description: >-
        A CA certificate object represents a trusted CA. These objects are used
        by Kong to verify the validity of a client or server certificate. CA
        Certificates can be both tagged and filtered by tags.
      example:
        cert: |-
          -----BEGIN CERTIFICATE-----
          certificate-content
          -----END CERTIFICATE-----
        id: b2f34145-0343-41a4-9602-4c69dec2f260
      type: object
      title: CA-Certificate
      properties:
        cert:
          description: PEM-encoded public certificate of the CA.
          type: string
          example: '-----BEGIN CERTIFICATE-----...'
        cert_digest:
          description: SHA256 hex digest of the public certificate.
          type: string
          example: c641e28d77e93544f2fa87b2cf3f3d51...
        created_at:
          description: Unix epoch when the resource was created.
          type: integer
          example: 1422386534
        updated_at:
          description: Unix epoch when the resouce was updated.
          type: integer
          example: 1422386534
        id:
          type: string
          example: 04fbeacf-a9f1-4a5d-ae4a-b0407445db3f
          format: uuid
        tags:
          description: >-
            An optional set of strings associated with the Certificate for
            grouping and filtering.
          type: array
          items:
            type: string
            example: '[user-level, low-priority]'
      x-examples:
        200 - list of multiple certificates:
          data:
            - id: 43429efd-b3a5-4048-94cb-5cc4029909bb
              created_at: 1422386534
              updated_at: 1422386534
              cert: '-----BEGIN CERTIFICATE-----...'
              cert_digest: c641e28d77e93544f2fa87b2cf3f3d51...
              tags:
                - user-level
                - low-priority
            - id: d26761d5-83a4-4f24-ac6c-cff276f2b79c
              created_at: 1422386534
              updated_at: 1422386534
              cert: '-----BEGIN CERTIFICATE-----...'
              cert_digest: c641e28d77e93544f2fa87b2cf3f3d51...
              tags:
                - admin
                - high-priority
                - critical
          next: >-
            http://localhost:8001/ca_certificates?offset=6378122c-a0a1-438d-a5c6-efabae9fb969
    Certificate:
      description: >-
        A certificate object represents a public certificate. These fields are
        _referenceable_, and can be stored as
        [secrets](http://docs.konqhq.com/gateway/latest/plan-and-deploy/security/secrets-management/getting-started)
        in a vault. References must follow a [specific
        format](/gateway/latest/plan-and-deploy/security/secrets-management/reference-format).
      example:
        cert: |-
          -----BEGIN CERTIFICATE-----
          certificate-content
          -----END CERTIFICATE-----
        id: b2f34145-0343-41a4-9602-4c69dec2f269
        key: |-
          -----BEGIN PRIVATE KEY-----
          private-key-content
          -----END PRIVATE KEY-----
      type: object
      title: Certificate
      properties:
        cert:
          description: >-
            PEM-encoded public certificate chain of the SSL key This field is
            referenceable and can be stored in a vault. References must follow a
            [specific
            format](/gateway/latest/plan-and-deploy/security/secrets-management/reference-format).
          type: string
          example: >-
            -----BEGIN CERTIFICATE-----\ncertificate-content\n-----END
            CERTIFICATE-----
        cert_alt:
          description: >-
            PEM-encoded public certificate chain of the alternate SSL key pair.
            This should only be set if you have both RSA and ECDSA types of
            certificate available and would like Kong to prefer serving using
            ECDSA certs.
          type: string
          example: '-----BEGIN CERTIFICATE-----...'
        created_at:
          description: Unix epoch when the resource was created.
          type: integer
          example: 1422386534
        updated_at:
          description: Unix epoch when the resouce was updated.
          type: integer
          example: 1422386534
        id:
          type: string
          description: The UUID representation of the certificate object.
          example: 7fca84d6-7d37-4a74-a7b0-93e576089a41
          format: uuid
        key:
          description: >-
            PEM-encoded private key of the SSL key pair. This field is
            _referenceable_, which means it can be securely stored as a
            [secret](/gateway/latest/plan-and-deploy/security/secrets-management/getting-started)
            in a vault. References must follow a [specific
            format](/gateway/latest/plan-and-deploy/security/secrets-management/reference-format).
          type: string
          example: ' -----BEGIN RSA PRIVATE KEY-----...'
        key_alt:
          description: >-
            PEM-encoded private key of the alternate SSL key pair. This should
            only be set if you have both RSA and ECDSA types of certificate
            available and would like Kong to prefer serving using ECDSA certs
            when client advertises support for it. This field is
            _referenceable_, which means it can be securely stored as a
            [secret](/gateway/latest/plan-and-deploy/security/secrets-management/getting-started)
            in a vault. References must follow a [specific
            format](/gateway/latest/plan-and-deploy/security/secrets-management/reference-format).
          type: string
          example: '-----BEGIN EC PRIVATE KEY-----...'
        tags:
          description: >-
            An optional set of strings associated with the Certificate for
            grouping and filtering.
          type: array
          items:
            type: string
            example: user-level
    Key:
      description: >-
        A Key object holds a representation of asymmetric keys in various
        formats. When Kong or a Kong plugin requires a specific public or
        private key to perform certain operations, it can use this entity.
      example:
        id: d958f66b-8e99-44d2-b0b4-edd5bbf24658
        jwk: '{alg:RSA,  kid: 42,  ...}'
        kid: '42'
        name: a-key
        pem:
          private_key: '-----BEGIN'
          public_key: '-----BEGIN'
        set:
          id: b86b331c-dcd0-4b3e-97ce-47c5a9543031
      type: object
      title: Key
      properties:
        created_at:
          description: Unix epoch when the resource was created.
          type: integer
          example: 1422386534
        id:
          type: string
          example: 24D0DBDA-671C-11ED-BA0B-EF1DCCD3725F
          description: The unique identifier or the prefix of the Vault to delete.
        jwk:
          description: A JSON Web Key represented as a string.
          type: string
          example: '{\alg\:\RSA\,  \kid\: \42\,  ...}'
        kid:
          description: A unique identifier for a key.
          type: string
          example: '42'
        updated_at:
          description: Unix epoch when the resouce was updated.
          type: integer
          example: 1422386534
        pem:
          description: A keypair in PEM format.
          type: object
          properties:
            private_key:
              type: string
              example: '-----BEGIN'
            public_key:
              type: string
              example: '-----BEGIN'
        set:
          additionalProperties: false
          description: The id (an UUID) of the key-set with which to associate the key.
          type: object
          properties:
            id:
              type: string
              example: 46CA83EE-671C-11ED-BFAB-2FE47512C77A
        tags:
          description: >-
            An optional set of strings associated with the Key for grouping and
            filtering.
          type: array
          items:
            type: string
    Plugin:
      description: >-
        A Plugin entity represents a plugin configuration that will be executed
        during the HTTP request/response lifecycle.
      example:
        config:
          anonymous: null
          hide_credentials: false
          key_in_body: false
          key_in_header: true
          key_in_query: true
          key_names:
            - apikey
          run_on_preflight: true
        enabled: true
        id: 3fd1eea1-885a-4011-b986-289943ff8177
        name: key-auth
        protocols:
          - grpc
          - grpcs
          - http
          - https
      properties:
        config:
          description: >-
            The configuration properties for the Plugin which can be found on
            the plugins documentation page in the [Kong
            Hub](https://docs.konghq.com/hub/).
          type: object
        consumer:
          additionalProperties: false
          description: >-
            If set, the plugin will activate only for requests where the
            specified has been authenticated. (Note that some plugins can not be
            restricted to consumers this way.). Leave unset for the plugin to
            activate regardless of the authenticated Consumer.
          properties:
            id:
              type: string
          type: object
        created_at:
          description: Unix epoch when the resource was created.
          type: integer
        enabled:
          default: true
          description: Whether the plugin is applied.
          type: boolean
        id:
          type: string
        instance_name:
          type: string
        name:
          description: >-
            The name of the Plugin that's going to be added. Currently, the
            Plugin must be installed in every Kong instance separately.
          type: string
        ordering:
          type: object
        protocols:
          default:
            - grpc
            - grpcs
            - http
            - https
          description: >-
            A list of the request protocols that will trigger this plugin. The
            default value, as well as the possible values allowed on this field,
            may change depending on the plugin type. For example, plugins that
            only work in stream mode will only support `tcp` and `tls`.
          items:
            type: string
          type: array
        route:
          additionalProperties: false
          description: >-
            If set, the plugin will only activate when receiving requests via
            the specified route. Leave unset for the plugin to activate
            regardless of the route being used.
          properties:
            id:
              type: string
          type: object
        service:
          additionalProperties: false
          description: >-
            If set, the plugin will only activate when receiving requests via
            one of the routes belonging to the specified service. Leave unset
            for the plugin to activate regardless of the service being matched.
          properties:
            id:
              type: string
          type: object
        tags:
          description: >-
            An optional set of strings associated with the Plugin for grouping
            and filtering.
          items:
            type: string
          type: array
      type: object
      title: Plugin
    Route:
      description: >-
        Route entities define rules to match client requests. Every request
        matching a given route will be proxied to its associated service.
      example:
        hosts:
          - foo.example.com
          - foo.example.us
        id: 56c4566c-14cc-4132-9011-4139fcbbe50a
        name: example-route
        paths:
          - /v1
          - /v2
        service:
          id: bd380f99-659d-415e-b0e7-72ea05df3218
      type: object
      title: Route
      properties:
        created_at:
          description: Unix epoch when the resource was created.
          type: integer
        destinations:
          description: >-
            A list of IP destinations of incoming connections that match this
            route when using stream routing. Each entry is an object with fields
            ip (optionally in CIDR range notation) and/or port.
          type: array
          items:
            type: object
            properties: {}
        headers:
          description: >-
            One or more lists of values indexed by header name that will cause
            this route to match if present in the request. The `Host` header
            cannot be used with this attribute: hosts should be specified using
            the `hosts` attribute. When `headers` contains only one value and
            that value starts with the special prefix `~*`, the value is
            interpreted as a regular expression.
          type: object
        hosts:
          description: >-
            A list of domain names that match this route. Note that the hosts
            value is case sensitive.
          type: array
          items:
            type: string
            example: foo.example.com
        https_redirect_status_code:
          default: 426
          description: >-
            The status code Kong responds with when all properties of a route
            match except the protocol i.e. if the protocol of the request is
            `HTTP` instead of `HTTPS`. `Location` header is injected by Kong if
            the field is set to 301, 302, 307 or 308. Note: This config applies
            only if the route is configured to only accept the `https` protocol.
          type: integer
        id:
          type: string
          example: 56c4566c-14cc-4132-9011-4139fcbbe50a
        methods:
          description: A list of HTTP methods that match this route.
          type: array
          items:
            type: string
        name:
          description: >-
            The name of the route. Route names must be unique, and they are case
            sensitive. For example, there can be two different routes named test
            and Test.
          type: string
        path_handling:
          default: v0
          description: >-
            Controls how the service path, route path and requested path are
            combined when sending a request to the upstream. See above for a
            detailed description of each behavior.
          type: string
        paths:
          description: A list of paths that match this route.
          type: array
          items:
            type: string
        preserve_host:
          default: false
          description: >-
            When matching a route via one of the `hosts` domain names, use the
            request `Host` header in the upstream request headers. If set to
            `false`, the upstream `Host` header will be that of the service's
            `host`.
          type: boolean
        protocols:
          default:
            - http
            - https
          description: >-
            An array of the protocols this route should allow. See the [route
            Object](#route-object) section for a list of accepted protocols.
            When set to only `https`, HTTP requests are answered with an upgrade
            error. When set to only `http`, HTTPS requests are answered with an
            error.
          type: array
          items:
            type: string
        regex_priority:
          default: 0
          description: >-
            A number used to choose which route resolves a given request when
            several routes match it using regexes simultaneously. When two
            routes match the path and have the same `regex_priority`, the older
            one (lowest `created_at`) is used. Note that the priority for
            non-regex routes is different (longer non-regex routes are matched
            before shorter ones).
          type: integer
        request_buffering:
          default: true
          description: >-
            Whether to enable request body buffering or not. With HTTP 1.1, it
            may make sense to turn this off on services that receive data with
            chunked transfer encoding.
          type: boolean
        response_buffering:
          default: true
          description: >-
            Whether to enable response body buffering or not. With HTTP 1.1, it
            may make sense to turn this off on services that send data with
            chunked transfer encoding.
          type: boolean
        service:
          additionalProperties: false
          description: >-
            The service this route is associated to. This is where the route
            proxies traffic to.
          type: object
          properties:
            id:
              type: string
        snis:
          description: A list of SNIs that match this route when using stream routing.
          type: array
          items:
            type: string
        sources:
          description: >-
            A list of IP sources of incoming connections that match this route
            when using stream routing. Each entry is an object with fields ip
            (optionally in CIDR range notation) and/or port.
          type: array
          items:
            type: object
            properties: {}
        strip_path:
          default: true
          description: >-
            When matching a route via one of the `paths`, strip the matching
            prefix from the upstream request URL.
          type: boolean
        tags:
          description: >-
            An optional set of strings associated with the route for grouping
            and filtering.
          type: array
          items:
            type: string
        updated_at:
          description: Unix epoch when the resource was last updated.
          type: integer
    SNI:
      description: >-
        An SNI object represents a many-to-one mapping of hostnames to a
        certificate. That is, a certificate object can have many hostnames
        associated with it; when Kong receives an SSL request, it uses the SNI
        field in the Client Hello to lookup the certificate object based on the
        SNI associated with the certificate.
      example:
        certificate:
          id: bd380f99-659d-415e-b0e7-72ea05df3218
        id: 36c4566c-14cc-4132-9011-4139fcbbe50a
        name: some.example.org
      type: object
      properties:
        certificate:
          additionalProperties: false
          description: >-
            The id (a UUID) of the certificate with which to associate the SNI
            hostname. The Certificate must have a valid private key associated
            with it to be used by the SNI object.
          type: object
          properties:
            id:
              type: string
              example: 147f5ef0-1ed6-4711-b77f-489262f8bff7
        created_at:
          description: Unix epoch when the resource was created.
          type: integer
          example: 1422386534
        id:
          type: string
          example: b87eb55d-69a1-41d2-8653-8d706eecefc0
        name:
          description: The SNI name to associate with the given certificate.
          type: string
          example: my-sni
        tags:
          description: >-
            An optional set of strings associated with the SNIs for grouping and
            filtering.
          type: array
          items:
            type: string
            example: user-level, enterprise
    Target:
      description: >-
        A target is an ip address/hostname with a port that identifies an
        instance of a backend service. Every upstream can have many targets, and
        the targets can be dynamically added, modified, or deleted. Changes take
        effect on the fly. To disable a target, post a new one with `weight=0`;
        alternatively, use the `DELETE` convenience method to accomplish the
        same. The current target object definition is the one with the latest
        `created_at`.
      example:
        id: 089292a7-ba3d-4d88-acf0-97b4b2e2621a
        target: 203.0.113.42
        upstream:
          id: 5f1d7e76-2fed-4806-a6af-869984f025cb
        weight: 100
      type: object
      properties:
        created_at:
          description: Unix epoch when the resource was created.
          type: number
          example: 1422386534
        updated_at:
          description: Unix epoch when the resource was last updated.
          type: integer
          example: 1422386534
        id:
          type: string
          example: 173a6cee-90d1-40a7-89cf-0329eca780a6
          description: >-
            The unique identifier or the name of the upstream for which to
            update the target.
        tags:
          description: >-
            An optional set of strings associated with the Target for grouping
            and filtering.
          type: array
          items:
            type: string
        target:
          description: >-
            The target address (ip or hostname) and port. If the hostname
            resolves to an SRV record, the `port` value will be overridden by
            the value from the DNS record.
          type: string
        upstream:
          additionalProperties: false
          type: object
          description: >-
            The unique identifier or the name of the upstream for which to
            update the target.
          properties:
            id:
              type: string
              example: bdab0e47-4e37-4f0b-8fd0-87d95cc4addc
        weight:
          default: 100
          description: >-
            The weight this target gets within the upstream loadbalancer
            (`0`-`65535`). If the hostname resolves to an SRV record, the
            `weight` value will be overridden by the value from the DNS record.
          type: integer
          example: 100
      x-examples:
        Example 1:
          created_at: 1685645663
          id: 1da9dd7e-24a2-4a82-9826-5147ed76f804
          tags:
            - string
          target: 122.158.1.38:8000
          updated_at: 1685645663
          upstream:
            id: fe335516-b679-44e5-8bf0-f9af0524e230
          weight: 100
    Upstream:
      description: >-
        The upstream object represents a virtual hostname and can be used to
        loadbalance incoming requests over multiple services (targets). So for
        example an upstream named `service.v1.xyz` for a service object whose
        `host` is `service.v1.xyz`. Requests for this service would be proxied
        to the targets defined within the upstream. An upstream also includes a
        [health checker][healthchecks], which is able to enable and disable
        targets based on their ability or inability to serve requests. The
        configuration for the health checker is stored in the upstream object,
        and applies to all of its targets.
      example:
        algorithm: round-robin
        hash_fallback: none
        hash_on: none
        hash_on_cookie_path: /
        healthchecks:
          active:
            concurrency: 10
            healthy:
              http_statuses:
                - 200
                - 302
              interval: 0
              successes: 0
            http_path: /
            https_verify_certificate: true
            timeout: 1
            type: http
            unhealthy:
              http_failures: 0
              http_statuses:
                - 429
                - 404
                - 500
                - 501
                - 502
                - 503
                - 504
                - 505
              interval: 0
              tcp_failures: 0
              timeouts: 0
          passive:
            healthy:
              http_statuses:
                - 200
                - 201
                - 202
                - 203
                - 204
                - 205
                - 206
                - 207
                - 208
                - 226
                - 300
                - 301
                - 302
                - 303
                - 304
                - 305
                - 306
                - 307
                - 308
              successes: 0
            type: http
            unhealthy:
              http_failures: 0
              http_statuses:
                - 429
                - 500
                - 503
              tcp_failures: 0
              timeouts: 0
          threshold: 0
        id: 6eed5e9c-5398-4026-9a4c-d48f18a2431e
        name: api.example.internal
        slots: 10000
      properties:
        algorithm:
          default: round-robin
          description: Which load balancing algorithm to use.
          type: string
        client_certificate:
          additionalProperties: false
          description: >-
            If set, the certificate to be used as client certificate while TLS
            handshaking to the upstream server.
          properties:
            id:
              type: string
          type: object
        created_at:
          description: Unix epoch when the resource was created.
          type: integer
          example: 1422386534
        updated_at:
          description: Unix epoch when the resouce was updated.
          type: integer
          example: 1422386534
        hash_fallback:
          default: none
          description: >-
            What to use as hashing input if the primary `hash_on` does not
            return a hash (eg. header is missing, or no Consumer identified).
            Not available if `hash_on` is set to `cookie`.
          type: string
        hash_fallback_header:
          description: >-
            The header name to take the value from as hash input. Only required
            when `hash_fallback` is set to `header`.
          type: string
        hash_fallback_query_arg:
          description: >-
            The name of the query string argument to take the value from as hash
            input. Only required when `hash_fallback` is set to `query_arg`.
          type: string
        hash_fallback_uri_capture:
          description: >-
            The name of the route URI capture to take the value from as hash
            input. Only required when `hash_fallback` is set to `uri_capture`.
          type: string
        hash_on:
          default: none
          description: >-
            What to use as hashing input. Using `none` results in a
            weighted-round-robin scheme with no hashing.
          type: string
        hash_on_cookie:
          description: >-
            The cookie name to take the value from as hash input. Only required
            when `hash_on` or `hash_fallback` is set to `cookie`. If the
            specified cookie is not in the request, Kong will generate a value
            and set the cookie in the response.
          type: string
        hash_on_cookie_path:
          default: /
          description: >-
            The cookie path to set in the response headers. Only required when
            `hash_on` or `hash_fallback` is set to `cookie`.
          type: string
        hash_on_header:
          description: >-
            The header name to take the value from as hash input. Only required
            when `hash_on` is set to `header`.
          type: string
        hash_on_query_arg:
          description: >-
            The name of the query string argument to take the value from as hash
            input. Only required when `hash_on` is set to `query_arg`.
          type: string
        hash_on_uri_capture:
          description: >-
            The name of the route URI capture to take the value from as hash
            input. Only required when `hash_on` is set to `uri_capture`.
          type: string
        healthchecks:
          properties:
            active:
              properties:
                concurrency:
                  default: 10
                  type: integer
                headers:
                  type: object
                healthy:
                  properties:
                    http_statuses:
                      default:
                        - 200
                        - 302
                      items:
                        type: integer
                      type: array
                    interval:
                      default: 0
                      type: number
                    successes:
                      default: 0
                      type: integer
                  type: object
                http_path:
                  default: /
                  type: string
                https_sni:
                  type: string
                https_verify_certificate:
                  default: true
                  type: boolean
                timeout:
                  default: 1
                  type: number
                type:
                  default: http
                  type: string
                unhealthy:
                  properties:
                    http_failures:
                      default: 0
                      type: integer
                    http_statuses:
                      default:
                        - 429
                        - 404
                        - 500
                        - 501
                        - 502
                        - 503
                        - 504
                        - 505
                      items:
                        type: integer
                      type: array
                    interval:
                      default: 0
                      type: number
                    tcp_failures:
                      default: 0
                      type: integer
                    timeouts:
                      default: 0
                      type: integer
                  type: object
              type: object
            passive:
              properties:
                healthy:
                  properties:
                    http_statuses:
                      default:
                        - 200
                        - 201
                        - 202
                        - 203
                        - 204
                        - 205
                        - 206
                        - 207
                        - 208
                        - 226
                        - 300
                        - 301
                        - 302
                        - 303
                        - 304
                        - 305
                        - 306
                        - 307
                        - 308
                      items:
                        type: integer
                      type: array
                    successes:
                      default: 0
                      type: integer
                  type: object
                type:
                  default: http
                  type: string
                unhealthy:
                  properties:
                    http_failures:
                      default: 0
                      type: integer
                    http_statuses:
                      default:
                        - 429
                        - 500
                        - 503
                      items:
                        type: integer
                      type: array
                    tcp_failures:
                      default: 0
                      type: integer
                    timeouts:
                      default: 0
                      type: integer
                  type: object
              type: object
            threshold:
              default: 0
              type: number
          type: object
        host_header:
          description: >-
            The hostname to be used as `Host` header when proxying requests
            through Kong.
          type: string
        id:
          type: string
        name:
          description: This is a hostname, which must be equal to the `host` of a service.
          type: string
        slots:
          default: 10000
          description: >-
            The number of slots in the load balancer algorithm. If `algorithm`
            is set to `round-robin`, this setting determines the maximum number
            of slots. If `algorithm` is set to `consistent-hashing`, this
            setting determines the actual number of slots in the algorithm.
            Accepts an integer in the range `10`-`65536`.
          type: integer
        tags:
          description: >-
            An optional set of strings associated with the Upstream for grouping
            and filtering.
          items:
            type: string
          type: array
        use_srv_name:
          default: false
          description: >-
            If set, the balancer will use SRV hostname(if DNS Answer has SRV
            record) as the proxy upstream `Host`.
          type: boolean
      type: object
    Vault:
      description: >-
        Vault entities are used to configure different Vault connectors.
        Examples of Vaults are Environment Variables, Hashicorp Vault and AWS
        Secrets Manager. Configuring a Vault allows referencing the secrets with
        other entities. For example a certificate entity can store a reference
        to a certificate and key, stored in a vault, instead of storing the
        certificate and key within the entity. This allows a proper separation
        of secrets and configuration and prevents secret sprawl.
      example:
        config:
          prefix: ENV_PREFIX
        description: environment variable based vault
        id: 2747d1e5-8246-4f65-a939-b392f1ee17f8
        name: env
        tags:
          - foo
          - bar
      type: object
      properties:
        config:
          description: >-
            The configuration properties for the Vault which can be found on the
            vaults' documentation page.
          type: object
        created_at:
          description: Unix epoch when the resource was created.
          type: integer
          example: 1422386534
        description:
          description: The description of the Vault entity.
          type: string
          example: This vault is used to retrieve redis database access credentials
        id:
          type: string
          example: B2A30E8F-C542-49CF-8015-FB674987D1A5
        name:
          description: >-
            The name of the Vault that's going to be added. Currently, the Vault
            implementation must be installed in every Kong instance.
          type: string
          example: env
        prefix:
          description: >-
            The unique prefix (or identifier) for this Vault configuration. The
            prefix is used to load the right Vault configuration and
            implementation when referencing secrets with the other entities.
          type: string
          example: env
        tags:
          description: >-
            An optional set of strings associated with the Vault for grouping
            and filtering.
          type: array
          items:
            type: string
            example: database-credentials
        updated_at:
          description: Unix epoch when the resource was last updated.
          type: integer
          example: 1422386534
      x-examples:
        Example Vault:
          id: B2A30E8F-C542-49CF-8015-FB674987D1A5
          prefix: env
          name: env
          description: This vault is used to retrieve redis database access credentials
          config:
            prefix: SSL_
          created_at: 1422386534
          updated_at: 1422386534
          tags:
            - database-credentials
            - data-plane
    pagination-offset-response:
      description: >-
        Offset is used to paginate through the API. Provide this value to the
        next list operation to fetch the next page
      type: string
    BaseError:
      type: object
      title: Error
      description: standard error
      required:
        - status
        - title
        - instance
        - detail
      properties:
        status:
          type: integer
          description: >
            The HTTP status code of the error. Useful when passing the response

            body to child properties in a frontend UI. Must be returned as an
            integer.
          readOnly: true
        title:
          type: string
          description: |
            A short, human-readable summary of the problem. It should not
            change between occurences of a problem, except for localization.
            Should be provided as "Sentence case" for direct use in the UI.
          readOnly: true
        type:
          type: string
          description: The error type.
          readOnly: true
        instance:
          type: string
          description: |
            Used to return the correlation ID back to the user, in the format
            kong:trace:<correlation_id>. This helps us find the relevant logs
            when a customer reports an issue.
          readOnly: true
        detail:
          type: string
          description: >
            A human readable explanation specific to this occurence of the
            problem.

            This field may contain request/entity data to help the user
            understand

            what went wrong. Enclose variable values in square brackets. Should
            be

            provided as "Sentence case" for direct use in the UI.
          readOnly: true
    InvalidRules:
      description: invalid parameters rules
      type: string
      readOnly: true
      nullable: true
      enum:
        - required
        - enum
        - min_length
        - max_length
        - min_digits
        - min_lowercase
        - min_uppercase
        - min_symbols
        - is_array
        - is_base64
        - is_boolean
        - is_date_time
        - is_integer
        - is_null
        - is_number
        - is_object
        - is_string
        - is_uuid
        - unknown_property
        - is_label
        - matches_regex
    InvalidParameterChoiceItem:
      type: object
      properties:
        field:
          type: string
          example: name
          readOnly: true
        rule:
          $ref: '#/components/schemas/InvalidRules'
        reason:
          type: string
          example: is a required field
          readOnly: true
        choices:
          type: array
          uniqueItems: true
          nullable: true
          items: {}
          readOnly: true
      required:
        - field
        - reason
    InvalidParameterDependentItem:
      type: object
      properties:
        field:
          type: string
          example: name
          readOnly: true
        rule:
          description: invalid parameters rules
          type: string
          readOnly: true
          nullable: true
          enum:
            - dependent_fields
        reason:
          type: string
          example: is a required field
          readOnly: true
        dependents:
          type: array
          uniqueItems: true
          nullable: true
          items: {}
          readOnly: true
      required:
        - field
        - rule
        - reason
        - dependents
    InvalidParameters:
      type: array
      nullable: false
      uniqueItems: true
      minItems: 1
      description: invalid parameters
      items:
        oneOf:
          - $ref: '#/components/schemas/InvalidParameterChoiceItem'
          - $ref: '#/components/schemas/InvalidParameterDependentItem'
    BadRequestError:
      type: object
      required:
        - invalid_parameters
      properties:
        status:
          example: 400
        title:
          example: Bad Request
        type:
          example: https://httpstatuses.com/400
        instance:
          example: kong:trace:1234567890
        detail:
          example: Invalid request body
        invalid_parameters:
          $ref: '#/components/schemas/InvalidParameters'
      allOf:
        - $ref: '#/components/schemas/BaseError'
    UnauthorizedError:
      type: object
      properties:
        status:
          example: 401
        title:
          example: Unauthorized
        type:
          example: https://httpstatuses.com/401
        instance:
          example: kong:trace:1234567890
        detail:
          example: Invalid credentials
      allOf:
        - $ref: '#/components/schemas/BaseError'
    ForbiddenError:
      type: object
      properties:
        status:
          example: 403
        title:
          example: Forbidden
        type:
          example: https://httpstatuses.com/403
        instance:
          example: kong:trace:1234567890
        detail:
          example: Forbidden
      allOf:
        - $ref: '#/components/schemas/BaseError'
    ConflictError:
      type: object
      properties:
        status:
          example: 409
        title:
          example: Conflict
        type:
          example: https://httpstatuses.com/409
        instance:
          example: kong:trace:1234567890
        detail:
          example: Conflict
      allOf:
        - $ref: '#/components/schemas/BaseError'
    NotFoundError:
      type: object
      properties:
        status:
          example: 404
        title:
          example: Not Found
        type:
          example: https://httpstatuses.com/404
        instance:
          example: kong:trace:1234567890
        detail:
          example: Not found
      allOf:
        - $ref: '#/components/schemas/BaseError'
  requestBodies:
    CA-cert-request:
      content:
        application/json:
          schema:
            type: object
            x-examples:
              Example 1:
                cert: '-----BEGIN CERTIFICATE-----...'
                cert_digest: c641e28d77e93544f2fa87b2cf3f3d51...
                tags:
                  - user-level
                  - low-priority
            properties:
              cert:
                type: string
                description: |
                  PEM-encoded public certificate of the CA.
                example: '-----BEGIN CERTIFICATE-----...'
              cert_digest:
                type: string
                example: c641e28d77e93544f2fa87b2cf3f3d51...
                description: |
                  SHA256 hex digest of the public certificate.
              tags:
                type: array
                description: >-
                  An optional set of strings associated with the Certificate for
                  grouping and filtering.
                items:
                  type: string
            required:
              - cert
      description: >-
        This request body represents a new Certificate Authority (CA)
        certificate and includes the properties required to create a new
        certificate.
    cert-request:
      content:
        application/json:
          schema:
            type: object
            x-examples:
              Example:
                id: 7fca84d6-7d37-4a74-a7b0-93e576089a41
                created_at: 1422386534
                cert: '-----BEGIN CERTIFICATE-----...'
                key: '-----BEGIN RSA PRIVATE KEY-----...'
                cert_alt: '-----BEGIN CERTIFICATE-----...'
                key_alt: '-----BEGIN EC PRIVATE KEY-----...'
                snis:
                  - foo.test
                  - example.com
                tags:
                  - user-level
                  - low-priority
            properties:
              cert:
                type: string
                description: 'PEM-encoded public certificate chain of the SSL key pair. '
                example: '-----BEGIN CERTIFICATE-----...,'
              key:
                type: string
                example: '-----BEGIN RSA PRIVATE KEY-----...'
                description: 'PEM-encoded private key of the SSL key pair. '
              cert_alt:
                type: string
                description: >-
                  PEM-encoded public certificate chain of the alternate SSL key
                  pair. 
              key_alt:
                type: string
                description: 'PEM-encoded private key of the alternate SSL key pair. '
                example: '-----BEGIN EC PRIVATE KEY-----...'
              tags:
                type: array
                description: >
                  An optional set of strings associated with the Certificate for
                  grouping and filtering.
                items:
                  type: string
            required:
              - cert
              - key
    create-sni:
      content:
        application/json:
          schema:
            type: object
            x-examples:
              Example 1:
                name: my-sni
                tags:
                  - user-level
                  - low-priority
                certificate:
                  id: a2e013e8-7623-4494-a347-6d29108ff68b
            properties:
              name:
                type: string
                description: The SNI name to associate with the given certificate.
                example: my-sni
              tags:
                type: array
                description: >
                  An optional set of strings associated with the SNIs for
                  grouping and filtering.
                items:
                  type: string
                  example: '[user-level, low-priority]'
              certificate:
                type: object
                description: >-
                  The id (a UUID) of the certificate with which to associate the
                  SNI hostname. The Certificate must have a valid private key
                  associated with it to be used by the SNI object. With
                  form-encoded, the notation is `certificate.id=<certificate
                  id>`. With JSON, use `“certificate:{id:<certificate id>”}`.
                required:
                  - id
                properties:
                  id:
                    type: string
                    example: 91020192-062d-416f-a275-9addeeaffaf2
                    description: 91020192-062d-416f-a275-9addeeaffaf2
            required:
              - name
              - certificate
      description: >-
        A JSON object containing the details of the new SNI, including the name,
        certificate, and tags.
    consumer-request:
      content:
        application/json:
          schema:
            type: object
            x-examples:
              Example 1:
                id: ec1a1f6f-2aa4-4e58-93ff-b56368f19b27
                created_at: 1422386534
                username: my-username
                custom_id: my-custom-id
                tags:
                  - user-level
                  - low-priority
            properties:
              username:
                type: string
                description: >
                  The unique username of the Consumer. You must send either this
                  field or custom_id with the request.
              custom_id:
                type: string
                description: >
                  Field for storing an existing unique ID for the Consumer -
                  useful for mapping Kong with users in your existing database.
                  You must send either this field or username with the request.
              tags:
                type: array
                description: >
                  An optional set of strings associated with the Consumer for
                  grouping and filtering.
                items:
                  type: string
            required:
              - username
              - custom_id
      description: Consumer request body
    plugin-request:
      content:
        application/json:
          schema:
            type: object
            x-examples:
              Example 1:
                name: rate-limiting
                route: null
                service: null
                consumer: null
                instance_name: rate-limiting-foo
                config:
                  hour: 500
                  minute: 20
                protocols:
                  - http
                  - https
                enabled: true
                tags:
                  - user-level
                  - low-priority
                ordering:
                  before:
                    - plugin-name
            properties:
              name:
                type: string
                nullable: true
                description: >-
                  The name of the Plugin that’s going to be added. Currently,
                  the Plugin must be installed in every Kong instance
                  separately.
                example: rate-limiting
              route:
                type: object
                description: >-
                  If set, the plugin will only activate when receiving requests
                  via the specified route. Leave unset for the plugin to
                  activate regardless of the route being used. Default:
                  `null`.With form-encoded, the notation is `route.id=<route id>
                  or route.name=<route name>`. With JSON, use `route:{id:<route
                  id>}` or `route:{name:<route name>}`.
                properties:
                  id:
                    type: string
                    description: The Id of the route.
                    example: a2e013e8-7623-4494-a347-6d29108ff68b
              service:
                type: object
                nullable: true
                description: >-
                  If set, the plugin will only activate when receiving requests
                  via one of the routes belonging to the specified service.
                properties:
                  id:
                    type: string
                    description: The Id of the route.
                    example: a2e013e8-7623-4494-a347-6d29108ff68b
              instance_name:
                type: string
                description: |
                  The Plugin instance name.
                example: rate-limiting-foo
              config:
                type: object
                description: The configuration properties for the Plugin
                properties:
                  hour:
                    type: integer
                    example: 500
                  minute:
                    type: integer
                    example: 500
              protocols:
                type: array
                description: A list of the request protocols that will trigger this plugin.
                items:
                  type: string
                  enum:
                    - http
                    - grpc
                    - grpcs
                    - tls
                    - tcp
                  default: http
              enabled:
                type: boolean
                description: |
                  Whether the plugin is applied. Default: `true`.
                default: true
              tags:
                type: array
                description: >
                  An optional set of strings associated with the Plugin for
                  grouping and filtering.
                items:
                  type: string
          examples:
            request example:
              value:
                name: rate-limiting
                consumer: string
                instance_name: rate-limiting-foo
                config:
                  hour: 500
                  minute: 500
                protocols:
                  - http
                enabled: true
                tags:
                  - string
      description: Plugin request body
    key-set-request:
      content:
        application/json:
          schema:
            type: object
            x-examples:
              Example 1:
                name: my-key_set
                tags:
                  - google-keys
                  - mozilla-keys
            properties:
              name:
                type: string
                description: |
                  The name to associate with the given key-set.
                example: my-key_set
              tags:
                type: array
                description: >
                  An optional set of strings associated with the Key for
                  grouping and filtering.
                items:
                  type: string
    keys-request:
      content:
        application/json:
          schema:
            type: object
            x-examples:
              Example 1:
                set:
                  id: 46CA83EE-671C-11ED-BFAB-2FE47512C77A
                name: my-key
                kid: '42'
                jwk: '{alg:RSA,  kid: 42,  ...}'
                pem:
                  private_key: '-----BEGIN'
                  public_key: '-----BEGIN'
                tags:
                  - application-a
                  - public-key-xyz
            properties:
              set:
                type: object
                description: >-
                  The id (an UUID) of the key-set with which to associate the
                  key .With form-encoded, the notation is `set.id=<set id>` or
                  `set.name=<set name>`. With JSON, use `“set:{id:<set id>}` or
                  `set:{name:<set name>}.`
                properties:
                  id:
                    type: string
                    description: 46CA83EE-671C-11ED-BFAB-2FE47512C77A
              name:
                type: string
                example: my-key
                description: |
                  The name to associate with the given keys.
              kid:
                type: string
                description: |
                  A unique identifier for a key.
                example: '42'
              jwk:
                type: string
                description: A JSON Web Key represented as a string.
                example: '{\alg\:\RSA\,  \kid\: \42\,  ...}'
              pem:
                type: object
                description: |
                  A keypair in PEM format.
                properties:
                  private_key:
                    type: string
                    example: 'private_key: -----BEGIN'
                  public_key:
                    type: string
                    example: 'public_key: -----BEGIN'
              tags:
                type: array
                description: >
                  An optional set of strings associated with the Key for
                  grouping and filtering.
                items:
                  type: string
            required:
              - kid
    route-request:
      content:
        application/json:
          schema:
            type: object
            x-examples:
              Example 1:
                name: my-route
                protocols:
                  - http
                  - https
                methods:
                  - GET
                  - POST
                hosts:
                  - example.com
                  - foo.test
                paths:
                  - /foo
                  - /bar
                headers:
                  x-my-header:
                    - foo
                    - bar
                  x-another-header:
                    - bla
                https_redirect_status_code: 426
                regex_priority: 0
                strip_path: true
                path_handling: v0
                preserve_host: false
                request_buffering: true
                response_buffering: true
                snis:
                  - foo.test
                  - example.com
                sources:
                  - ip: 10.1.0.0/16
                    port: 1234
                  - ip: 10.2.2.2
                  - port: 9123
                destinations:
                  - ip: 10.1.0.0/16
                    port: 1234
                  - ip: 10.2.2.2
                  - port: 9123
                tags:
                  - user-level
                  - low-priority
                service:
                  id: af8330d3-dbdc-48bd-b1be-55b98608834b
            properties:
              name:
                type: string
                description: >
                  The name of the route. Route names must be unique, and they
                  are case sensitive. For example, there can be two different
                  routes named “test” and “Test”.
              protocols:
                type: array
                description: An array of the protocols this route should allow
                items:
                  type: string
                  default: https
                  example: tcp
              methods:
                type: array
                description: |
                  A list of HTTP methods that match this route.
                items:
                  type: string
                  example: GET
              hosts:
                type: array
                description: >-
                  A list of domain names that match this route. Note that the
                  hosts value is case sensitive. With form-encoded, the notation
                  is `hosts[]=example.com&hosts[]=foo.test`. With JSON, use an
                  Array.
                items:
                  type: string
              paths:
                type: array
                description: >-
                  A list of paths that match this route. With form-encoded, the
                  notation is `paths[]=/foo&paths[]=/bar`. With JSON, use an
                  array. The path can be a regular expression, or a plain text
                  pattern. 
                items:
                  type: string
              headers:
                type: object
                description: >-
                  One or more lists of values indexed by header name that will
                  cause this route to match if present in the request. The Host
                  header cannot be used with this attribute: hosts should be
                  specified using the `hosts` attribute. When headers contains
                  only one value and that value starts with the special prefix`
                  ~*`, the value is interpreted as a regular expression.
                properties:
                  x-my-header:
                    type: array
                    items:
                      type: string
                  x-another-header:
                    type: array
                    items:
                      type: string
              https_redirect_status_code:
                type: integer
                description: >-
                  The status code Kong responds with when all properties of a
                  route match except the protocol i.e. if the protocol of the
                  request is `HTTP` instead of `HTTPS`

                  Location header is injected by Kong if the field is set to
                  `301`, `302`, `307` or `308`. Note: This config applies only
                  if the route is configured to only accept the https protocol.
                  Accepted values are: `426`, `301`, `302`, `307`, `308`.
                  Default: `426`.
                default: 426
                enum:
                  - 426
                  - 301
                  - 302
                  - 307
                  - 308
                example: 426
              regex_priority:
                type: integer
                description: >-
                  A number used to choose which route resolves a given request
                  when several routes match it using regexes simultaneously.
                  When two routes match the path and have the same
                  regex_priority, the older one (lowest `created_at`) is used.
                  Note that the priority for non-regex routes is different
                  (longer non-regex routes are matched before shorter ones).
                  Default: `0`.
                default: 0
                example: 0
              strip_path:
                type: boolean
                description: >-
                  When matching a route via one of the paths, strip the matching
                  prefix from the upstream request URL. Default: `true`.
                default: true
              path_handling:
                type: string
                description: >-
                  Controls how the service path, route path and requested path
                  are combined when sending a request to the upstream. Accepted
                  values are: `v0`, `v1`. Default: `v0`.
                enum:
                  - v1
                  - v0
                example: v0
              preserve_host:
                type: boolean
                description: >-
                  When matching a route via one of the `hosts` domain names, use
                  the request `host` header in the upstream request headers. If
                  set to `false`, the upstream Host header will be that of the
                  service’s host.
                default: true
              request_buffering:
                type: boolean
                default: true
                description: >
                  Whether to enable request body buffering or not. With HTTP
                  1.1, it may make sense to turn this off on services that
                  receive data with chunked transfer encoding. Default: true.
              response_buffering:
                type: boolean
                default: true
                description: >
                  Whether to enable response body buffering or not. With HTTP
                  1.1, it may make sense to turn this off on services that send
                  data with chunked transfer encoding. Default: `true`.
              snis:
                type: array
                description: >
                  A list of SNIs that match this route when using stream
                  routing.
                items:
                  type: string
              sources:
                type: array
                description: >
                  A list of IP sources of incoming connections that match this
                  route when using stream routing. Each entry is an object with
                  fields “ip” (optionally in CIDR range notation) and/or “port”.
                items:
                  type: object
                  properties:
                    ip:
                      type: string
                      example: 10.1.0.0/16
                    port:
                      type: integer
                      example: 1234
              destinations:
                type: array
                description: >
                  A list of IP destinations of incoming connections that match
                  this route when using stream routing. Each entry is an object
                  with fields “ip” (optionally in CIDR range notation) and/or
                  “port”.
                items:
                  type: object
                  properties:
                    ip:
                      type: string
                      example: 0.1.0.0/16
                    port:
                      type: integer
              tags:
                type: array
                description: >
                  An optional set of strings associated with the route for
                  grouping and filtering.
                items:
                  type: string
              service:
                type: object
                description: >-
                  The service this route is associated to. This is where the
                  route proxies traffic to. With form-encoded, the notation is
                  service.id=<service id> or service.name=<service name>. With
                  JSON, use “`service:{id:<service id>}` or
                  `service:{name:<service name>}`.
                properties:
                  id:
                    type: string
                    example: af8330d3-dbdc-48bd-b1be-55b98608834b
            required:
              - protocols
              - https_redirect_status_code
              - preserve_host
              - request_buffering
              - response_buffering
          examples:
            Create a route:
              value:
                name: my-route
                protocols:
                  - http
                  - https
                methods:
                  - GET
                  - POST
                hosts:
                  - example.com
                  - foo.test
                paths:
                  - /foo
                  - /bar
                headers:
                  x-my-header:
                    - foo
                    - bar
                  x-another-header:
                    - bla
                https_redirect_status_code: 426
                regex_priority: 0
                strip_path: true
                path_handling: v0
                preserve_host: false
                request_buffering: true
                response_buffering: true
                tags:
                  - user-level
                  - low-priority
                service:
                  id: af8330d3-dbdc-48bd-b1be-55b98608834b
      description: Route request body
    service-request:
      content:
        application/json:
          schema:
            type: object
            x-examples:
              Example 1:
                id: 9748f662-7711-4a90-8186-dc02f10eb0f5
                created_at: 1422386534
                updated_at: 1422386534
                name: my-service
                retries: 5
                protocol: http
                host: example.com
                port: 80
                path: /some_api
                connect_timeout: 60000
                write_timeout: 60000
                read_timeout: 60000
                tags:
                  - user-level
                  - low-priority
                client_certificate:
                  id: 4e3ad2e4-0bc4-4638-8e34-c84a417ba39b
                tls_verify: true
                tls_verify_depth: null
                ca_certificates:
                  - 4e3ad2e4-0bc4-4638-8e34-c84a417ba39b
                  - 51e77dc2-8f3e-4afa-9d0e-0e3bbbcfd515
                enabled: true
            properties:
              name:
                type: string
                description: |
                  The service name.
                example: my-service
              retries:
                type: integer
                description: >
                  The number of retries to execute upon failure to proxy.
                  Default:`5`.
                default: 5
                example: 5
              protocol:
                type: string
                description: >-
                  The protocol used to communicate with the upstream. Accepted
                  values are: `grpc`, `grpcs`, `http`, `https`, `tcp`, `tls`,
                  `tls_passthrough`, `udp`, `ws`

                  , `wss`

                  . Default: `http`.
                default: http
                enum:
                  - grpc
                  - grpcs
                  - http
                  - https
                  - tcp
                  - 'tls '
                  - tls_passthrough
                  - udp
                  - ws
                  - wss
                example: http
              host:
                type: string
                description: >
                  The host of the upstream server. Note that the host value is
                  case sensitive.
                example: example.com
              port:
                type: integer
                description: |
                  The upstream server port. Default: `80`.
                default: 80
                example: 80
              path:
                type: string
                description: |
                  The path to be used in requests to the upstream server.
                example: /some_api
              connect_timeout:
                type: integer
                description: >-
                  The timeout in milliseconds for establishing a connection to
                  the upstream server. Default: `60000`.
                default: 6000
                example: 6000
              write_timeout:
                type: integer
                description: >
                  The timeout in milliseconds between two successive write
                  operations for transmitting a request to the upstream server.
                  Default: `60000`.
                default: 6000
                example: 6000
              read_timeout:
                type: integer
                description: >
                  The timeout in milliseconds between two successive read
                  operations for transmitting a request to the upstream server.
                  Default: `60000`.
                default: 6000
                example: 6000
              tags:
                type: array
                description: >
                  An optional set of strings associated with the service for
                  grouping and filtering.
                items:
                  type: string
                  example: user-level
              client_certificate:
                type: object
                description: >-
                  Certificate to be used as client certificate while TLS
                  handshaking to the upstream server. With form-encoded, the
                  notation is `client_certificate.id=<client_certificate id>`.
                  With JSON, use `client_certificate:{id:<client_certificate
                  id>}`.
                properties:
                  id:
                    type: string
                    example: 4e3ad2e4-0bc4-4638-8e34-c84a417ba39b
              tls_verify:
                type: boolean
                description: >
                  Whether to enable verification of upstream server TLS
                  certificate. If set to null, then the Nginx default is
                  respected.
                default: true
              tls_verify_depth:
                type: string
                description: >
                  Maximum depth of chain while verifying Upstream server’s TLS
                  certificate. If set to null, then the Nginx default is
                  respected. Default: null.
                example: respected
                default: null
                nullable: true
              ca_certificates:
                type: array
                description: >-
                  Array of CA Certificate object UUIDs that are used to build
                  the trust store while verifying upstream server’s TLS
                  certificate. If set to null when Nginx default is respected.
                  With form-encoded, the notation is
                  `ca_certificates[]=4e3ad2e4-0bc4-4638-8e34-c84a417ba39b&ca_certificates[]=51e77dc2-8f3e-4afa-9d0e-0e3bbbcfd515`.
                  With JSON, use an Array.
                items:
                  type: string
                  example: 4e3ad2e4-0bc4-4638-8e34-c84a417ba39b
              enabled:
                type: boolean
                default: true
                description: >-
                  Whether the service is active. If set to `false`, the proxy
                  behavior will be as if any routes attached to it do not exist
                  (404). Default: `true`.
            required:
              - protocol
              - host
              - port
              - enabled
          examples:
            Example:
              value:
                name: my-service
                retries: 5
                protocol: http
                host: example.com
                port: 80
                path: /some_api
                connect_timeout: 6000
                write_timeout: 6000
                read_timeout: 6000
                tags:
                  - user-level
                client_certificate:
                  id: 4e3ad2e4-0bc4-4638-8e34-c84a417ba39b
                tls_verify: true
                tls_verify_depth: null
                ca_certificates:
                  - 4e3ad2e4-0bc4-4638-8e34-c84a417ba39b
                enabled: true
            http service:
              value:
                name: my-service2
                retries: 5
                protocol: http
                host: example.com
                port: 80
                path: /some_api
                connect_timeout: 6000
                write_timeout: 6000
                read_timeout: 6000
                enabled: true
    upstream-request:
      content:
        application/json:
          schema:
            type: object
            x-examples:
              Example 1:
                id: 58c8ccbb-eafb-4566-991f-2ed4f678fa70
                created_at: 1422386534
                name: my-upstream
                algorithm: round-robin
                hash_on: none
                hash_fallback: none
                hash_on_cookie_path: /
                slots: 10000
                healthchecks:
                  passive:
                    type: http
                    healthy:
                      http_statuses:
                        - 200
                        - 201
                        - 202
                        - 203
                        - 204
                        - 205
                        - 206
                        - 207
                        - 208
                        - 226
                        - 300
                        - 301
                        - 302
                        - 303
                        - 304
                        - 305
                        - 306
                        - 307
                        - 308
                      successes: 0
                    unhealthy:
                      http_statuses:
                        - 429
                        - 500
                        - 503
                      timeouts: 0
                      http_failures: 0
                      tcp_failures: 0
                  active:
                    https_verify_certificate: true
                    healthy:
                      http_statuses:
                        - 200
                        - 302
                      successes: 0
                      interval: 0
                    unhealthy:
                      http_failures: 0
                      http_statuses:
                        - 429
                        - 404
                        - 500
                        - 501
                        - 502
                        - 503
                        - 504
                        - 505
                      timeouts: 0
                      tcp_failures: 0
                      interval: 0
                    type: http
                    concurrency: 10
                    headers:
                      - x-my-header:
                          - foo
                          - bar
                        x-another-header:
                          - bla
                    timeout: 1
                    http_path: /
                    https_sni: example.com
                  threshold: 0
                tags:
                  - user-level
                  - low-priority
                host_header: example.com
                client_certificate:
                  id: ea29aaa3-3b2d-488c-b90c-56df8e0dd8c6
                use_srv_name: false
            properties:
              name:
                type: string
                description: >-
                  This is a hostname, which must be equal to the `host` of a
                  service.
                example: my-upstream
              algorithm:
                type: string
                description: >
                  Which load balancing algorithm to use. Accepted values are:
                  `consistent-hashing`, `least-connections`,` round-robin`.
                  Default: `round-robin`.
                enum:
                  - consistent-hashing
                  - least-connections
                  - round-robin
                default: round-robin
                example: round-robin
              hash_on:
                type: string
                description: >-
                  What to use as hashing input. Using none results in a
                  weighted-round-robin scheme with no hashing
                default: none
                enum:
                  - none
                  - consumer
                  - ip
                  - cookie
                  - uri_capture
                  - path
                  - query_arg
              hash_fallback:
                type: string
                description: >-
                  What to use as hashing input if the primary hash_on does not
                  return a hash (eg. header is missing, or no Consumer
                  identified). Not available if hash_on is set to cookie.
                default: none
                enum:
                  - none
                  - consumer
                  - ip
                  - cookie
                  - uri_capture
                  - path
                  - query_arg
                example: none
              hash_on_header:
                type: string
                description: >-
                  The header name to take the value from as hash input. Only
                  required when `hash_on` is set to header.
                example: none
              hash_fallback_header:
                type: string
                description: >-
                  The header name to take the value from as hash input. Only
                  required when hash_fallback is set to header.
                default: none
                example: none
              hash_on_cookie:
                type: string
                description: >-
                  The cookie name to take the value from as hash input. Only
                  required when `hash_on` or `hash_fallback` is set to `cookie`.
                  If the specified cookie is not in the request, Kong will
                  generate a value and set the cookie in the response.
                example: none
              hash_on_cookie_path:
                type: string
                description: >-
                  The cookie path to set in the response headers. Only required
                  when `hash_on` or `hash_fallback` is set to `cookie`. Default:
                  `/`.
                default: /
                example: /
              hash_on_query_arg:
                type: string
                description: >-
                  The name of the query string argument to take the value from
                  as hash input. Only required when `hash_on` is set to
                  `query_arg`.
                example: hash_value
              hash_fallback_query_arg:
                type: string
                description: >-
                  The name of the query string argument to take the value from
                  as hash input. Only required when `hash_fallback` is set to
                  `query_arg`.
                example: hash_value
              hash_on_uri_capture:
                type: string
                description: >-
                  The name of the route URI capture to take the value from as
                  hash input. Only required when `hash_on` is set to
                  `uri_capture`.
                example: hash_value
              hash_fallback_uri_capture:
                type: string
                description: >-
                  The name of the route URI capture to take the value from as
                  hash input. Only required when `hash_fallback` is set to
                  `uri_capture`.
                example: hash_value
              slots:
                type: integer
                description: >-
                  The number of slots in the load balancer algorithm. If the
                  algorithm is set to `round-robin`, this setting determines the
                  maximum number of slots. If the algorithm is set to
                  `consistent-hashing`, this setting determines the actual
                  number of slots in the algorithm. Accepts an integer in the
                  range 10-65536.
                minimum: 10
                maximum: 65536
                default: 10000
                example: 5000
              healthchecks:
                type: object
                properties:
                  passive:
                    type: object
                    properties:
                      type:
                        type: string
                        description: >-
                          Whether to perform passive health checks interpreting
                          HTTP/HTTPS statuses, or just check for TCP connection
                          success. In passive checks, http and https options are
                          equivalent. Accepted values are: `tcp`, `http`,
                          `https`, `grpc`, `grpcs`.
                        default: http
                        enum:
                          - tcp
                          - http
                          - https
                          - grpc
                          - grpcs
                        example: tcp
                      healthy:
                        type: object
                        properties:
                          http_statuses:
                            type: array
                            description: >-
                              An array of HTTP statuses which represent
                              healthiness when produced by proxied traffic, as
                              observed by passive health checks.  With
                              form-encoded, the notation is
                              `http_statuses[]=200&http_statuses[]=201`. With
                              JSON, use an array.
                            default:
                              - 200
                              - 201
                              - 202
                              - 203
                              - 204
                              - 205
                              - 206
                              - 207
                              - 208
                              - 226
                              - 300
                              - 301
                              - 302
                              - 303
                              - 304
                              - 305
                              - 306
                              - 307
                              - 308
                            example:
                              - 200
                              - 201
                              - 202
                            items:
                              type: integer
                              enum:
                                - 200
                                - 201
                                - 202
                                - 203
                                - 204
                                - 205
                                - 206
                                - 207
                                - 208
                                - 226
                                - 300
                                - 301
                                - 302
                                - 303
                                - 304
                                - 305
                                - 306
                                - 307
                                - 308
                          successes:
                            type: integer
                            description: >-
                              Number of successes in proxied traffic (as defined
                              by `healthchecks.passive.healthy.http_statuses`)
                              to consider a target healthy, as observed by
                              passive health checks.
                            default: 0
                            example: 2
                      unhealthy:
                        type: object
                        properties:
                          http_statuses:
                            type: array
                            description: >-
                              An array of HTTP statuses which represent
                              unhealthiness when produced by proxied traffic, as
                              observed by passive health checks. With
                              form-encoded, the notation is
                              `http_statuses[]=429&http_statuses[]=500`. With
                              JSON, use an array.
                            default:
                              - 429
                              - 500
                              - 503
                            example:
                              - 500
                              - 503
                            items:
                              type: integer
                              enum:
                                - 429
                                - 500
                                - 503
                          timeouts:
                            type: integer
                            description: >-
                              Number of timeouts in proxied traffic to consider
                              a target unhealthy, as observed by passive health
                              checks.
                            default: 0
                            example: 1
                          http_failures:
                            type: integer
                            description: >-
                              Number of HTTP failures in proxied traffic (as
                              defined by
                              `healthchecks.passive.unhealthy.http_statuses`) to
                              consider a target unhealthy, as observed by
                              passive health checks.
                            default: 0
                            example: 3
                          tcp_failures:
                            type: integer
                            description: >-
                              Number of TCP connection failures to consider a
                              target unhealthy, as observed by passive health
                              checks.
                            default: 0
                            example: 1
                  active:
                    type: object
                    properties:
                      https_verify_certificate:
                        type: boolean
                      healthy:
                        type: object
                        properties:
                          http_statuses:
                            type: array
                            description: >-
                              An array of HTTP statuses to consider a success,
                              indicating healthiness, when returned by a probe
                              in active health checks. With form-encoded, the
                              notation is
                              `http_statuses[]=200&http_statuses[]=302`. With
                              JSON, use an array.
                            default:
                              - 200
                              - 302
                            example:
                              - 200
                              - 201
                            items:
                              type: integer
                          successes:
                            type: integer
                            description: >-
                              Number of successes in active probes (as defined
                              by `healthchecks.active.healthy.http_statuses`) to
                              consider a target healthy.
                            default: 0
                            example: 3
                          interval:
                            type: integer
                            description: >-
                              Interval between active health checks for healthy
                              targets (in seconds). A value of zero indicates
                              that active probes for healthy targets should not
                              be performed.
                            default: 0
                            example: 30
                      unhealthy:
                        type: object
                        properties:
                          http_failures:
                            type: integer
                            description: >-
                              Number of HTTP failures in active probes (as
                              defined by
                              `healthchecks.active.unhealthy.http_statuses`) to
                              consider a target unhealthy.
                            default: 0
                            example: 2
                          http_statuses:
                            type: array
                            description: >-
                              An array of HTTP statuses to consider a failure,
                              indicating unhealthiness, when returned by a probe
                              in active health checks. With form-encoded, the
                              notation is
                              `http_statuses[]=429&http_statuses[]=404`. With
                              JSON, use an array.
                            default:
                              - 429
                              - 404
                              - 500
                              - 501
                              - 502
                              - 503
                              - 504
                              - 505
                            example:
                              - 400
                              - 404
                            items:
                              type: integer
                          timeouts:
                            type: integer
                            description: >-
                              Number of timeouts in active probes to consider a
                              target unhealthy.
                            default: 0
                            example: 2
                          tcp_failures:
                            type: integer
                            description: >-
                              Number of TCP failures in active probes to
                              consider a target unhealthy.
                            default: 0
                            example: 1
                          interval:
                            type: integer
                            description: >-
                              Interval between active health checks for
                              unhealthy targets (in seconds). A value of zero
                              indicates that active probes for unhealthy targets
                              should not be performed.
                            default: 0
                            example: 10
                      type:
                        type: string
                        description: >-
                          Whether to perform active health checks using HTTP or
                          HTTPS, or just attempt a TCP connection.
                        enum:
                          - tcp
                          - http
                          - https
                          - grpc
                          - grpcs
                        default: http
                        example: https
                      concurrency:
                        type: integer
                        description: >-
                          Number of targets to check concurrently in active
                          health checks.
                        default: 10
                        example: 5
                      timeout:
                        type: integer
                        description: Socket timeout for active health checks (in seconds).
                        default: 1
                        example: 5
                      http_path:
                        type: string
                        description: >-
                          Path to use in GET HTTP request to run as a probe on
                          active health checks.
                        default: /
                      https_sni:
                        type: string
                        description: >-
                          The hostname to use as an SNI (Server Name
                          Identification) when performing active health checks
                          using HTTPS. This is particularly useful when Targets
                          are configured using IPs, so that the target host’s
                          certificate can be verified with the proper SNI.
                  threshold:
                    type: integer
                    description: >-
                      The minimum percentage of the upstream’s targets’ weight
                      that must be available for the whole upstream to be
                      considered healthy.
                    minimum: 0
                    maximum: 100
                    default: 0
              tags:
                type: array
                description: >-
                  An optional set of strings associated with the Upstream for
                  grouping and filtering.
                example:
                  - user-level
                  - low-priority
                items:
                  type: string
              host_header:
                type: string
                description: >-
                  The hostname to be used as Host header when proxying requests
                  through Kong.
              client_certificate:
                type: object
                description: >-
                  If set, the certificate to be used as client certificate while
                  TLS handshaking to the upstream server.
                properties:
                  id:
                    type: string
                    example: ea29aaa3-3b2d-488c-b90c-56df8e0dd8c6
            required:
              - name
          examples:
            Upstream:
              value:
                name: my-upstream
                algorithm: round-robin
                hash_on: none
                hash_fallback: none
                hash_on_cookie_path: /
                slots: 10000
                healthchecks:
                  passive:
                    type: http
                    healthy:
                      http_statuses:
                        - 200
                        - 201
                        - 202
                        - 203
                        - 204
                        - 205
                        - 206
                        - 207
                        - 208
                        - 226
                        - 300
                        - 301
                        - 302
                        - 303
                        - 304
                        - 305
                        - 306
                        - 307
                        - 308
                      successes: 0
                    unhealthy:
                      http_statuses:
                        - 429
                        - 500
                        - 503
                      timeouts: 0
                      http_failures: 0
                      tcp_failures: 0
                  active:
                    https_verify_certificate: true
                    healthy:
                      http_statuses:
                        - 200
                        - 302
                      successes: 0
                      interval: 0
                    unhealthy:
                      http_failures: 0
                      http_statuses:
                        - 429
                        - 404
                        - 500
                        - 501
                        - 502
                        - 503
                        - 504
                        - 505
                      timeouts: 0
                      tcp_failures: 0
                      interval: 0
                    type: http
                    concurrency: 10
                    headers:
                      type: object
                      properties:
                        x-my-header:
                          type: array
                          items:
                            type: string
                          description: The value(s) of the x-my-header header.
                        x-another-header:
                          type: array
                          items:
                            type: string
                          description: The value(s) of the x-another-header header.
                    timeout: 1
                    http_path: /
                    https_sni: example.com
                  threshold: 0
                tags:
                  - user-level
                  - low-priority
                host_header: example.com
                client_certificate:
                  id: ea29aaa3-3b2d-488c-b90c-56df8e0dd8c6
                use_srv_name: false
            Example request:
              value:
                name: my-upstream
                tags:
                  - user-level
                  - low-priority
                algorithm: round-robin
    target-request:
      content:
        application/json:
          schema:
            type: object
            x-examples:
              Example 1:
                upstream:
                  id: bdab0e47-4e37-4f0b-8fd0-87d95cc4addc
                target: example.com:8000
                weight: 100
                tags:
                  - user-level
                  - low-priority
            properties:
              upstream:
                type: object
                description: >
                  The unique identifier or the name of the upstream for which to
                  update the target.
                properties:
                  id:
                    type: string
                    example: 173a6cee-90d1-40a7-89cf-0329eca780a6
                    description: >-
                      The unique identifier or the name of the upstream for
                      which to update the target.
              weight:
                default: 100
                description: >-
                  The weight this target gets within the upstream loadbalancer
                  (`0`-`65535`). If the hostname resolves to an SRV record, the
                  `weight` value will be overridden by the value from the DNS
                  record.
                type: integer
                minimum: 0
                maximum: 65535
              tags:
                type: array
                description: >-
                  An optional set of strings associated with the Target for
                  grouping and filtering.
                items:
                  type: string
              target:
                type: string
                description: The target IP address
                example: 192.158.1.38
          examples:
            Example:
              value:
                upstream:
                  id: fe335516-b679-44e5-8bf0-f9af0524e230
                target: 192.158.1.38
                weight: 100
                tags:
                  - string
    vault-request:
      content:
        application/json:
          schema:
            type: object
            x-examples:
              Example 1:
                prefix: env
                name: env
                description: >-
                  This vault is used to retrieve redis database access
                  credentials
                config:
                  prefix: SSL_
                tags:
                  - database-credentials
                  - data-plane
            properties:
              prefix:
                type: string
                description: >
                  The unique prefix (or identifier) for this Vault
                  configuration. The prefix is used to load the right Vault
                  configuration and implementation when referencing secrets with
                  the other entities.
                example: pre
              name:
                type: string
                description: >
                  The name of the Vault that’s going to be added. Currently, the
                  Vault implementation must be installed in every Kong instance.
                example: env
              description:
                type: string
                description: |
                  The description of the Vault object.
                example: >-
                  This vault is used to retrieve redis database access
                  credentials
              config:
                type: object
                description: >
                  The configuration properties for the Vault which can be found
                  on the vaults’ documentation page.
                properties:
                  prefix:
                    type: string
                    example: SSL_
              tags:
                type: array
                description: >
                  An optional set of strings associated with the Vault for
                  grouping and filtering.
                items:
                  type: string
          examples:
            Example 1:
              value:
                prefix: pre
                name: env
                description: >-
                  This vault is used to retrieve redis database access
                  credentials
                config:
                  prefix: SSL_
                tags:
                  - database-credentials
                  - data-plane
    consumer-groups-request:
      content:
        application/json:
          schema:
            type: object
            x-examples:
              Example 1:
                name: JL
                tags:
                  - tag1
                  - tag2
            properties:
              name:
                type: string
                description: A unique name for the consumer group you want to create.
                example: Example
              tags:
                type: array
                description: >-
                  An optional set of strings associated with the consumer group
                  for grouping and filtering.
                items:
                  type: string
            required:
              - name
          examples:
            Example 1:
              value:
                name: Example
                tags:
                  - string
      description: Consumer groups request body
    create-dp-client-cert:
      content:
        application/json:
          schema:
            type: object
            properties:
              cert:
                type: string
                description: JSON escaped string of the certificate.
            required:
              - cert
          examples:
            Sample DP Client Certificate:
              value:
                cert: "-----BEGIN CERTIFICATE-----\r\n*****\r\n-----END CERTIFICATE-----\r\n"
      description: Request body for creating a dp-client-certificate.
    create-plugin-schemas:
      content:
        application/json:
          schema:
            type: object
            x-examples:
              Example 1:
                lua_schema: >-
                  return { name = \"myplugin\", fields = { { config = { type =
                  \"record\", fields = { } } } } }
            properties:
              lua_schema:
                type: string
                description: |
                  The custom plugin schema; `jq -Rs '.' schema.lua`.
                example: >-
                  return { name = \"myplugin\", fields = { { config = { type =
                  \"record\", fields = { } } } } }
            required:
              - lua_schema
  responses:
    sni-response:
      description: SNI response object
      content:
        application/json:
          schema:
            type: object
            x-examples:
              Example 1:
                data:
                  - id: 147f5ef0-1ed6-4711-b77f-489262f8bff7
                    name: my-sni
                    created_at: 1422386534
                    tags:
                      - user-level
                      - low-priority
                    certificate:
                      id: a3ad71a8-6685-4b03-a101-980a953544f6
                  - id: b87eb55d-69a1-41d2-8653-8d706eecefc0
                    name: my-sni
                    created_at: 1422386534
                    tags:
                      - admin
                      - high-priority
                      - critical
                    certificate:
                      id: 4e8d95d4-40f2-4818-adcb-30e00c349618
                next: >-
                  http://localhost:8001/snis?offset=6378122c-a0a1-438d-a5c6-efabae9fb969
            properties:
              data:
                type: array
                description: Array of SNIs
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      example: 147f5ef0-1ed6-4711-b77f-489262f8bff7
                      description: >-
                        The unique identifier or the name attribute of the
                        Certificate whose SNIs are to be retrieved. When using
                        this endpoint, only SNIs associated to the specified
                        Certificate will be listed.
                    name:
                      type: string
                      description: |
                        The SNI name to associate with the given certificate.
                      example: my-sni
                    created_at:
                      type: integer
                      example: 1422386534
                      description: |
                        Unix epoch when the resource was created.
                    tags:
                      type: array
                      description: >
                        An optional set of strings associated with the SNIs for
                        grouping and filtering.
                      items:
                        type: string
                    certificate:
                      type: object
                      description: >
                        The id (a UUID) of the certificate with which to
                        associate the SNI hostname. The Certificate must have a
                        valid private key associated with it to be used by the
                        SNI object.
                      properties:
                        id:
                          type: string
                          example: 2e013e8-7623-4494-a347-6d29108ff68b
                          description: >-
                            The unique identifier or the name attribute of the
                            Certificate whose SNIs
              next:
                type: string
                example: >-
                  http://localhost:8001/snis?offset=6378122c-a0a1-438d-a5c6-efabae9fb969
                description: >-
                  Offset is used to paginate through the API. Provide this value
                  to the next list operation to fetch the next page
          examples:
            Example SNI response:
              value:
                certificate:
                  id: e94215b0-9198-42ce-bf0b-98afff31b2a7
                created_at: 1685646239
                id: cf3b640e-100e-4fa4-aef6-2dc0488d7a58
                name: my-sni
                updated_at: 1685646239
    consumer-response-data:
      description: The consumer object response body
      content:
        application/json:
          schema:
            type: object
            x-examples:
              Example 1:
                data:
                  - id: a4407883-c166-43fd-80ca-3ca035b0cdb7
                    created_at: 1422386534
                    username: my-username
                    custom_id: my-custom-id
                    tags:
                      - user-level
                      - low-priority
                  - id: 01c23299-839c-49a5-a6d5-8864c09184af
                    created_at: 1422386534
                    username: my-username
                    custom_id: my-custom-id
                    tags:
                      - admin
                      - high-priority
                      - critical
                next: >-
                  http://localhost:8001/consumers?offset=6378122c-a0a1-438d-a5c6-efabae9fb969
            properties:
              data:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      description: >-
                        The unique identifier or the name attribute of the
                        consumer.
                      example: a4407883-c166-43fd-80ca-3ca035b0cdb7
                    created_at:
                      type: integer
                      description: Unix epoch when the resource was created.
                      example: 1422386534
                    username:
                      type: string
                      description: >-
                        The unique username of the consumer. You must send
                        either this field or` custom_i`d with the request.
                      example: my-username
                    custom_id:
                      type: string
                      description: >-
                        Field for storing an existing unique ID for the Consumer
                        - useful for mapping Kong with users in your existing
                        database.
                      example: my-custom-id
                    updated_at:
                      type: string
                      description: Unix epoch when the resource was created.
                      example: '1422386534'
                    tags:
                      type: array
                      description: >
                        An optional set of strings associated with the Consumer
                        for grouping and filtering.
                      items:
                        type: string
                        example: admin
              next:
                type: string
                description: Pagination information
                example: >-
                  http://localhost:8001/consumers?offset=6378122c-a0a1-438d-a5c6-efabae9fb969
    consumer-create-response:
      description: New consumer created response
      content:
        application/json:
          schema:
            type: object
            x-examples:
              Example 1:
                id: ec1a1f6f-2aa4-4e58-93ff-b56368f19b27
                created_at: 1422386534
                username: my-username
                custom_id: my-custom-id
                tags:
                  - user-level
                  - low-priority
            properties:
              created_at:
                type: integer
                description: |
                  Unix epoch when the resource was created.
                example: 1684424758
              custom_id:
                type: string
                description: Field for the unique consumer ID
              id:
                type: string
                description: The unique id of the consumer.
                example: c1a1f6f-2aa4-4e58-93ff-b56368f19b27
              tags:
                type: array
                description: >-
                  An optional set of strings associated with the Consumer for
                  grouping and filtering.
                items:
                  type: string
              updated_at:
                type: integer
                description: |
                  Unix epoch when the resource was updated.
                example: 1684424758
              username:
                type: string
                description: The unique username of the consumer.
          examples:
            Example 1:
              value:
                created_at: 1684424758
                custom_id: string
                id: c1a1f6f-2aa4-4e58-93ff-b56368f19b27
                tags:
                  - string
                updated_at: 1684424758
                username: string
    plugin-response:
      description: Example response
      content:
        application/json:
          schema:
            type: object
            properties:
              id:
                type: string
              name:
                type: string
                description: >-
                  The name of the Plugin that’s going to be added. Currently,
                  the Plugin must be installed in every Kong instance
                  separately.
                example: rate-limiting
              created_at:
                type: integer
                description: Unix epoch when the resource was created.
              route:
                type: string
                description: >-
                  If set, the plugin will only activate when receiving requests
                  via the specified route. Leave unset for the plugin to
                  activate regardless of the route being used. Default:
                  `null`.With form-encoded, the notation is `route.id=<route id>
                  or route.name=<route name>`. With JSON, use `route:{id:<route
                  id>}` or `route:{name:<route name>}`.
                nullable: true
              service:
                type: string
                description: >-
                  If set, the plugin will only activate when receiving requests
                  via one of the routes belonging to the specified service.
                nullable: true
              consumer:
                type: string
                description: >-
                  If set, the plugin will activate only for requests where the
                  specified has been authenticated. (Note that some plugins can
                  not be restricted to consumers this way.)
                nullable: true
              instance_name:
                type: string
                description: |
                  The Plugin instance name.
                example: rate-limiting-foo
              config:
                type: object
                description: The configuration properties for the Plugin
                properties:
                  hour:
                    type: integer
                    example: 500
                  minute:
                    type: integer
                    example: 500
              protocols:
                type: array
                description: A list of the request protocols that will trigger this plugin.
                items:
                  type: string
                  enum:
                    - http
                    - grpc
                    - grpcs
                    - tls
                    - tcp
                  default: http
              enabled:
                type: boolean
                description: |
                  Whether the plugin is applied. Default: `true`.
                default: true
              tags:
                type: array
                description: >
                  An optional set of strings associated with the Plugin for
                  grouping and filtering.
                items:
                  type: string
          x-examples:
            Example 1:
              id: ce44eef5-41ed-47f6-baab-f725cecf98c7
              name: rate-limiting
              created_at: 1422386534
              route: null
              service: null
              consumer: null
              instance_name: rate-limiting-foo
              config:
                hour: 500
                minute: 20
              protocols:
                - http
                - https
              enabled: true
              tags:
                - user-level
                - low-priority
              ordering:
                before:
                  - plugin-name
          examples:
            Plugin response:
              value:
                data:
                  - id: 02621eee-8309-4bf6-b36b-a82017a5393e
                    name: rate-limiting
                    created_at: 1422386534
                    route: null
                    service: null
                    consumer: null
                    config:
                      hour: 500
                      minute: 20
                    protocols:
                      - http
                      - https
                    enabled: true
                    tags:
                      - user-level
                      - low-priority
                    ordering:
                      before:
                        - plugin-name
                  - id: 66c7b5c4-4aaf-4119-af1e-ee3ad75d0af4
                    name: rate-limiting
                    created_at: 1422386534
                    route: null
                    service: null
                    consumer: null
                    config:
                      hour: 500
                      minute: 20
                    protocols:
                      - tcp
                      - tls
                    enabled: true
                    tags:
                      - admin
                      - high-priority
                      - critical
                next: >-
                  http://localhost:8001/plugins?offset=6378122c-a0a1-438d-a5c6-efabae9fb969
    key-set-response:
      description: Key set object response body
      content:
        application/json:
          schema:
            type: object
            x-examples:
              Example 1:
                id: b58c7d9d-e54f-444c-b24d-cdfc4159f61e
                name: example-key-set
                created_at: 1422386534
                updated_at: 1422386534
                tags:
                  - idp-keys
                next: >-
                  http://localhost:8001/key-sets?offset=6378122c-a0a1-438d-a5c6-efabae9fb969
            properties:
              id:
                type: string
                example: 4D0DBDA-671C-11ED-BA0B-EF1DCCD3725F
              name:
                type: string
                description: |
                  The name to associate with the given key-set.
                example: my-key_set
              created_at:
                type: integer
                description: Unix epoch when the resource was last created.
                example: 1422386534
              updated_at:
                type: integer
                description: |
                  Unix epoch when the resource was last updated.
                example: 1422386534
              tags:
                type: array
                description: |
                  The name to associate with the given key-set.
                items:
                  type: string
              next:
                type: string
                description: >
                  Offset is used to paginate through the API. Provide this value
                  to the next list operation to fetch the next page
                example: >-
                  http://localhost:8001/key-sets?offset=6378122c-a0a1-438d-a5c6-efabae9fb969
          examples:
            example:
              value:
                id: 4D0DBDA-671C-11ED-BA0B-EF1DCCD3725F
                name: my-key_set
                created_at: 1422386534
                updated_at: 1422386534
                tags:
                  - string
                next: >-
                  http://localhost:8001/key-sets?offset=6378122c-a0a1-438d-a5c6-efabae9fb969
    service-response:
      description: >-
        The service response object is returned when creating a new service or
        retreiving an existing service.
      content:
        application/json:
          schema:
            type: object
            x-examples:
              Example 1:
                connect_timeout: 6000
                created_at: 1684437851
                enabled: true
                host: example.com
                id: ebf4e826-b17a-4e23-9d58-2621c9faa135
                name: my-service
                path: /some_api
                port: 80
                protocol: http
                read_timeout: 6000
                retries: 5
                updated_at: 1684437851
                write_timeout: 6000
            properties:
              connect_timeout:
                type: integer
              created_at:
                type: integer
                description: Unix epoch when the resource was last created.
              enabled:
                type: boolean
                description: Service enabled boolean
              host:
                type: string
              id:
                type: string
              name:
                type: string
              path:
                type: string
              port:
                type: integer
              protocol:
                type: string
              read_timeout:
                type: integer
              retries:
                type: integer
              updated_at:
                type: integer
              write_timeout:
                type: integer
          examples:
            Returned Service:
              value:
                connect_timeout: 0
                created_at: 0
                enabled: true
                host: string
                id: string
                name: string
                path: string
                port: 0
                protocol: string
                read_timeout: 0
                retries: 0
                updated_at: 0
                write_timeout: 0
    certificate_response:
      description: >-
        A certificate object represents a public certificate. These fields are
        _referenceable_.
      content:
        application/json:
          schema:
            type: object
            x-examples:
              Example 1:
                data:
                  - cert: >-
                      -----BEGIN CERTIFICATE-----

                      MIIDgzCCAmugAwIBAgIEV6GD9DANBgkqhkiG9w0BAQsFADBbMScwJQYDVQQDDB5SZWdlcnkgU2Vs

                      Zi1TaWduZWQgQ2VydGlmaWNhdGUxIzAhBgNVBAoMGlJlZ2VyeSwgaHR0cHM6Ly9yZWdlcnkuY29t

                      MQswCQYDVQQGEwJVQTAgFw0yMzA1MjUwMDAwMDBaGA8yMTIzMDUyNTE0MTAxOFowRTERMA8GA1UE

                      AwwIYXNkYXNkYXMxIzAhBgNVBAoMGlJlZ2VyeSwgaHR0cHM6Ly9yZWdlcnkuY29tMQswCQYDVQQG

                      EwJVQTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAKodSp1dIdaK6BVj90gAWZFH5AcQ

                      HY/oRtmheZNWY+9kY3VtuIWVzhxuP3y+ZG5j/TuzDpIoH/aUfinwoQwDSgbhCrG7wbQhoihJQKU1

                      XUjodI8aayQdSiHkE6Q1DXAPnFVOWXmSSA0djRyvNH9ixqjNTBcibt0bCiV9iOt2t/QajEGdF6ia

                      Yf9kjLkxQ/4XWkNgwPhL4aSOOObrdT4pVphHBogfvIwtBL4fI8ZI2qojYtfJM8f/kMdScvN7aZ8r

                      0QKzapelJjFsMTIPOHmPg7HcKVjvpuVGCO9vAso/PURD+g6nXBxsrmQqkCe8Y/41tBJ5GF97+is4

                      oDuyQBjY2f8CAwEAAaNjMGEwDwYDVR0TAQH/BAUwAwEB/zAOBgNVHQ8BAf8EBAMCAYYwHQYDVR0O

                      BBYEFJgYiJ7UCq9XaLE9Y0vYfHBVWlLlMB8GA1UdIwQYMBaAFJgYiJ7UCq9XaLE9Y0vYfHBVWlLl

                      MA0GCSqGSIb3DQEBCwUAA4IBAQBMD8wnPXCYCxImu5+3fotKnmen4FnL1zd9E1nHFZbGvImsgUFz

                      kfK3KTNrihkqVSrSoP02mUvDVUDZDUU9Lwd9DzUsRT9QdoSnSKdcS5b31Dk8D8evR2zpYWBwJvaZ

                      rm3e3z/9zUXxo5W4Y8N4HL90HqTwA0L2KzPZoc3LaQTpbcPQy5C6BbPZ3eSJH4h7fX8V+korNDnN

                      u+y5qfAXs6YNPozsQeFKgIB673+nI+cC/Y5toDQbFA6ibcXLMszlsJVN+Ko1QalcgwZjX7jG1TbA

                      yrN1eYw5JwCJPLR5vXt+6qlQ0dHcAqlzb7VTiumzLPz72Z3atsfhJNpSQ3cvM+p7

                      -----END CERTIFICATE-----
                    created_at: 1685023857
                    id: e94215b0-9198-42ce-bf0b-98afff31b2a7
                    key: >-
                      -----BEGIN RSA PRIVATE KEY-----

                      MIIEpAIBAAKCAQEAqh1KnV0h1oroFWP3SABZkUfkBxAdj+hG2aF5k1Zj72RjdW24

                      hZXOHG4/fL5kbmP9O7MOkigf9pR+KfChDANKBuEKsbvBtCGiKElApTVdSOh0jxpr

                      JB1KIeQTpDUNcA+cVU5ZeZJIDR2NHK80f2LGqM1MFyJu3RsKJX2I63a39BqMQZ0X

                      qJph/2SMuTFD/hdaQ2DA+EvhpI445ut1PilWmEcGiB+8jC0Evh8jxkjaqiNi18kz

                      x/+Qx1Jy83tpnyvRArNql6UmMWwxMg84eY+DsdwpWO+m5UYI728Cyj89REP6Dqdc

                      HGyuZCqQJ7xj/jW0EnkYX3v6KzigO7JAGNjZ/wIDAQABAoIBAByut6f0zgHIhf0l

                      T8paFMAEKRRvySw8c8W6Di+jf1Ib0RE5oMUVTx1IEXhM+c4LGeV4+Vn3XfxLaUJV

                      CjJmU5L5Wr5A9BYVHaxBPZ8dck8aspx2Td5W+erg89baAxwD5c4UWc2/tlpPwz00

                      5VsdInXPt6am7Z5mMr3DftSEvdtwX+k2DQAHK+dpwe+w4P74ndmzWz9ljLlBi1Jq

                      To6xBtcpxAagLQccDV04Ml58pu81E4VY427pM9xg7RMb4bK18y4jm3YHUFNWy8dM

                      Hr38iPss8DDd1IGOPAkiim72ncun3adf97YGgdTM1odWJGFFydfWkDQadmmwhTYv

                      eBS2SXECgYEA4KtgbPsmy4G4VYuc4P0Zy/ZHPjEvhLx57h+mXUk1JZv6+Hp2F4Q9

                      eRt5D//Ca8wjDy1adr9OhZN66YS8U6Jg4scTselxpQc6RIclE6nSQpMEx5nzDFFc

                      PI3xmXJ3naoAXw1r3pkhyivrmZ5291qiIILVUDyQR/zK6bw/sILIi70CgYEAwdZR

                      psiZiaSCWArPQyzg5uLTbjvnB1qRAxluH6vwlowPYAK5FQnzDlEEVPPo3JdjAM8q

                      p4oLMYf3wJH8Ls8pOXqHRBBpwSNbmZZMR7L7ac8ls88/8WCOnvDiA7Ibv/v9+u9+

                      sm1q3af9dguwL7ji9+5WudmOpMl9WmoGaMDeWmsCgYEArN3wUaplTUzAgsHrsYnN

                      YYxbgNTjlSRYRQqBPWHozMlZr/q6BpovmpGy8sZ91+e4SiNBagEE7+5sMmV5aniU

                      R6mZ09ilIq+O+89ojdqq96KbmOExi5bGe6lT7hePRfbaVkjDaQE2aJKmswqkyuon

                      uRAyBYy0D0/I6VN5Rd07ZZkCgYA3KSBPUCKxUsls+JaGzUyrJ713T0CtjQ5bTW9T

                      QADVNsJhViUJYa1zU4biDg8kR0h7QHko+FW7ILBWcrTLNVTL8JxxuCIAPmmgyW6n

                      sL1vHO3jv4S40fuEK5SF7LeM6M8cC++IIy8YKOguIaFf00NzvrWbadf3+QbdJfLw

                      +IHORQKBgQDOGcFOPRUV48emb6wkm45WYVMsBIsbiAwKbZ9uLdo108vK5x/nlE8Z

                      OXC1xqkec312HAzzjCUxKpSfTaIr1gV6YDGDEeHrYZrwsNo2Q6mBRbL/ZweDTegd

                      ggsmaDVo4kHoApfm7qi+BwCNnehxUR2FhBPs57vHZXYbQBr4unlWGA==

                      -----END RSA PRIVATE KEY-----
                    metadata:
                      expiry: '4840697418'
                      issuer: >-
                        CN=Regery Self-Signed Certificate,O=Regery\,
                        https://regery.com,C=UA
                      key_usages:
                        - KEY_USAGE_TYPE_DIGITAL_SIGNATURE
                        - KEY_USAGE_TYPE_KEY_CERT_SIGN
                        - KEY_USAGE_TYPE_CRL_SIGN
                        - KEY_USAGE_TYPE_ENCIPHER_ONLY
                      subject: CN=asdasdas,O=Regery\, https://regery.com,C=UA
                    tags:
                      - tag1
                    updated_at: 1685023857
            properties:
              data:
                type: array
                description: An array containing certificate information.
                items:
                  type: object
                  properties:
                    cert:
                      type: string
                      description: >-
                        PEM-encoded public certificate chain of the SSL key This
                        field is referenceable and can be stored in a vault
                      example: >-
                        -----BEGIN
                        CERTIFICATE-----\ncertificate-content\n-----END
                        CERTIFICATE-----
                    created_at:
                      type: integer
                      description: Unix epoch when the resource was created
                      example: 1422386534
                    id:
                      type: string
                      description: The UUID representation of the certificate object.
                      example: 7fca84d6-7d37-4a74-a7b0-93e576089a41
                    key:
                      type: string
                      description: >-
                        PEM-encoded private key of the SSL key pair. This field
                        is _referenceable_, which means it can be securely
                        stored as a
                        [secret](/gateway/latest/plan-and-deploy/security/secrets-management/getting-started)
                        in a vault. References must follow a [specific
                        format](/gateway/latest/plan-and-deploy/security/secrets-management/reference-format).
                      example: ' -----BEGIN RSA PRIVATE KEY-----...'
                    metadata:
                      type: object
                      description: metadata obtained from the certificate
                      properties:
                        expiry:
                          type: string
                          description: The expiration date of the certificate
                          example: '4840697418'
                        issuer:
                          type: string
                          description: Information about the certificate issuer
                          example: >-
                            CN=Example certificate name Self-Signed
                            Certificate,O=example\, https://example.com,C=UA
                        key_usages:
                          type: array
                          description: Key usage flags for the certificate
                          items:
                            type: string
                            example: KEY_USAGE_TYPE_KEY_CERT_SIGN
                          example:
                            - KEY_USAGE_TYPE_DIGITAL_SIGNATURE
                            - KEY_USAGE_TYPE_KEY_CERT_SIGN
                            - KEY_USAGE_TYPE_CRL_SIGN
                            - KEY_USAGE_TYPE_ENCIPHER_ONLY
                        subject:
                          type: string
                          description: Information about the certificate
                          example: CN=cert_name,O=Example\, https://example.com,C=UA
                    tags:
                      type: array
                      description: >-
                        An optional set of strings associated with the
                        Certificate for grouping and filtering
                      items:
                        type: string
                        example: high-level
                      example:
                        - high-level
                        - temporary
                    updated_at:
                      type: integer
                      description: Unix epoch when the resource was updated
                      example: 1422386534
    consumer-groups-response:
      description: Example response
      content:
        application/json:
          schema:
            type: object
            x-examples:
              Example 1:
                data:
                  - created_at: 1685551597
                    id: 0cf03a37-8987-4c3b-a792-5b1db3eeedc6
                    name: test
                    tags:
                      - tag1
                    updated_at: 1685551597
            properties:
              data:
                type: array
                items:
                  type: object
                  properties:
                    created_at:
                      type: integer
                      description: Unix epoch when the resource was created.
                      example: 1685551597
                    id:
                      type: string
                      description: Consumer group ID
                      example: 0cf03a37-8987-4c3b-a792-5b1db3eeedc6
                    name:
                      type: string
                      description: The name of the consumer group
                      example: example
                    tags:
                      type: array
                      description: >
                        An optional set of strings associated with the Consumer
                        for grouping and filtering.
                      items:
                        type: string
                    updated_at:
                      type: integer
                      description: >-
                        The unix epoc representation of when the consumer group
                        was updated.
                      example: 1685551597
          examples:
            Example consumer group response:
              value:
                data:
                  - created_at: 1685551597
                    id: 0cf03a37-8987-4c3b-a792-5b1db3eeedc6
                    name: test
                    tags:
                      - tag1
                    updated_at: 1685551597
        application/xml:
          schema:
            type: object
            properties: {}
    return-consumer-group:
      description: The response body returns a consumer group and the associated consumers.
      content:
        application/json:
          schema:
            type: object
            properties:
              consumer_group:
                type: object
                properties:
                  created_at:
                    type: integer
                    description: Unix epoch when the resource was created.
                    example: 1685551597
                  id:
                    type: string
                    example: 04fbeacf-a9f1-4a5d-ae4a-b0407445db3f
                    format: uuid
                  name:
                    type: string
                    description: The name of the consumer group
                    example: example
                  tags:
                    type: array
                    description: >
                      An optional set of strings associated with the Consumer
                      for grouping and filtering.
                    items:
                      type: string
                  updated_at:
                    type: integer
                    description: >-
                      The unix epoc representation of when the consumer group
                      was updated.
                    example: 1685551597
              consumers:
                type: array
                items:
                  type: object
                  properties:
                    created_at:
                      type: integer
                      description: Unix epoch when the resource was created.
                      example: 1685551597
                    custom_id:
                      type: string
                      description: A custom ID for the resource
                      nullable: true
                      example: null
                    id:
                      type: string
                      description: The UUID of the consumer
                      example: 0cf03a37-8987-4c3b-a792-5b1db3eeedc6
                    tags:
                      type: array
                      items:
                        type: string
                    updated_at:
                      type: integer
                      description: Unix epoch when the resource was updated.
                      example: 1685551597
                    username:
                      type: string
                      description: the username for the consumer
                      example: example-username
            x-examples:
              Example 1:
                consumer_group:
                  created_at: 1685551597
                  id: 0cf03a37-8987-4c3b-a792-5b1db3eeedc6
                  name: test
                  tags:
                    - tag1
                  updated_at: 1685551597
                consumers:
                  - created_at: 1685023220
                    custom_id: Example-custom-id
                    id: 28384076-31e3-4c27-bd76-7edc57434382
                    tags:
                      - string
                    updated_at: 1685023220
                    username: ExampleUsername
    get-dp-client-cert:
      description: Response body for retrieving a dp-client-certificate.
      content:
        application/json:
          schema:
            type: object
            properties:
              item:
                type: object
                properties:
                  id:
                    type: string
                    description: Unique ID of the certificate entity.
                  created_at:
                    type: integer
                    description: Date certificate was created.
                  updated_at:
                    type: integer
                    description: Date certificate was last updated.
                  cert:
                    type: string
                    description: JSON escaped string of the certificate.
    get-expected-config-hash:
      description: >-
        Response body for retrieving the expected config hash of the control
        plane.
      content:
        application/json:
          schema:
            type: object
            properties:
              expected_hash:
                type: string
                description: The expected configuration hash.
              created_at:
                type: integer
                description: Date the control plane configuration was created.
              updated_at:
                type: integer
                description: Date the control plane configuration was last updated.
    list-dp-client-certs:
      description: Example response
      content:
        application/json:
          schema:
            type: object
            properties:
              items:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      description: Unique ID of the certificate entity.
                    created_at:
                      type: integer
                      description: Date certificate was created.
                    updated_at:
                      type: integer
                      description: Date certificate was last updated.
                    cert:
                      type: string
                      description: JSON escaped string of the certificate.
              page:
                type: object
                properties:
                  total_count:
                    type: integer
    list-nodes:
      description: Example response
      content:
        application/json:
          schema:
            type: object
            properties:
              items:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                    version:
                      type: string
                    hostname:
                      type: string
                    last_ping:
                      type: integer
                    type:
                      type: string
                    created_at:
                      type: integer
                    updated_at:
                      type: integer
                    config_hash:
                      type: string
                    compatibility_status:
                      type: object
                      properties:
                        state:
                          type: string
              page:
                type: object
                properties:
                  total_count:
                    type: integer
    get-node:
      description: Example response
      content:
        application/json:
          schema:
            type: object
            properties:
              item:
                type: object
                properties:
                  id:
                    type: string
                  version:
                    type: string
                  hostname:
                    type: string
                  last_ping:
                    type: integer
                  type:
                    type: string
                  created_at:
                    type: integer
                  updated_at:
                    type: integer
                  config_hash:
                    type: string
                  compatibility_status:
                    type: object
                    properties:
                      state:
                        type: string
    list-plugin-schemas:
      description: A paginated list response for a collection of custom plugin schemas.
      content:
        application/json:
          schema:
            type: object
            properties:
              items:
                type: array
                items:
                  type: object
                  properties:
                    lua_schema:
                      type: string
                      description: The custom plugin schema; `jq -Rs '.' schema.lua`.
                      example: >-
                        return { name = \"myplugin\", fields = { { config = {
                        type = \"record\", fields = { } } } } }
                    name:
                      type: string
                      description: >-
                        The custom plugin name determined by the custom plugin
                        schema.
                      example: myplugin
                    created_at:
                      type: integer
                      description: >-
                        An ISO-8604 timestamp representation of custom plugin
                        schema creation date.
                      example: 1422386534
                    updated_at:
                      type: integer
                      description: >-
                        An ISO-8604 timestamp representation of custom plugin
                        schema update date.
                      example: 1422412345
              page:
                type: object
                properties:
                  total_count:
                    type: integer
    plugin-schemas:
      description: A response for a single custom plugin schema.
      content:
        application/json:
          schema:
            type: object
            properties:
              item:
                type: object
                properties:
                  lua_schema:
                    type: string
                    description: The custom plugin schema; `jq -Rs '.' schema.lua`.
                    example: >-
                      return { name = \"myplugin\", fields = { { config = { type
                      = \"record\", fields = { } } } } }
                  name:
                    type: string
                    description: >-
                      The custom plugin name determined by the custom plugin
                      schema.
                    example: myplugin
                  created_at:
                    type: integer
                    description: >-
                      An ISO-8604 timestamp representation of custom plugin
                      schema creation date.
                    example: 1422386534
                  updated_at:
                    type: integer
                    description: >-
                      An ISO-8604 timestamp representation of custom plugin
                      schema update date.
                    example: 1422412345
    BadRequest:
      description: Bad Request
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/BadRequestError'
    Unauthorized:
      description: Unauthorized
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/UnauthorizedError'
          examples:
            UnauthorizedExample:
              $ref: '#/components/examples/UnauthorizedExample'
    Forbidden:
      description: Forbidden
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ForbiddenError'
          examples:
            UnauthorizedExample:
              $ref: '#/components/examples/ForbiddenExample'
    Conflict:
      description: Conflict
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ConflictError'
    NotFound:
      description: Not Found
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/NotFoundError'
          examples:
            NotFoundExample:
              $ref: '#/components/examples/NotFoundExample'
  securitySchemes:
    konnectAccessToken:
      type: http
      scheme: bearer
      description: >-
        The Konnect access token is meant to be used by the Konnect dashboard
        and the decK CLI to

        authenticate with.
    personalAccessToken:
      type: http
      scheme: bearer
      description: >-
        The personal access token is meant to be used as an alternative to
        basic-auth when accessing Konnect via APIs. You can generate a Personal
        Access Token (PAT) from the personal access token page in the Konnect
        dashboard.
  examples:
    UnauthorizedExample:
      value:
        status: 401
        title: Unauthorized
        instance: kong:trace:8347343766220159418
        detail: Unauthorized
    ForbiddenExample:
      value:
        status: 403
        title: Forbidden
        instance: kong:trace:2723154947768991354
        detail: You do not have permission to perform this action
    NotFoundExample:
      value:
        status: 404
        title: Not Found
        instance: kong:trace:6816496025408232265
        detail: Not Found
x-internal: false

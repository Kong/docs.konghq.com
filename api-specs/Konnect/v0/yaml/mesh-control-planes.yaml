openapi: 3.0.3
info:
  title: Konnect Mesh Control Plane manager
  description: Control Plane manager API
  version: 0.0.1
  contact:
    name: Kong
    url: https://konghq.com
servers:
  - url: https://us.api.konghq.com/v1
    description: US Public API
  - url: https://eu.api.konghq.com/v1
    description: EU Public API
  - url: https://au.api.konghq.com/v1
    description: AU Public API
security:
  - personalAccessToken: []
  - systemAccountAccessToken: []
tags:
  - name: Mesh
paths:
  /mesh/control-planes:
    get:
      summary: List Control Planes
      responses:
        '200':
          $ref: '#/components/responses/ListMeshControlPlanesResponse'
        '401':
          $ref: '#/components/responses/MeshControlPlaneUnauthorizedError'
        '403':
          $ref: '#/components/responses/MeshControlPlaneForbiddenError'
      operationId: list-mesh-control-planes
      description: Returns an array of control planes objects.
      tags:
        - Mesh
    post:
      summary: Create a new control plane
      description: Create a new control plane
      operationId: create-cp
      tags:
        - Mesh
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateMeshControlPlaneRequest'
            examples:
              Example Request Body:
                $ref: '#/components/examples/CreateMeshControlPlaneRequestExample'
      responses:
        '201':
          $ref: '#/components/responses/CreateMeshControlPlaneResponse'
        '400':
          $ref: '#/components/responses/CreateMeshControlPlaneValidationError'
        '401':
          $ref: '#/components/responses/MeshControlPlaneUnauthorizedError'
        '403':
          $ref: '#/components/responses/MeshControlPlaneForbiddenError'
  /mesh/control-planes/{cpId}:
    parameters:
      - name: cpId
        in: path
        required: true
        description: Id of the Konnect resource
        example: bf138ba2-c9b1-4229-b268-04d9d8a6410b
        schema:
          type: string
          format: uuid
    get:
      summary: Get the control plane
      description: Get the control plane
      operationId: get-mesh-control-plane
      tags:
        - Mesh
      responses:
        '200':
          $ref: '#/components/responses/RetrieveMeshControlPlaneResponse'
        '401':
          $ref: '#/components/responses/MeshControlPlaneUnauthorizedError'
        '403':
          $ref: '#/components/responses/MeshControlPlaneForbiddenError'
        '404':
          $ref: '#/components/responses/MeshControlPlaneNotFoundError'
    delete:
      summary: Delete the control plane
      description: Delete the control plane
      operationId: delete-mesh-control-plane
      tags:
        - Mesh
      responses:
        '204':
          description: No Content
        '401':
          $ref: '#/components/responses/MeshControlPlaneUnauthorizedError'
        '403':
          $ref: '#/components/responses/MeshControlPlaneForbiddenError'
        '404':
          $ref: '#/components/responses/MeshControlPlaneNotFoundError'
    patch:
      summary: Update control plane
      operationId: update-mesh-control-plane
      tags:
        - Mesh
      responses:
        '200':
          $ref: '#/components/responses/UpdateMeshControlPlaneResponse'
        '400':
          $ref: '#/components/responses/UpdateMeshControlPlaneValidationError'
        '401':
          $ref: '#/components/responses/MeshControlPlaneUnauthorizedError'
        '403':
          $ref: '#/components/responses/MeshControlPlaneForbiddenError'
        '404':
          $ref: '#/components/responses/MeshControlPlaneNotFoundError'
      description: Update an individual control plane.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateMeshControlPlaneRequest'
            examples:
              Example Request Body:
                $ref: '#/components/examples/UpdateMeshControlPlaneRequestExample'
components:
  securitySchemes:
    personalAccessToken:
      type: http
      scheme: bearer
      bearerFormat: Token
      description: >
        The personal access token is meant to be used as an alternative to
        basic-auth when accessing Konnect via APIs.

        You can generate a Personal Access Token (PAT) from the [personal access
        token page](https://cloud.konghq.com/global/tokens/) in the Konnect
        dashboard.

        The PAT token must be passed in the header of a request, for example:

        `curl -X GET 'https://global.api.konghq.com/v2/users/' --header
        'Authorization: Bearer kpat_xgfT...'`
    systemAccountAccessToken:
      type: http
      scheme: bearer
      bearerFormat: Token
      description: >
        The system account access token is meant for automations and
        integrations that are not directly associated with a human identity.

        You can generate a system account Access Token by creating a system
        account and then obtaining a system account access token for that
        account.

        The access token must be passed in the header of a request, for example:

        `curl -X GET 'https://global.api.konghq.com/v2/users/' --header
        'Authorization: Bearer spat_i2Ej...'`
  schemas:
    MeshControlPlaneLabels:
      title: Labels
      type: object
      nullable: true
      example:
        test: 'true'
      description: >-
        Labels to facilitate tagged search on control planes. Keys must be of
        length 1-63 characters.
      maxProperties: 10
      additionalProperties:
        type: string
        pattern: ^[a-z0-9A-Z]{1}([a-z0-9A-Z\-\.\_]*[a-z0-9A-Z]+)?$
        minLength: 1
        maxLength: 63
        nullable: true
    MeshControlPlane:
      type: object
      title: ControlPlane
      description: a control plane
      required:
        - id
        - name
        - updated_at
        - created_at
      properties:
        id:
          type: string
          format: uuid
          description: ID of the control plane.
          example: d32d905a-ed33-46a3-a093-d8f536af9a8a
          readOnly: true
        name:
          type: string
          example: Test control plane
          description: The name of the control plane.
        description:
          type: string
          example: A control plane to handle traffic on development environment.
        labels:
          $ref: '#/components/schemas/MeshControlPlaneLabels'
        created_at:
          type: string
          format: date-time
          example: '2023-01-11T02:30:42.227Z'
        updated_at:
          type: string
          format: date-time
          example: '2023-01-11T02:30:42.227Z'
    CreateMeshControlPlaneRequest:
      type: object
      title: CreateMeshControlPlaneRequest
      description: a payload to create a control plane
      required:
        - name
      additionalProperties: false
      properties:
        name:
          type: string
          example: Test control plane
          description: The name of the control plane.
          minLength: 1
        description:
          type: string
          example: A control plane to handle traffic on development environment.
        labels:
          $ref: '#/components/schemas/MeshControlPlaneLabels'
    UpdateMeshControlPlaneRequest:
      type: object
      title: UpdateMeshControlPlaneRequest
      description: a payload to update the control plane
      properties:
        name:
          type: string
          example: Test control plane
          description: The name of the control plane.
        description:
          type: string
          example: A control plane to handle traffic on development environment.
        labels:
          $ref: '#/components/schemas/MeshControlPlaneLabels'
    PageMeta:
      type: object
      description: >-
        Contains pagination query parameters and the total number of objects
        returned.
      required:
        - number
        - size
        - total
      properties:
        number:
          type: number
          example: 1
        size:
          type: number
          example: 10
        total:
          type: number
          example: 100
    PaginatedMeta:
      type: object
      title: PaginatedMeta
      description: returns the pagination information
      properties:
        page:
          $ref: '#/components/schemas/PageMeta'
      required:
        - page
    BaseError:
      type: object
      title: Error
      description: standard error
      required:
        - status
        - title
        - instance
        - detail
      properties:
        status:
          type: integer
          description: >
            The HTTP status code of the error. Useful when passing the response

            body to child properties in a frontend UI. Must be returned as an
            integer.
          readOnly: true
        title:
          type: string
          description: |
            A short, human-readable summary of the problem. It should not
            change between occurences of a problem, except for localization.
            Should be provided as "Sentence case" for direct use in the UI.
          readOnly: true
        type:
          type: string
          description: The error type.
          readOnly: true
        instance:
          type: string
          description: |
            Used to return the correlation ID back to the user, in the format
            kong:trace:<correlation_id>. This helps us find the relevant logs
            when a customer reports an issue.
          readOnly: true
        detail:
          type: string
          description: >
            A human readable explanation specific to this occurence of the
            problem.

            This field may contain request/entity data to help the user
            understand

            what went wrong. Enclose variable values in square brackets. Should
            be

            provided as "Sentence case" for direct use in the UI.
          readOnly: true
    UnauthorizedError:
      type: object
      properties:
        status:
          example: 401
        title:
          example: Unauthorized
        type:
          example: https://httpstatuses.com/401
        instance:
          example: kong:trace:1234567890
        detail:
          example: Invalid credentials
      allOf:
        - $ref: '#/components/schemas/BaseError'
    ForbiddenError:
      type: object
      properties:
        status:
          example: 403
        title:
          example: Forbidden
        type:
          example: https://httpstatuses.com/403
        instance:
          example: kong:trace:1234567890
        detail:
          example: Forbidden
      allOf:
        - $ref: '#/components/schemas/BaseError'
    InvalidRules:
      description: invalid parameters rules
      type: string
      readOnly: true
      nullable: true
      enum:
        - required
        - enum
        - min_length
        - max_length
        - min_digits
        - min_lowercase
        - min_uppercase
        - min_symbols
        - is_array
        - is_base64
        - is_boolean
        - is_date_time
        - is_integer
        - is_null
        - is_number
        - is_object
        - is_string
        - is_uuid
        - unknown_property
        - is_label
        - matches_regex
    InvalidParameterChoiceItem:
      type: object
      properties:
        field:
          type: string
          example: name
          readOnly: true
        rule:
          $ref: '#/components/schemas/InvalidRules'
        reason:
          type: string
          example: is a required field
          readOnly: true
        choices:
          type: array
          uniqueItems: true
          nullable: true
          items: {}
          readOnly: true
      required:
        - field
        - reason
    InvalidParameterDependentItem:
      type: object
      properties:
        field:
          type: string
          example: name
          readOnly: true
        rule:
          description: invalid parameters rules
          type: string
          readOnly: true
          nullable: true
          enum:
            - dependent_fields
        reason:
          type: string
          example: is a required field
          readOnly: true
        dependents:
          type: array
          uniqueItems: true
          nullable: true
          items: {}
          readOnly: true
      required:
        - field
        - rule
        - reason
        - dependents
    InvalidParameters:
      type: array
      nullable: false
      uniqueItems: true
      minItems: 1
      description: invalid parameters
      items:
        oneOf:
          - $ref: '#/components/schemas/InvalidParameterChoiceItem'
          - $ref: '#/components/schemas/InvalidParameterDependentItem'
    BadRequestError:
      type: object
      required:
        - invalid_parameters
      properties:
        status:
          example: 400
        title:
          example: Bad Request
        type:
          example: https://httpstatuses.com/400
        instance:
          example: kong:trace:1234567890
        detail:
          example: Invalid request body
        invalid_parameters:
          $ref: '#/components/schemas/InvalidParameters'
      allOf:
        - $ref: '#/components/schemas/BaseError'
    NotFoundError:
      type: object
      properties:
        status:
          example: 404
        title:
          example: Not Found
        type:
          example: https://httpstatuses.com/404
        instance:
          example: kong:trace:1234567890
        detail:
          example: Not found
      allOf:
        - $ref: '#/components/schemas/BaseError'
  responses:
    RetrieveMeshControlPlaneResponse:
      description: A response to creating a control plane.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MeshControlPlane'
          examples:
            Single control plane response:
              $ref: '#/components/examples/ControlPlaneExample'
    CreateMeshControlPlaneResponse:
      description: A response to creating a control plane.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MeshControlPlane'
          examples:
            Create Control Plane Response:
              $ref: '#/components/examples/ControlPlaneExample'
    CreateMeshControlPlaneValidationError:
      description: Validation Error
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/BadRequestError'
          examples:
            Missing Field:
              value:
                status: 400
                type: https://kongapi.info/konnect/bad-request
                title: Bad Request
                instance: konnect:trace:6480643114111646299
                detail: ''
                invalid_parameters:
                  - field: name
                    reason: property "name" is missing
                    source: ''
            Empty Field:
              value:
                status: 400
                type: https://kongapi.info/konnect/bad-request
                title: Bad Request
                instance: konnect:trace:6480643114111646299
                detail: ''
                invalid_parameters:
                  - field: name
                    reason: Value is not nullable
                    source: ''
    UpdateMeshControlPlaneValidationError:
      description: Validation Error
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/BadRequestError'
          examples:
            Empty Field:
              value:
                status: 400
                title: Bad Request
                type: https://kongapi.info/konnect/bad-request
                instance: konnect:trace:6480643114111646299
                detail: ''
                invalid_parameters:
                  - field: name
                    reason: Value is not nullable
                    source: ''
    MeshControlPlaneForbiddenError:
      description: Permission denied
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ForbiddenError'
          examples:
            Invalid token:
              value:
                status: 403
                type: https://kongapi.info/konnect/unauthorized
                title: Forbidden
                instance: konnect:trace:881615734723181661
                detail: Permission denied
    MeshControlPlaneUnauthorizedError:
      description: Unauthorized Error
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/UnauthorizedError'
          examples:
            Invalid token:
              value:
                status: 401
                type: https://kongapi.info/konnect/unauthenticated
                title: Unauthenticated
                instance: konnect:trace:4497422055499297627
                detail: A valid token is required
    MeshControlPlaneNotFoundError:
      description: Not found
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/NotFoundError'
          examples:
            Invalid token:
              value:
                status: 404
                type: https://kongapi.info/konnect/not-found
                title: Not Found
                instance: konnect:trace:369660938739689085
                detail: The requested requested entity was not found was not found
    UpdateMeshControlPlaneResponse:
      description: A response to updating a control plane.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MeshControlPlane'
          examples:
            Update Control Plane Response:
              $ref: '#/components/examples/ControlPlaneExample'
    ListMeshControlPlanesResponse:
      description: A paginated list response for a collection of control planes.
      content:
        application/json:
          schema:
            title: ListMeshControlPlanesResponse
            type: object
            properties:
              meta:
                $ref: '#/components/schemas/PaginatedMeta'
              data:
                type: array
                items:
                  $ref: '#/components/schemas/MeshControlPlane'
          examples:
            Control Plane Collection:
              value:
                meta:
                  page:
                    size: 1
                    total: 10
                    number: 3
                data:
                  - id: 7f9fd312-a987-4628-b4c5-bb4f4fddd5f7
                    name: Test Control Plane
                    description: A test control plane for exploration.
                    labels:
                      test: 'true'
                    created_at: '2022-11-04T20:10:06.927Z'
                    updated_at: '2022-11-04T20:10:06.927Z'
  examples:
    ControlPlaneExample:
      value:
        id: 7f9fd312-a987-4628-b4c5-bb4f4fddd5f7
        name: Test Control Plane
        description: A test control plane for exploration.
        labels:
          test: 'true'
        created_at: '2022-11-04T20:10:06.927Z'
        updated_at: '2022-11-04T20:10:06.927Z'
    CreateMeshControlPlaneRequestExample:
      value:
        name: Test Control Plane
        description: A test control plane for exploration.
        labels:
          test: 'true'
    UpdateMeshControlPlaneRequestExample:
      value:
        name: Test Control Plane
        description: A test control plane for exploration.
        labels:
          test: 'true'

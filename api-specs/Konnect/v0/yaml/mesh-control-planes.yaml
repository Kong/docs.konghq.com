openapi: 3.0.3
info:
  title: Konnect Mesh Control Plane manager
  description: Control Plane manager API
  version: 0.0.1
  contact:
    name: Kong
    url: 'https://konghq.com'
servers:
  - url: 'https://us.api.konghq.com/v1'
    description: US Public API
  - url: 'https://eu.api.konghq.com/v1'
    description: EU Public API
  - url: 'https://au.api.konghq.com/v1'
    description: AU Public API
paths:
  /mesh/control-planes:
    get:
      operationId: list-mesh-control-planes
      summary: List Control Planes
      description: Returns an array of control planes objects.
      parameters:
        - $ref: '#/components/parameters/PageSize'
        - $ref: '#/components/parameters/PageNumber'
      responses:
        '200':
          $ref: '#/components/responses/ListMeshControlPlanesResponse'
        '401':
          $ref: '#/components/responses/MeshControlPlaneUnauthorizedError'
        '403':
          $ref: '#/components/responses/MeshControlPlaneForbiddenError'
      tags:
        - Mesh
    post:
      operationId: create-cp
      summary: Create a new control plane
      description: Create a new control plane
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateMeshControlPlaneRequest'
            examples:
              Example Request Body:
                $ref: '#/components/examples/CreateMeshControlPlaneRequestExample'
      responses:
        '201':
          $ref: '#/components/responses/CreateMeshControlPlaneResponse'
        '400':
          $ref: '#/components/responses/CreateMeshControlPlaneValidationError'
        '401':
          $ref: '#/components/responses/MeshControlPlaneUnauthorizedError'
        '403':
          $ref: '#/components/responses/MeshControlPlaneForbiddenError'
      tags:
        - Mesh
  '/mesh/control-planes/{cpId}':
    parameters:
      - name: cpId
        in: path
        description: Id of the Konnect resource
        required: true
        schema:
          type: string
          format: uuid
        example: bf138ba2-c9b1-4229-b268-04d9d8a6410b
    get:
      operationId: get-mesh-control-plane
      summary: Get the control plane
      description: Get the control plane
      responses:
        '200':
          $ref: '#/components/responses/RetrieveMeshControlPlaneResponse'
        '401':
          $ref: '#/components/responses/MeshControlPlaneUnauthorizedError'
        '403':
          $ref: '#/components/responses/MeshControlPlaneForbiddenError'
        '404':
          $ref: '#/components/responses/MeshControlPlaneNotFoundError'
      tags:
        - Mesh
    delete:
      operationId: delete-mesh-control-plane
      summary: Delete the control plane
      description: Delete the control plane
      responses:
        '204':
          description: No Content
        '401':
          $ref: '#/components/responses/MeshControlPlaneUnauthorizedError'
        '403':
          $ref: '#/components/responses/MeshControlPlaneForbiddenError'
        '404':
          $ref: '#/components/responses/MeshControlPlaneNotFoundError'
      tags:
        - Mesh
    patch:
      operationId: update-mesh-control-plane
      summary: Update control plane
      description: Update an individual control plane.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateMeshControlPlaneRequest'
            examples:
              Example Request Body:
                $ref: '#/components/examples/UpdateMeshControlPlaneRequestExample'
      responses:
        '200':
          $ref: '#/components/responses/UpdateMeshControlPlaneResponse'
        '400':
          $ref: '#/components/responses/UpdateMeshControlPlaneValidationError'
        '401':
          $ref: '#/components/responses/MeshControlPlaneUnauthorizedError'
        '403':
          $ref: '#/components/responses/MeshControlPlaneForbiddenError'
        '404':
          $ref: '#/components/responses/MeshControlPlaneNotFoundError'
      tags:
        - Mesh
components:
  parameters:
    PageNumber:
      name: 'page[number]'
      description: Determines which page of the entities to retrieve.
      required: false
      in: query
      allowEmptyValue: true
      schema:
        type: integer
        example: 1
    PageSize:
      name: 'page[size]'
      description: The maximum number of items to include per page. The last page of a collection may include fewer items.
      required: false
      in: query
      allowEmptyValue: true
      schema:
        type: integer
        example: 10
  schemas:
    MeshControlPlaneLabels:
      description: Labels to facilitate tagged search on control planes. Keys must be of length 1-63 characters.
      type: object
      example:
        test: 'true'
      additionalProperties:
        type: string
        pattern: '^[a-z0-9A-Z]{1}([a-z0-9A-Z\-\.\_]*[a-z0-9A-Z]+)?$'
        minLength: 1
        maxLength: 63
        nullable: true
      maxProperties: 10
      nullable: true
      title: Labels
    MeshControlPlane:
      description: a control plane
      type: object
      properties:
        id:
          description: ID of the control plane.
          type: string
          format: uuid
          example: d32d905a-ed33-46a3-a093-d8f536af9a8a
          readOnly: true
        name:
          description: The name of the control plane.
          type: string
          example: Test control plane
          maxLength: 100
        description:
          type: string
          example: A control plane to handle traffic on development environment.
          maxLength: 250
        labels:
          $ref: '#/components/schemas/MeshControlPlaneLabels'
        created_at:
          type: string
          format: date-time
          example: '2023-01-11T02:30:42.227Z'
        updated_at:
          type: string
          format: date-time
          example: '2023-01-11T02:30:42.227Z'
      required:
        - id
        - name
        - updated_at
        - created_at
      title: ControlPlane
    CreateMeshControlPlaneRequest:
      description: a payload to create a control plane
      type: object
      properties:
        name:
          description: The name of the control plane.
          type: string
          example: Test control plane
          maxLength: 100
          minLength: 1
        description:
          type: string
          example: A control plane to handle traffic on development environment.
          maxLength: 250
        labels:
          $ref: '#/components/schemas/MeshControlPlaneLabels'
      additionalProperties: false
      required:
        - name
      title: CreateMeshControlPlaneRequest
    UpdateMeshControlPlaneRequest:
      description: a payload to update the control plane
      type: object
      properties:
        name:
          description: The name of the control plane.
          type: string
          example: Test control plane
          maxLength: 100
        description:
          type: string
          example: A control plane to handle traffic on development environment.
          maxLength: 250
        labels:
          $ref: '#/components/schemas/MeshControlPlaneLabels'
      title: UpdateMeshControlPlaneRequest
    PageMeta:
      description: Contains pagination query parameters and the total number of objects returned.
      type: object
      properties:
        number:
          type: number
          example: 1
        size:
          type: number
          example: 10
        total:
          type: number
          example: 100
      required:
        - number
        - size
        - total
    PaginatedMeta:
      description: returns the pagination information
      type: object
      properties:
        page:
          $ref: '#/components/schemas/PageMeta'
      required:
        - page
      title: PaginatedMeta
    BaseError:
      description: standard error
      type: object
      properties:
        status:
          description: |
            The HTTP status code of the error. Useful when passing the response
            body to child properties in a frontend UI. Must be returned as an integer.
          type: integer
          readOnly: true
        title:
          description: |
            A short, human-readable summary of the problem. It should not
            change between occurences of a problem, except for localization.
            Should be provided as "Sentence case" for direct use in the UI.
          type: string
          readOnly: true
        type:
          description: The error type.
          type: string
          readOnly: true
        instance:
          description: |
            Used to return the correlation ID back to the user, in the format
            kong:trace:<correlation_id>. This helps us find the relevant logs
            when a customer reports an issue.
          type: string
          readOnly: true
        detail:
          description: |
            A human readable explanation specific to this occurence of the problem.
            This field may contain request/entity data to help the user understand
            what went wrong. Enclose variable values in square brackets. Should be
            provided as "Sentence case" for direct use in the UI.
          type: string
          readOnly: true
      required:
        - status
        - title
        - instance
        - detail
      title: Error
    UnauthorizedError:
      allOf:
        - $ref: '#/components/schemas/BaseError'
        - type: object
          properties:
            status:
              example: 401
            title:
              example: Unauthorized
            type:
              example: 'https://httpstatuses.com/401'
            instance:
              example: 'kong:trace:1234567890'
            detail:
              example: Invalid credentials
    ForbiddenError:
      allOf:
        - $ref: '#/components/schemas/BaseError'
        - type: object
          properties:
            status:
              example: 403
            title:
              example: Forbidden
            type:
              example: 'https://httpstatuses.com/403'
            instance:
              example: 'kong:trace:1234567890'
            detail:
              example: Forbidden
    InvalidRules:
      description: invalid parameters rules
      type: string
      enum:
        - required
        - max_length
        - is_array
        - is_base64
        - is_boolean
        - is_date_time
        - is_integer
        - is_null
        - is_number
        - is_object
        - is_string
        - is_uuid
        - is_fqdn
        - is_arn
        - unknown_property
        - is_label
        - matches_regex
        - invalid
        - is_supported_network_availability_zone_list
        - is_supported_network_cidr_block
        - is_supported_provider_region
      nullable: true
      readOnly: true
    InvalidParameterStandard:
      type: object
      properties:
        field:
          type: string
          example: name
          readOnly: true
        rule:
          $ref: '#/components/schemas/InvalidRules'
        source:
          type: string
          example: body
        reason:
          type: string
          example: is a required field
          readOnly: true
      additionalProperties: false
      required:
        - field
        - reason
    InvalidParameterMinimumLength:
      type: object
      properties:
        field:
          type: string
          example: name
          readOnly: true
        rule:
          description: invalid parameters rules
          type: string
          enum:
            - min_length
            - min_digits
            - min_lowercase
            - min_uppercase
            - min_symbols
          nullable: false
          readOnly: true
        minimum:
          type: integer
          example: 8
        source:
          type: string
          example: body
        reason:
          type: string
          example: is a required field
          readOnly: true
      additionalProperties: false
      required:
        - field
        - reason
        - rule
        - minimum
    InvalidParameterChoiceItem:
      type: object
      properties:
        field:
          type: string
          example: name
          readOnly: true
        rule:
          description: invalid parameters rules
          type: string
          enum:
            - enum
          nullable: false
          readOnly: true
        reason:
          type: string
          example: is a required field
          readOnly: true
        choices:
          type: array
          items: {}
          minItems: 1
          nullable: false
          readOnly: true
          uniqueItems: true
        source:
          type: string
          example: body
      additionalProperties: false
      required:
        - field
        - reason
        - rule
        - choices
    InvalidParameterDependentItem:
      type: object
      properties:
        field:
          type: string
          example: name
          readOnly: true
        rule:
          description: invalid parameters rules
          type: string
          enum:
            - dependent_fields
          nullable: true
          readOnly: true
        reason:
          type: string
          example: is a required field
          readOnly: true
        dependents:
          type: array
          items: {}
          nullable: true
          readOnly: true
          uniqueItems: true
        source:
          type: string
          example: body
      additionalProperties: false
      required:
        - field
        - rule
        - reason
        - dependents
    InvalidParameters:
      description: invalid parameters
      type: array
      items:
        oneOf:
          - $ref: '#/components/schemas/InvalidParameterStandard'
          - $ref: '#/components/schemas/InvalidParameterMinimumLength'
          - $ref: '#/components/schemas/InvalidParameterChoiceItem'
          - $ref: '#/components/schemas/InvalidParameterDependentItem'
      minItems: 1
      nullable: false
      uniqueItems: true
    BadRequestError:
      allOf:
        - $ref: '#/components/schemas/BaseError'
        - type: object
          required:
            - invalid_parameters
          properties:
            invalid_parameters:
              $ref: '#/components/schemas/InvalidParameters'
    NotFoundError:
      allOf:
        - $ref: '#/components/schemas/BaseError'
        - type: object
          properties:
            status:
              example: 404
            title:
              example: Not Found
            type:
              example: 'https://httpstatuses.com/404'
            instance:
              example: 'kong:trace:1234567890'
            detail:
              example: Not found
  examples:
    ControlPlaneExample:
      value:
        id: 7f9fd312-a987-4628-b4c5-bb4f4fddd5f7
        name: Test Control Plane
        description: A test control plane for exploration.
        labels:
          test: 'true'
        created_at: '2022-11-04T20:10:06.927Z'
        updated_at: '2022-11-04T20:10:06.927Z'
    CreateMeshControlPlaneRequestExample:
      value:
        name: Test Control Plane
        description: A test control plane for exploration.
        labels:
          test: 'true'
    UpdateMeshControlPlaneRequestExample:
      value:
        name: Test Control Plane
        description: A test control plane for exploration.
        labels:
          test: 'true'
  responses:
    RetrieveMeshControlPlaneResponse:
      description: A response to creating a control plane.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MeshControlPlane'
          examples:
            Single control plane response:
              $ref: '#/components/examples/ControlPlaneExample'
    CreateMeshControlPlaneResponse:
      description: A response to creating a control plane.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MeshControlPlane'
          examples:
            Create Control Plane Response:
              $ref: '#/components/examples/ControlPlaneExample'
    CreateMeshControlPlaneValidationError:
      description: Validation Error
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/BadRequestError'
          examples:
            Missing Field:
              value:
                status: 400
                type: 'https://kongapi.info/konnect/bad-request'
                title: Bad Request
                instance: 'konnect:trace:6480643114111646299'
                detail: ''
                invalid_parameters:
                  - field: name
                    reason: property "name" is missing
                    source: ''
            Empty Field:
              value:
                status: 400
                type: 'https://kongapi.info/konnect/bad-request'
                title: Bad Request
                instance: 'konnect:trace:6480643114111646299'
                detail: ''
                invalid_parameters:
                  - field: name
                    reason: Value is not nullable
                    source: ''
    UpdateMeshControlPlaneValidationError:
      description: Validation Error
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/BadRequestError'
          examples:
            Empty Field:
              value:
                status: 400
                title: Bad Request
                type: 'https://kongapi.info/konnect/bad-request'
                instance: 'konnect:trace:6480643114111646299'
                detail: ''
                invalid_parameters:
                  - field: name
                    reason: Value is not nullable
                    source: ''
    MeshControlPlaneForbiddenError:
      description: Permission denied
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ForbiddenError'
          examples:
            Invalid token:
              value:
                status: 403
                type: 'https://kongapi.info/konnect/unauthorized'
                title: Forbidden
                instance: 'konnect:trace:881615734723181661'
                detail: Permission denied
    MeshControlPlaneUnauthorizedError:
      description: Unauthorized Error
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/UnauthorizedError'
          examples:
            Invalid token:
              value:
                status: 401
                type: 'https://kongapi.info/konnect/unauthenticated'
                title: Unauthenticated
                instance: 'konnect:trace:4497422055499297627'
                detail: A valid token is required
    MeshControlPlaneNotFoundError:
      description: Not found
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/NotFoundError'
          examples:
            Invalid token:
              value:
                status: 404
                type: 'https://kongapi.info/konnect/not-found'
                title: Not Found
                instance: 'konnect:trace:369660938739689085'
                detail: The requested requested entity was not found was not found
    UpdateMeshControlPlaneResponse:
      description: A response to updating a control plane.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MeshControlPlane'
          examples:
            Update Control Plane Response:
              $ref: '#/components/examples/ControlPlaneExample'
    ListMeshControlPlanesResponse:
      description: A paginated list response for a collection of control planes.
      content:
        application/json:
          schema:
            type: object
            properties:
              meta:
                $ref: '#/components/schemas/PaginatedMeta'
              data:
                type: array
                items:
                  $ref: '#/components/schemas/MeshControlPlane'
            title: ListMeshControlPlanesResponse
          examples:
            Control Plane Collection:
              value:
                meta:
                  page:
                    size: 1
                    total: 10
                    number: 3
                data:
                  - id: 7f9fd312-a987-4628-b4c5-bb4f4fddd5f7
                    name: Test Control Plane
                    description: A test control plane for exploration.
                    labels:
                      test: 'true'
                    created_at: '2022-11-04T20:10:06.927Z'
                    updated_at: '2022-11-04T20:10:06.927Z'
  securitySchemes:
    personalAccessToken:
      type: http
      scheme: bearer
      bearerFormat: Token
      description: |
        The personal access token is meant to be used as an alternative to basic-auth when accessing Konnect via APIs.
        You can generate a Personal Access Token (PAT) from the [personal access token page](https://cloud.konghq.com/global/tokens/) in the Konnect dashboard.
        The PAT token must be passed in the header of a request, for example:
        `curl -X GET 'https://global.api.konghq.com/v2/users/' --header 'Authorization: Bearer kpat_xgfT...'`
    systemAccountAccessToken:
      type: http
      scheme: bearer
      bearerFormat: Token
      description: |
        The system account access token is meant for automations and integrations that are not directly associated with a human identity.
        You can generate a system account Access Token by creating a system account and then obtaining a system account access token for that account.
        The access token must be passed in the header of a request, for example:
        `curl -X GET 'https://global.api.konghq.com/v2/users/' --header 'Authorization: Bearer spat_i2Ej...'`
tags:
  - name: Mesh
security:
  - personalAccessToken: []
  - systemAccountAccessToken: []

overlay: 1.0.0
info:
  title: update description
  version: 0.0.1
actions:
- target: $.tags[0] #services
  update:
    description: |
      Service entities are abstractions of your microservice interfaces or formal APIs. For example, a service could be a data transformation microservice or a billing API.
      <br><br>
      The main attribute of a service is the destination URL for proxying traffic. This URL can be set as a single string or by specifying its protocol, host, port and path individually. 
      <br><br>
      Services are associated to routes, and a single service can have many routes associated with it. Routes are entrypoints in Kong Gateway which define rules to match client requests. Once a route is matched, Kong Gateway proxies the request to its associated service. See the [Proxy Reference](https://docs.konghq.com/gateway/latest/how-kong-works/routing-traffic/) for a detailed explanation of how Kong proxies traffic.
      <br><br>
      Services can be both [tagged and filtered by tags](https://docs.konghq.com/gateway/latest/admin-api/#tags).
- target: $.tags[1] #routes
  update:
    description: |
      Route entities define rules to match client requests. Each route is associated with a service, and a service may have multiple routes associated to it. Every request matching a given route will be proxied to the associated service. You need at least one matching rule that applies to the protocol being matched by the route.
      <br><br>
      The combination of routes and services, and the separation of concerns between them, offers a powerful routing mechanism with which it is possible to define fine-grained entrypoints in Kong Gateway leading to different upstream services of your infrastructure.
      <br><br>
      Depending on the protocol, one of the following attributes must be set:
      <br>
      * `http`: At least one of `methods`, `hosts`, `headers`, or `paths`
      * `https`:  At least one of `methods`, `hosts`, `headers`, `paths`, or `snis`
      *  `tcp`: At least one of `sources` or `destinations`
      * `tls`: at least one of `sources`, `destinations`, or `snis`
      * `tls_passthrough`: set `snis`
      * `grpc`: At least one of `hosts`, `headers`, or `paths`
      * `grpcs`: At least one of `hosts`, `headers`, `paths`, or `snis`
      * `ws`: At least one of `hosts`, `headers`, or `paths`
      * `wss`: At least one of `hosts`, `headers`, `paths`, or `snis` 
      <br>

      A route can't have both `tls` and `tls_passthrough` protocols at same time.
      <br><br>

      Learn more about the router: 
      * [Configure routes using expressions](https://docs.konghq.com/gateway/3.4.x/key-concepts/routes/expressions)
      * [Router Expressions language reference](https://docs.konghq.com/gateway/3.4.x/reference/router-expressions-language/)
- target: $.tags[2] #plugins
  update:
    description: |
      A plugin entity represents a plugin configuration that will be executed during the HTTP request/response lifecycle. Plugins let you add functionality to services that run behind a Kong Gateway instance, like authentication or rate limiting.
      You can find more information about available plugins and which values each plugin accepts at the [Plugin Hub](https://docs.konghq.com/hub/).
      <br><br>
      When adding a plugin configuration to a service, the plugin will run on every request made by a client to that service. If a plugin needs to be tuned to different values for some specific consumers, you can do so by creating a separate plugin instance that specifies both the service and the consumer, through the service and consumer fields.
      <br><br>
      Plugins can be both [tagged and filtered by tags](https://docs.konghq.com/gateway/latest/admin-api/#tags).
- target: $.tags[3] #consumers
  update:
    description: |
      The consumer object represents a consumer - or a user - of a service. 
      You can either rely on Kong Gateway as the primary datastore, or you can map the consumer list with your database to keep consistency between Kong Gateway and your existing primary datastore.
- target: $.tags[4] #certificates
  update:
    description: |
      A certificate object represents a public certificate, and can be optionally paired with the corresponding private key. These objects are used by Kong Gateway to handle SSL/TLS termination for encrypted requests, or for use as a trusted CA store when validating peer certificate of client/service. 
      <br><br>
      Certificates are optionally associated with SNI objects to tie a cert/key pair to one or more hostnames. 
      <br><br>
      If intermediate certificates are required in addition to the main certificate, they should be concatenated together into one string.
- target: $.tags[5] #SNIS
  update:
    description: |
      An SNI object represents a many-to-one mapping of hostnames to a certificate. 
      <br><br>
      A certificate object can have many hostnames associated with it. When Kong Gateway receives an SSL request, it uses the SNI field in the Client Hello to look up the certificate object based on the SNI associated with the certificate.
- target: $.tags[6] #CA Certificates
  update:
    description: |
      A CA certificate object represents a trusted certificate authority. 
      These objects are used by Kong Gateway to verify the validity of a client or server certificate.
- target: $.tags[7] #upstreams
  update:
    description: |
      The upstream object represents a virtual hostname and can be used to load balance incoming requests over multiple services (targets). 
      <br><br>
      An upstream also includes a [health checker](https://docs.konghq.com/gateway/latest/how-kong-works/health-checks/), which can enable and disable targets based on their ability or inability to serve requests. 
      The configuration for the health checker is stored in the upstream object, and applies to all of its targets.
- target: $.tags[8] #Vaults
  update:
    description: |
      Vault objects are used to configure different vault connectors for [managing secrets](https://docs.konghq.com/gateway/latest/kong-enterprise/secrets-management/). 
      Configuring a vault lets you reference secrets from other entities.
      This allows for a proper separation of secrets and configuration and prevents secret sprawl. 
      <br><br>
      For example, you could store a certificate and a key in a vault, then reference them from a certificate entity. This way, the certificate and key are not stored in the entity directly and are more secure.
      <br><br>
      Secrets rotation can be managed using [TTLs](https://docs.konghq.com/gateway/latest/kong-enterprise/secrets-management/advanced-usage/).
- target: $.tags[9] #keys
  update:
    description: |
      A key object holds a representation of asymmetric keys in various formats. When Kong Gateway or a Kong plugin requires a specific public or private key to perform certain operations, it can use this entity.
- target: $.tags[10] #key-sets
  update:
    description: |
       A JSON Web key set. Key sets are the preferred way to expose keys to plugins because they tell the plugin where to look for keys or have a scoping mechanism to restrict plugins to specific keys.
- target: $.tags[11] #Information
  update:
    description: |
     Information routes
- target: $.tags[12] #Debug
  update: 
    description: Debug Routes
- target: $.tags[13] #Tags
  update: 
    description: |
      Tags are strings associated to entities in Kong Gateway. Tags can contain almost all UTF-8 characters, with the following exceptions: `,`,`/`, and non-printable ASCII (for example, the space character). 
      <br><br>
      Most core entities can be tagged via the tags attribute upon creation or modification.
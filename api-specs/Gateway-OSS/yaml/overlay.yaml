overlay: 1.0.0
info:
  title: Add descriptions
  version: 0.1
actions:
- target: $.paths["/ca_certificates"].get
  update:
    description: Retrieve a list of all available Certificate Authority (CA) certificates,
      including the certificate ID, creation date, and other details. You can use
      query parameters to filter the results by size or tags, for example `/ca-certificates?size=50&tags=enterprise`.
- target: $.paths["/ca_certificates/{ca_certificate_id}"].delete
  update:
    description: Delete the specified Certificate Authority (CA) certificate using
      the provided ca_certificate_id.
- target: $.paths["/ca_certificates/{ca_certificate_id}"].get
  update:
    description: Retrieve details about the specified Certificate Authority (CA) certificate
      using the provided path parameter `ca_certificate_id`.
- target: $.paths["/ca_certificates/{ca_certificate_id}"].patch
  update:
    description: "Update the specified Certificate Authority (CA) certificate using\
      \ the provided ca_certificate_id. Use this endpoint to modify an existing CA\
      \ certificate in the system. The request body should include the fields of the\
      \ CA certificate that need to be updated. \n\n> This API is not available in\
      \ DB-less mode."
- target: $.paths["/ca_certificates/{ca_certificate_id}"].put
  update:
    description: Create or Update a CA Certificate using the provided path parameter
      `ca_certificate_id`.
- target: $.paths["/certificates"].get
  update:
    description: Retrieve a list of all available CA Certificate Authority (CA) certificates.
      You can use query parameters to filter the results by size or tags, for example
      `/certificates?size=50&tags=enterprise`.
- target: $.paths["/certificates/{certificate_id}"].delete
  update:
    description: 'Delete a Certificate


      >Note: This API is not available in DB-less mode.


      '
- target: $.paths["/certificates/{certificate_id}"].get
  update:
    description: Retrieve details about the specified certificate using the provided
      path parameter `certificate_id`.
- target: $.paths["/certificates/{certificate_id}"].patch
  update:
    description: 'Update a Certificate


      Inserts (or replaces) the certificate under the requested `certificate_id`with
      the definition specified in the request body. When the `name` or `id` attribute
      has the structure of a UUID, the certificate being inserted/replaced will be
      identified by its `id`. Otherwise it will be identified by the `name`.


      When creating a new Certificate without specifying `id` (neither in the path
      or the request body), then it will be auto-generated.


      >Note: This API is not available in DB-less mode.'
- target: $.paths["/certificates/{certificate_id}"].put
  update:
    description: 'Update details about the specified certificate using the provided
      path parameter `certificate_id`.


      Inserts (or replaces) the certificate under the requested `certificate_id`with
      the definition specified in the request body. When the `name` or `id` attribute
      has the structure of a UUID, the certificate being inserted/replaced will be
      identified by its `id`. Otherwise it will be identified by the `name`.


      When creating a new Certificate without specifying `id` (neither in the path
      or the request body), then it will be auto-generated.




      > Note: This API is not available in DB-less mode.


      '
- target: $.paths["/certificates/{certificate_name_or_id}/snis"].get
  update:
    description: Retrieve a paginated list of all SNIs associated with a certificate.
      Use this endpoint to retrieve a list of SNIs that are linked to a specific certificate.
      You can use the optional query parameters to filter the results based on specific
      criteria. The response will include the list of SNIs and pagination information.
      See the response schema for details on the expected format of the response body.
- target: $.paths["/certificates/{certificate_id}/snis/{sni_name_or_id}"].delete
  update:
    description: 'Delete a an SNI associated with a Certificate using ID or name.

      '
- target: $.paths["/certificates/{certificate_id}/snis/{sni_name_or_id}"].get
  update:
    description: Get an SNI associated with a Certificate using ID or name.
- target: $.paths["/certificates/{certificate_id}/snis/{sni_name_or_id}"].patch
  update:
    description: " Update an existing SNI associated with a certificate in the system\
      \ using the SNI ID or name. The request body should include the fields of the\
      \ SNI that need to be updated, such as the name, description, or other properties.\
      \ If the request body contains valid data, the endpoint will update the SNI\
      \ and return a success response. \n \n\n"
- target: $.paths["/certificates/{certificate_id}/snis/{sni_name_or_id}"].put
  update:
    description: 'Create or Update an SNI associated with a Certificate using ID or
      name.


      Inserts (or replaces) the SNI under the requested resource with the definition
      specified in the body. The SNI will be identified via the name or id attribute.


      When the name or id attribute has the structure of a UUID, the SNI being inserted/replaced
      will be identified by its id. Otherwise it will be identified by its name.


      When creating a new SNI without specifying id (neither in the URL nor in the
      body), then it will be auto-generated.

      '
- target: $.paths["/consumers"].get
  update:
    description: Retrieve a list of all consumers.You can use query parameters to
      filter the results by size or tags, for example `/consumers?size=50&tags=enterprise`.
- target: $.paths["/consumers/{consumer_username_or_id}"].delete
  update:
    description: Delete a specific consumer from the system using either the consumer
      ID or the consumer username. This operation is irreversible and permanently
      removes all data associated with the specified consumer. If the consumer was
      deleted succesfully the endpoint will return a 204 response indicating that
      the resource did not exist.
- target: $.paths["/consumers/{consumer_username_or_id}"].get
  update:
    description: Retrieve the details of a specific consumer in the system using either
      the consumer ID or the consumer username. If the consumer with the specified
      ID or username cannot be found, the endpoint will return a 404.
- target: $.paths["/consumers/{consumer_username_or_id}"].patch
  update:
    description: Update the details of a specific consumer in the system using either
      the consumer ID or the consumer username.If the consumer with the specified
      ID or username cannot be found, the endpoint will return a 404.
- target: $.paths["/consumers/{consumer_username_or_id}"].put
  update:
    description: "Create or Update Consumer using ID or username. The consumer will\
      \ be identified via the username or id attribute.If the consumer with the specified\
      \ ID or username cannot be found, the endpoint will return a 404. \n\nWhen the\
      \ username or id attribute has the structure of a UUID, the Consumer being inserted/replaced\
      \ will be identified by its id. Otherwise it will be identified by its username.\n\
      \nWhen creating a new Consumer without specifying id (neither in the URL nor\
      \ in the body), then it will be auto-generated.\n\nNotice that specifying a\
      \ username in the URL and a different one in the request body is not allowed.\n\
      \n> Note: This API is not available in DB-less mode."
- target: $.paths["/consumers/{consumer_username_or_id}/plugins"].get
  update:
    description: 'Retrieve a list of all plugins associated with a consumer. '
- target: $.paths["/consumers/{consumer_username_or_id}/plugins/{plugin_id}"].delete
  update:
    description: Delete a Plugin associated with a Consumer using ID.
- target: $.paths["/consumers/{consumer_username_or_id}/plugins/{plugin_id}"].get
  update:
    description: Get a Plugin associated with a Consumer using ID.
- target: $.paths["/consumers/{consumer_username_or_id}/plugins/{plugin_id}"].patch
  update:
    description: Update a Plugin associated with a consumer using the consumer username
      or ID.
- target: $.paths["/consumers/{consumer_username_or_id}/plugins/{plugin_id}"].put
  update:
    description: Create or Update a Plugin associated with a Consumer using ID.
- target: $.paths["/key-sets"].get
  update:
    description: 'Retrieve a list of all Key-sets in the system. A Key Set object
      holds a collection of asymmetric key objects. This entity allows to logically
      group keys by their purpose. Key Sets can be both tagged and filtered by tags.


      '
- target: $.paths["/key-sets/{key-set_id_or_name}"].delete
  update:
    description: 'Delete a Key-set


      > Note: This API is not available in DB-less mode.'
- target: $.paths["/key-sets/{key-set_id_or_name}"].get
  update:
    description: This endpoint retrieves information about a specific key-set based
      on its ID or name.
- target: $.paths["/key-sets/{key-set_id_or_name}"].patch
  update:
    description: 'Update a Key-set using ID or name.


      > Note: This API is not available in DB-less mode.


      Inserts (or replaces) the Key Set under the requested resource with the definition
      specified in the body. The Key Set will be identified via the name or id attribute.


      When the name or id attribute has the structure of a UUID, the Key Set being
      inserted/replaced will be identified by its id. Otherwise it will be identified
      by its name.


      When creating a new Key Set without specifying id (neither in the URL nor in
      the body), then it will be auto-generated.


      Notice that specifying a name in the URL and a different one in the request
      body is not allowed.'
- target: $.paths["/key-sets/{key-set_id_or_name}"].put
  update:
    description: 'Update a Key-set using ID or name.


      > Note: This API is not available in DB-less mode.'
- target: $.paths["/keys"].get
  update:
    description: List all Keys
- target: $.paths["/keys/{key_id_or_name}"].delete
  update:
    description: Delete a Key
- target: $.paths["/keys/{key_id_or_name}"].get
  update:
    description: Get a Key using ID or name.
- target: $.paths["/keys/{key_id_or_name}"].patch
  update:
    description: Update a Key
- target: $.paths["/keys/{key_id_or_name}"].put
  update:
    description: Create or Update Key using ID or name.
- target: $.paths["/plugins"].get
  update:
    description: This endpoint allows you to list all the plugins. You can use query
      parameters to filter the results by size or tags, for example `/plugins?size=50&tags=enterprise`.
- target: $.paths["/plugins/{plugin_id}"].delete
  update:
    description: Delete a Plugin
- target: $.paths["/plugins/{plugin_id}"].get
  update:
    description: Get a Plugin using ID.
- target: $.paths["/plugins/{plugin_id}"].patch
  update:
    description: Update a Plugin
- target: $.paths["/plugins/{plugin_id}"].put
  update:
    description: Create or Update Plugin using ID.
- target: $.paths["/routes"].get
  update:
    description: 'List all routes


      route entities define rules to match client requests. Each route is associated
      with a service, and a service may have multiple routes associated to it. Every
      request matching a given route will be proxied to its associated service.


      > Note: Path handling algorithms v1 was deprecated in Kong 3.0. From Kong 3.0,
      when router_flavor is set to expressions, route.path_handling will be unconfigurable
      and the path handling behavior will be "v0"; when router_flavor is set to traditional_compatible,
      the path handling behavior will be "v0" regardless of the value of route.path_handling.
      Only router_flavor = traditional will support path_handling "v1'' behavior.'
- target: $.paths["/routes/{route_id_or_name}"].delete
  update:
    description: 'Delete a route



      > Note: This API is not available in DB-less mode.'
- target: $.paths["/routes/{route_id_or_name}"].get
  update:
    description: Get a route using ID or name.
- target: $.paths["/routes/{route_id_or_name}"].patch
  update:
    description: 'Update a route


      > Note: This API is not available in DB-less mode.'
- target: $.paths["/routes/{route_id_or_name}"].put
  update:
    description: 'Create or Update route using ID or name.



      > Note: This API is not available in DB-less mode.'
- target: $.paths["/routes/{route_id_or_name}/plugins"].get
  update:
    description: List all Plugins associated with a route
- target: $.paths["/routes/{route_id_or_name}/plugins/{plugin_id}"].delete
  update:
    description: Delete a Plugin associated with a route using ID.
- target: $.paths["/routes/{route_id_or_name}/plugins/{plugin_id}"].get
  update:
    description: Get a Plugin associated with a route using ID.
- target: $.paths["/routes/{route_id_or_name}/plugins/{plugin_id}"].patch
  update:
    description: Update a Plugin associated with a route using ID.
- target: $.paths["/routes/{route_id_or_name}/plugins/{plugin_id}"].put
  update:
    description: Create or Update a Plugin associated with a route using ID.
- target: $.paths["/services"].get
  update:
    description: List all services
- target: $.paths["/services/{service_id_or_name}"].delete
  update:
    description: Delete a service
- target: $.paths["/services/{service_id_or_name}"].get
  update:
    description: Get a service using ID or name.
- target: $.paths["/services/{service_id_or_name}"].patch
  update:
    description: Update a service
- target: $.paths["/services/{service_id_or_name}"].put
  update:
    description: Create or Update service using ID or name.
- target: $.paths["/services/{service_id_or_name}plugins"].get
  update:
    description: List all Plugins associated with a service
- target: $.paths["/services/{service_id_or_name}/plugins/{plugin_id}"].delete
  update:
    description: Delete a Plugin associated with a service using ID.
- target: $.paths["/services/{service_id_or_name}/plugins/{plugin_id}"].get
  update:
    description: Get a Plugin associated with a service using ID.
- target: $.paths["/services/{service_id_or_name}/plugins/{plugin_id}"].patch
  update:
    description: Update a Plugin associated with a service using ID.
- target: $.paths["/services/{service_id_or_name}/plugins/{plugin_id}"].put
  update:
    description: Create or Update a Plugin associated with a service using ID.
- target: $.paths["/services/{service_id_or_name}/routes"].get
  update:
    description: List all routes associated with a service
- target: $.paths["/services/{service_id_or_name}/routes/{route_id_or_name}"].delete
  update:
    description: Delete a route associated with a service using ID or name.
- target: $.paths["/services/{service_id_or_name}/routes/{route_id_or_name}"].get
  update:
    description: Get a route associated with a service using ID or name.
- target: $.paths["/services/{service_id_or_name}/routes/{route_id_or_name}"].patch
  update:
    description: Update a route associated with a service using ID or name.
- target: $.paths["/services/{service_id_or_name}/routes/{route_id_or_name}"].put
  update:
    description: Create or Update a route associated with a service using ID or name.
- target: $.paths["/snis"].get
  update:
    description: List all SNIs
- target: $.paths["/snis/{sni_name_or_id}"].delete
  update:
    description: Delete an SNI
- target: $.paths["/snis/{sni_name_or_id}"].get
  update:
    description: Get an SNI using ID or name.
- target: $.paths["/snis/{sni_name_or_id}"].patch
  update:
    description: Update an SNI
- target: $.paths["/snis/{sni_name_or_id}"].put
  update:
    description: Create or Update SNI using ID or name.
- target: $.paths["/upstreams"].get
  update:
    description: 'List all registered upstreams. You can filter the results by pagination
      size, offset, or tags like `/upstreams?size=10&offset=0`.

      '
- target: $.paths["/upstreams/{upstream_id_or_name}"].delete
  update:
    description: Delete an Upstream
- target: $.paths["/upstreams/{upstream_id_or_name}"].get
  update:
    description: Get an Upstream using ID or name.
- target: $.paths["/upstreams/{upstream_id_or_name}"].patch
  update:
    description: Update an Upstream
- target: $.paths["/upstreams/{upstream_id_or_name}"].put
  update:
    description: Create or Update Upstream using ID or name.
- target: $.paths["/upstreams/{upstream_id_or_name}/targets"].get
  update:
    description: List all Targets associated with a an Upstream
- target: $.paths["/upstreams/{upstream_id_or_name}/targets/{target_id_or_target}"].delete
  update:
    description: Delete a Target associated with a an Upstream using ID or target.
- target: $.paths["/upstreams/{upstream_id_or_name}/targets/{target_id_or_target}"].get
  update:
    description: Get a Target associated with an Upstream using ID or target.
- target: $.paths["/upstreams/{upstream_id_or_name}/targets/{target_id_or_target}"].patch
  update:
    description: Update a Target associated with a an Upstream using ID or target.
- target: $.paths["/upstreams/{upstream_id_or_name}/targets/{target_id_or_target}"].put
  update:
    description: Create or Update a Target associated with an Upstream using ID or
      target.
- target: $.paths["/vaults"].get
  update:
    description: List all Vaults
- target: $.paths["/vaults/{vault_id_or_prefix}"].delete
  update:
    description: Delete a Vault
- target: $.paths["/vaults/{vault_id_or_prefix}"].get
  update:
    description: 'Get a Vault using ID or prefix.


      Vault entities are used to configure different Vault connectors.'
- target: $.paths["/vaults/{vault_id_or_prefix}"].patch
  update:
    description: Update a Vault
- target: $.paths["/vaults/{vault_id_or_prefix}"].put
  update:
    description: Create or Update Vault using ID or prefix.
- target: $.paths["/endpoints"].get
  update:
    description: List all available endpoints provided by the Admin API.
- target: $.paths["/schemas/{entity}/validate"].get
  update:
    description: Retrieve the schema of an entity. This is useful to understand what
      fields an entity accepts, and can be used for building third-party integrations
      with Kong.
- target: $.paths["/schemas/plugins/{plugin_name}"].get
  update:
    description: "Retrieve the schema of a plugin\u2019s configuration. This is useful\
      \ to understand what fields a plugin accepts, and can be used for building third-party\
      \ integrations to the Kong\u2019s plugin system.\n\n"
- target: $.paths["/timers"].get
  update:
    description: Retrieve runtime stats data from [lua-resty-timer-ng](https://github.com/Kong/lua-resty-timer-ng).
- target: $.paths["/status"].get
  update:
    description: "Retrieve usage information about a node, with some basic information\
      \ about the connections being processed by the underlying nginx process, the\
      \ status of the database connection, and node\u2019s memory usage.\n\nIf you\
      \ want to monitor the Kong process, since Kong is built on top of nginx, every\
      \ existing nginx monitoring tool or agent can be used."
- target: $.paths["/tags"].get
  update:
    description: 'Returns a paginated list of all the tags in the system.


      The list of entities will not be restricted to a single entity type: all the
      entities tagged with tags will be present on this list.


      If an entity is tagged with more than one tag, the entity_id for that entity
      will appear more than once in the resulting list. Similarly, if several entities
      have been tagged with the same tag, the tag will appear in several items of
      this list.'
- target: $.paths["/tags/{tags}"].get
  update:
    description: 'Returns the entities that have been tagged with the specified tag.


      The list of entities will not be restricted to a single entity type: all the
      entities tagged with tags will be present on this list.'
- target: $.paths["/debug/cluster/control-planes-nodes/log-level/{log_level}"].put
  update:
    description: "Change the log level of all Control Plane nodes deployed in Hybrid\
      \ (CP/DP) cluster.\n\nSee the [NGINX docs](http://nginx.org/en/docs/ngx_core_module.html#error_log)\
      \ for a list of accepted values.\n\nCare must be taken when changing the log\
      \ level of a node to `debug` in a production environment because the disk could\
      \ fill up quickly. As soon as the debug logging finishes, revert back to a higher\
      \ level such as notice.\n\nIt\u2019s currently not possible to change the log\
      \ level of DP and DB-less nodes.\n\n"
- target: $.paths["/debug/cluster/log-level/{log_level}"].put
  update:
    description: "Change the log level of all nodes in a cluster.\n\n\n\nSee the [NGINX\
      \ docs](http://nginx.org/en/docs/ngx_core_module.html#error_log) for a list\
      \ of accepted values.\n\nIt\u2019s currently not possible to change the log\
      \ level of DP and DB-less nodes.\n\nCurrently, when a user dynamically changes\
      \ the log level for the entire cluster, if a new node joins a cluster the new\
      \ node will run at the previous log level, not at the log level that was previously\
      \ set dynamically for the entire cluster.\n\n\n"
- target: $.paths["/debug/node/log-level"].get
  update:
    description: 'Retrieve the current log level of a node.


      See the [NGINX documentation](http://nginx.org/en/docs/ngx_core_module.html#error_log)
      for the list of possible return values.'
- target: $.paths["/debug/node/log-level/{log_level}"].put
  update:
    description: 'Change the log level of a node.


      See the [NGINX documentation](http://nginx.org/en/docs/ngx_core_module.html#error_log)
      for the list of possible return values.

      '
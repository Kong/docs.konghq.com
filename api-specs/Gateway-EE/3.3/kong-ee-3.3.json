{
  "components": {
    "parameters": {
      "pagination-offset": {
        "description": "Offset from which to return the next set of resources. Use the value of the 'offset' field from the response of a list operation as input here to paginate through all the resources",
        "in": "query",
        "name": "offset",
        "schema": {
          "type": "string"
        }
      },
      "pagination-size": {
        "description": "Number of resources to be returned.",
        "in": "query",
        "name": "size",
        "schema": {
          "default": 100,
          "maximum": 1000,
          "minimum": 1,
          "type": "integer"
        }
      },
      "pagination-tags-filter": {
        "description": "A list of tags to filter the list of resources on. Multiple tags can be concatenated using ',' to mean AND or using '/' to mean OR.",
        "example": "tag1,tag2",
        "in": "query",
        "name": "tags",
        "schema": {
          "type": "string"
        }
      },
      "certificate_name_or_id": {
        "name": "certificate_name_or_id",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string",
          "enum": [
            "a3ad71a8-6685-4b03-a101-980a953544f6",
            "name"
          ],
          "example": "name"
        },
        "description": "The unique identifier or the `name` attribute of the Certificate whose SNIs are to be retrieved. When using this endpoint, only SNIs associated to the specified Certificate will be listed."
      },
      "sni_name_or_id": {
        "name": "sni_name_or_id",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string",
          "example": "my-sni"
        },
        "description": "The unique identifier or the name of the SNI to retrieve."
      },
      "tag": {
        "name": "tags",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string",
          "example": "example"
        },
        "description": "Tags are strings associated to entities in Kong."
      },
      "log_level": {
        "name": "log_level",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string",
          "enum": [
            "info",
            "notice",
            "warn",
            "error",
            "crit"
          ],
          "example": "warn"
        },
        "description": "Log levels are set in Kong’s configuration. Log levels increase in order of their severity"
      },
      "target_id_or_target": {
        "name": "target_id_or_target",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string",
          "example": "example.com:8000"
        },
        "description": "The host/port combination element of the target to set as unhealthy, or the `id` of an existing target entry."
      },
      "vault_id_or_prefix": {
        "name": "vault_id_or_prefix",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string",
          "example": "env"
        },
        "description": "The unique identifier or the prefix of the Vault to retrieve."
      },
      "plugin_id": {
        "name": "plugin_id",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string",
          "example": "response-ratelimiting"
        },
        "description": "The unique identifier of the plugin to create or update."
      },
      "upstream_id_or_name": {
        "name": "upstream_id_or_name",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string",
          "example": "7fca84d6-7d37-4a74-a7b0-93e576089a41"
        },
        "description": "The unique identifier or the name of the Upstream associated to the Certificate to be retrieved."
      },
      "key-set_id_or_name": {
        "name": "key-set_id_or_name",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string",
          "example": "46CA83EE-671C-11ED-BFAB-2FE47512C77A"
        },
        "description": "The unique identifier or the `name` attribute of the Key Set that should be associated to the newly-created Key."
      },
      "route_id_or_name": {
        "name": "route_id_or_name",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string",
          "example": "my-route"
        },
        "description": "The unique identifier or the name of the route to retrieve."
      },
      "key_id_or_name": {
        "name": "key_id_or_name",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string",
          "example": "24D0DBDA-671C-11ED-BA0B-EF1DCCD3725"
        },
        "description": "The unique identifier or the name of the Key to retrieve."
      },
      "ca_certificate_id": {
        "name": "ca_certificate_id",
        "description": "ID of the related certificate",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string",
          "example": "7fca84d6-7d37-4a74-a7b0-93e576089a41\""
        }
      },
      "certificate_id": {
        "name": "certificate_id",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string",
          "example": "7fca84d6-7d37-4a74-a7b0-93e576089a41\""
        },
        "description": "The unique identifier of the Certificate to retrieve."
      },
      "service_id_or_name": {
        "name": "service_id_or_name",
        "description": "ID **or** name of the service to lookup",
        "example": "test-service",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "group_name_or_id": {
        "name": "group_name_or_id",
        "in": "path",
        "required": true,
        "schema": {
          "anyOf": [
            {
              "type": "string",
              "example": "my_group"
            },
            {
              "type": "string",
              "example": "84a73fb8-50fc-44a7-a4d5-aa17728ee83f"
            }
          ],
          "type": "string",
          "example": "my_group"
        },
        "description": "The name or UUID of the consumer group."
      },
      "group_name": {
        "name": "group_name",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string",
          "example": "My-Group"
        },
        "description": "A unique name for the consumer group you want to create."
      },
      "consumer_name_or_id": {
        "name": "consumer_name_or_id",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string"
        },
        "description": "The name or UUID of the consumer to remove."
      },
      "consumer_username_or_id": {
        "name": "consumer_username_or_id",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string",
          "example": "my-username"
        },
        "description": "The unique identifier or the username of the Consumer to retrieve."
      },
      "license-id": {
        "name": "license-id",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string",
          "example": "30b4edb7-0847-4f65-af90-efbed8b0161f"
        },
        "description": "The license’s unique ID."
      },
      "workspace_id_or_name": {
        "name": "workspace_id_or_name",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string",
          "example": "2747d1e5-8246-4f65-a939-b392f1ee17f8"
        },
        "description": "ID or name of the workspace to lookup"
      },
      "workspace": {
        "name": "workspace",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string",
          "example": "team-a"
        },
        "description": "Name or ID of workspace"
      },
      "Gatewayapi_Consumer_username_or_id": {
        "name": "consumer_username_or_id",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string",
          "example": "my-username"
        },
        "description": "The unique identifier or the username of the Consumer to retrieve."
      },
      "Gatewayapi_Pagination-tags-filter": {
        "description": "A list of tags to filter the list of resources on. Multiple tags can be concatenated using ',' to mean AND or using '/' to mean OR.",
        "example": "tag1,tag2",
        "in": "query",
        "name": "tags",
        "schema": {
          "type": "string"
        }
      }
    },
    "schemas": {
      "Basic-auth-credential": {
        "example": {
          "consumer": {
            "id": "84a73fb8-50fc-44a7-a4d5-aa17728ee83f"
          },
          "id": "b2f34145-0343-41a4-9602-4c69dec2f269",
          "password": "hashedsoopersecretvalue",
          "username": "darius"
        },
        "properties": {
          "consumer": {
            "additionalProperties": false,
            "properties": {
              "id": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "created_at": {
            "description": "Unix epoch when the resource was created.",
            "type": "integer"
          },
          "id": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "tags": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "username": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "CA-Certificate": {
        "description": "A CA certificate object represents a trusted CA. These objects are used by Kong to verify the validity of a client or server certificate.",
        "example": {
          "cert": "-----BEGIN CERTIFICATE-----\ncertificate-content\n-----END CERTIFICATE-----",
          "id": "b2f34145-0343-41a4-9602-4c69dec2f260"
        },
        "type": "object",
        "properties": {
          "cert": {
            "description": "PEM-encoded public certificate of the CA.",
            "type": "string"
          },
          "cert_digest": {
            "description": "SHA256 hex digest of the public certificate. This field is read-only and it cannot be set by the caller, the value is automatically computed.",
            "type": "string"
          },
          "created_at": {
            "description": "Unix epoch when the resource was created.",
            "type": "integer"
          },
          "id": {
            "type": "string"
          },
          "tags": {
            "description": "An optional set of strings associated with the Certificate for grouping and filtering.",
            "type": "array",
            "items": {
              "type": "string",
              "example": "tag"
            }
          }
        }
      },
      "Certificate": {
        "description": "A certificate object represents a public certificate, and can be optionally paired with the corresponding private key. These objects are used by Kong to handle SSL/TLS termination for encrypted requests, or for use as a trusted CA store when validating peer certificate of client/service. Certificates are optionally associated with SNI objects to tie a cert/key pair to one or more hostnames. If intermediate certificates are required in addition to the main certificate, they should be concatenated together into one string according to the following order: main certificate on the top, followed by any intermediates.",
        "example": {
          "cert": "-----BEGIN CERTIFICATE-----\ncertificate-content\n-----END CERTIFICATE-----",
          "id": "b2f34145-0343-41a4-9602-4c69dec2f269",
          "key": "-----BEGIN PRIVATE KEY-----\nprivate-key-content\n-----END PRIVATE KEY-----"
        },
        "properties": {
          "cert": {
            "description": "PEM-encoded public certificate chain of the SSL key pair. This field is _referenceable_, which means it can be securely stored as a [secret](/gateway/latest/plan-and-deploy/security/secrets-management/getting-started) in a vault. References must follow a [specific format](/gateway/latest/plan-and-deploy/security/secrets-management/reference-format).",
            "type": "string"
          },
          "cert_alt": {
            "description": "PEM-encoded public certificate chain of the alternate SSL key pair. This should only be set if you have both RSA and ECDSA types of certificate available and would like Kong to prefer serving using ECDSA certs when client advertises support for it. This field is _referenceable_, which means it can be securely stored as a [secret](/gateway/latest/plan-and-deploy/security/secrets-management/getting-started) in a vault. References must follow a [specific format](/gateway/latest/plan-and-deploy/security/secrets-management/reference-format).",
            "type": "string"
          },
          "created_at": {
            "description": "Unix epoch when the resource was created.",
            "type": "integer"
          },
          "id": {
            "type": "string"
          },
          "key": {
            "description": "PEM-encoded private key of the SSL key pair. This field is _referenceable_, which means it can be securely stored as a [secret](/gateway/latest/plan-and-deploy/security/secrets-management/getting-started) in a vault. References must follow a [specific format](/gateway/latest/plan-and-deploy/security/secrets-management/reference-format).",
            "type": "string"
          },
          "key_alt": {
            "description": "PEM-encoded private key of the alternate SSL key pair. This should only be set if you have both RSA and ECDSA types of certificate available and would like Kong to prefer serving using ECDSA certs when client advertises support for it. This field is _referenceable_, which means it can be securely stored as a [secret](/gateway/latest/plan-and-deploy/security/secrets-management/getting-started) in a vault. References must follow a [specific format](/gateway/latest/plan-and-deploy/security/secrets-management/reference-format).",
            "type": "string"
          },
          "tags": {
            "description": "An optional set of strings associated with the Certificate for grouping and filtering.",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "Consumer": {
        "description": "The Consumer object represents a consumer - or a user - of a Service. You can either rely on Kong as the primary datastore, or you can map the consumer list with your database to keep consistency between Kong and your existing primary datastore.",
        "example": {
          "custom_id": "4200",
          "id": "8a388226-80e8-4027-a486-25e4f72db5d21",
          "tags": [
            "silver-tier"
          ],
          "username": "bob-the-builder"
        },
        "properties": {
          "created_at": {
            "description": "Unix epoch when the resource was created.",
            "type": "integer"
          },
          "custom_id": {
            "description": "Field for storing an existing unique ID for the Consumer - useful for mapping Kong with users in your existing database. You must send either this field or `username` with the request.",
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "tags": {
            "description": "An optional set of strings associated with the Consumer for grouping and filtering.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "username": {
            "description": "The unique username of the Consumer. You must send either this field or `custom_id` with the request.",
            "type": "string"
          }
        },
        "type": "object",
        "x-examples": {
          "Consumer Object": {
            "custom_id": "4200",
            "id": "8a388226-80e8-4027-a486-25e4f7db5d21",
            "tags": [
              "silver-tier"
            ],
            "username": "bob-the-builder"
          }
        }
      },
      "Key": {
        "description": "A Key object holds a representation of asymmetric keys in various formats. When Kong or a Kong plugin requires a specific public or private key to perform certain operations, it can use this entity.",
        "example": {
          "id": "d958f66b-8e99-44d2-b0b4-edd5bbf24658",
          "jwk": "{\"alg\":\"RSA\",  \"kid\": \"42\",  ...}",
          "kid": "42",
          "name": "a-key",
          "pem": {
            "private_key": "-----BEGIN",
            "public_key": "-----BEGIN"
          },
          "set": {
            "id": "b86b331c-dcd0-4b3e-97ce-47c5a9543031"
          }
        },
        "properties": {
          "created_at": {
            "description": "Unix epoch when the resource was created.",
            "type": "integer"
          },
          "id": {
            "type": "string"
          },
          "jwk": {
            "description": "A JSON Web Key represented as a string.",
            "type": "string"
          },
          "kid": {
            "description": "A unique identifier for a key.",
            "type": "string"
          },
          "name": {
            "description": "The name to associate with the given keys.",
            "type": "string"
          },
          "pem": {
            "description": "A keypair in PEM format.",
            "properties": {
              "private_key": {
                "type": "string"
              },
              "public_key": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "set": {
            "additionalProperties": false,
            "description": "The id (an UUID) of the key-set with which to associate the key.",
            "properties": {
              "id": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "tags": {
            "description": "An optional set of strings associated with the Key for grouping and filtering.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "updated_at": {
            "description": "Unix epoch when the resource was last updated.",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "Key-set": {
        "example": {
          "id": "b58c7d9d-e54f-444c-b24d-cdfc4159f61e",
          "name": "example-key-set",
          "tags": [
            "idp-keys"
          ]
        },
        "properties": {
          "created_at": {
            "description": "Unix epoch when the resource was created.",
            "type": "integer"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "tags": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "updated_at": {
            "description": "Unix epoch when the resource was last updated.",
            "type": "integer"
          }
        },
        "type": "object",
        "title": "Key-set"
      },
      "Plugin": {
        "description": "A plugin  entity represents a plugin configuration that will be executed during the HTTP request/response lifecycle. It is how you can add functionalities to Services that run behind Kong, like Authentication or Rate Limiting for example. You can find more information about how to install and what values each plugin takes by visiting the [Kong Hub](https://docs.konghq.com/hub/). When adding a plugin Configuration to a Service, every request made by a client to that Service will run said plugin. If a plugin needs to be tuned to different values for some specific Consumers, you can do so by creating a separate plugin instance that specifies both the Service and the Consumer, through the `service` and `consumer` fields.",
        "example": {
          "config": {
            "anonymous": null,
            "hide_credentials": false,
            "key_in_body": false,
            "key_in_header": true,
            "key_in_query": true,
            "key_names": [
              "apikey"
            ],
            "run_on_preflight": true
          },
          "enabled": true,
          "id": "3fd1eea1-885a-4011-b986-289943ff8177",
          "name": "key-auth",
          "protocols": [
            "grpc",
            "grpcs",
            "http",
            "https"
          ]
        },
        "properties": {
          "config": {
            "description": "The configuration properties for the plugin which can be found on the plugins documentation page in the [Kong Hub](https://docs.konghq.com/hub/).",
            "type": "object"
          },
          "consumer": {
            "additionalProperties": false,
            "description": "If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.",
            "properties": {
              "id": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "created_at": {
            "description": "Unix epoch when the resource was created.",
            "type": "integer"
          },
          "enabled": {
            "default": true,
            "description": "Whether the plugin is applied.",
            "type": "boolean"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "description": "The name of the plugin that's going to be added. Currently, the plugin must be installed in every Kong instance separately.",
            "type": "string"
          },
          "ordering": {
            "type": "object"
          },
          "protocols": {
            "default": [
              "grpc",
              "grpcs",
              "http",
              "https"
            ],
            "description": "A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `\"tcp\"` and `\"tls\"`.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "route": {
            "additionalProperties": false,
            "description": "If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the route being used.",
            "properties": {
              "id": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "service": {
            "additionalProperties": false,
            "description": "If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.",
            "properties": {
              "id": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "tags": {
            "description": "An optional set of strings associated with the plugin for grouping and filtering.",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "Route": {
        "description": "Route entities define rules to match client requests. Each route is associated with a Service, and a Service may have multiple routes associated to it. Every request matching a given route will be proxied to its associated Service. The combination of routes and Services (and the separation of concerns between them) offers a powerful routing mechanism with which it is possible to define fine-grained entry-points in Kong leading to different upstream services of your infrastructure. You need at least one matching rule that applies to the protocol being matched by the route.",
        "example": {
          "hosts": [
            "foo.example.com",
            "foo.example.us"
          ],
          "id": "56c4566c-14cc-4132-9011-4139fcbbe50a",
          "name": "example-route",
          "paths": [
            "/v1",
            "/v2"
          ],
          "service": {
            "id": "bd380f99-659d-415e-b0e7-72ea05df3218"
          }
        },
        "properties": {
          "created_at": {
            "description": "Unix epoch when the resource was created.",
            "type": "integer"
          },
          "destinations": {
            "description": "A list of IP destinations of incoming connections that match this route when using stream routing. Each entry is an object with fields \"ip\" (optionally in CIDR range notation) and/or \"port\".",
            "items": {
              "properties": {
                "default": {}
              },
              "type": "object"
            },
            "type": "array"
          },
          "headers": {
            "description": "One or more lists of values indexed by header name that will cause this route to match if present in the request. The `Host` header cannot be used with this attribute: hosts should be specified using the `hosts` attribute. When `headers` contains only one value and that value starts with the special prefix `~*`, the value is interpreted as a regular expression.",
            "type": "object"
          },
          "hosts": {
            "description": "A list of domain names that match this route. Note that the hosts value is case sensitive.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "https_redirect_status_code": {
            "default": 426,
            "description": "The status code Kong responds with when all properties of a route match except the protocol i.e. if the protocol of the request is `HTTP` instead of `HTTPS`. `Location` header is injected by Kong if the field is set to 301, 302, 307 or 308. Note: This config applies only if the route is configured to only accept the `https` protocol.",
            "type": "integer"
          },
          "id": {
            "type": "string"
          },
          "methods": {
            "description": "A list of HTTP methods that match this route.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "name": {
            "description": "The name of the route. Route names must be unique, and they are case sensitive. For example, there can be two different routes named \"test\" and \"Test\".",
            "type": "string"
          },
          "path_handling": {
            "default": "v0",
            "description": "Controls how the Service path, route path and requested path are combined when sending a request to the upstream. See above for a detailed description of each behavior.",
            "type": "string"
          },
          "paths": {
            "description": "A list of paths that match this route.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "preserve_host": {
            "default": false,
            "description": "When matching a route via one of the `hosts` domain names, use the request `Host` header in the upstream request headers. If set to `false`, the upstream `Host` header will be that of the Service's `host`.",
            "type": "boolean"
          },
          "protocols": {
            "default": [
              "http",
              "https"
            ],
            "description": "An array of the protocols this route should allow. See the [Route Object](#route-object) section for a list of accepted protocols. When set to only `\"https\"`, HTTP requests are answered with an upgrade error. When set to only `\"http\"`, HTTPS requests are answered with an error.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "regex_priority": {
            "default": 0,
            "description": "A number used to choose which route resolves a given request when several routes match it using regexes simultaneously. When two routes match the path and have the same `regex_priority`, the older one (lowest `created_at`) is used. Note that the priority for non-regex routes is different (longer non-regex routes are matched before shorter ones).",
            "type": "integer"
          },
          "request_buffering": {
            "default": true,
            "description": "Whether to enable request body buffering or not. With HTTP 1.1, it may make sense to turn this off on services that receive data with chunked transfer encoding.",
            "type": "boolean"
          },
          "response_buffering": {
            "default": true,
            "description": "Whether to enable response body buffering or not. With HTTP 1.1, it may make sense to turn this off on services that send data with chunked transfer encoding.",
            "type": "boolean"
          },
          "service": {
            "additionalProperties": false,
            "description": "The Service this route is associated to. This is where the route proxies traffic to.",
            "properties": {
              "id": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "snis": {
            "description": "A list of SNIs that match this route when using stream routing.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "sources": {
            "description": "A list of IP sources of incoming connections that match this route when using stream routing. Each entry is an object with fields \"ip\" (optionally in CIDR range notation) and/or \"port\".",
            "items": {
              "properties": {
                "default": {}
              },
              "type": "object"
            },
            "type": "array"
          },
          "strip_path": {
            "default": true,
            "description": "When matching a route via one of the `paths`, strip the matching prefix from the upstream request URL.",
            "type": "boolean"
          },
          "tags": {
            "description": "An optional set of strings associated with the route for grouping and filtering.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "updated_at": {
            "description": "Unix epoch when the resource was last updated.",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "SNI": {
        "description": "An SNI object represents a many-to-one mapping of hostnames to a certificate. That is, a certificate object can have many hostnames associated with it; when Kong receives an SSL request, it uses the SNI field in the Client Hello to lookup the certificate object based on the SNI associated with the certificate.",
        "example": {
          "certificate": {
            "id": "bd380f99-659d-415e-b0e7-72ea05df3218"
          },
          "id": "36c4566c-14cc-4132-9011-4139fcbbe50a",
          "name": "some.example.org"
        },
        "properties": {
          "certificate": {
            "additionalProperties": false,
            "description": "The id (a UUID) of the certificate with which to associate the SNI hostname. The Certificate must have a valid private key associated with it to be used by the SNI object.",
            "properties": {
              "id": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "created_at": {
            "description": "Unix epoch when the resource was created.",
            "type": "integer"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "description": "The SNI name to associate with the given certificate.",
            "type": "string"
          },
          "tags": {
            "description": "An optional set of strings associated with the SNIs for grouping and filtering.",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "Service": {
        "description": "Service entities, as the name implies, are abstractions of each of your own upstream services. Examples of Services would be a data transformation microservice, a billing API, etc. The main attribute of a Service is its URL (where Kong should proxy traffic to), which can be set as a single string or by specifying its `protocol`, `host`, `port` and `path` individually. Services are associated to routes (a Service can have many routes associated with it). Routes are entry-points in Kong and define rules to match client requests. Once a route is matched, Kong proxies the request to its associated Service. See the [Proxy Reference][proxy-reference] for a detailed explanation of how Kong proxies traffic.",
        "example": {
          "host": "example.internal",
          "id": "49fd316e-c457-481c-9fc7-8079153e4f3c",
          "name": "example-service",
          "path": "/",
          "port": 80,
          "protocol": "http"
        },
        "properties": {
          "ca_certificates": {
            "description": "Array of `CA Certificate` object UUIDs that are used to build the trust store while verifying upstream server's TLS certificate. If set to `null` when Nginx default is respected. If default CA list in Nginx are not specified and TLS verification is enabled, then handshake with upstream server will always fail (because no CA are trusted).",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "client_certificate": {
            "additionalProperties": false,
            "description": "Certificate to be used as client certificate while TLS handshaking to the upstream server.",
            "properties": {
              "id": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "connect_timeout": {
            "default": 60000,
            "description": "The timeout in milliseconds for establishing a connection to the upstream server.",
            "type": "integer"
          },
          "created_at": {
            "description": "Unix epoch when the resource was created.",
            "type": "integer"
          },
          "enabled": {
            "default": true,
            "description": "Whether the Service is active. If set to `false`, the proxy behavior will be as if any routes attached to it do not exist (404). Default: `true`.",
            "type": "boolean"
          },
          "host": {
            "description": "The host of the upstream server. Note that the host value is case sensitive.",
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "description": "The Service name.",
            "type": "string"
          },
          "path": {
            "description": "The path to be used in requests to the upstream server.",
            "type": "string"
          },
          "port": {
            "default": 80,
            "description": "The upstream server port.",
            "type": "integer"
          },
          "protocol": {
            "default": "http",
            "description": "The protocol used to communicate with the upstream.",
            "type": "string"
          },
          "read_timeout": {
            "default": 60000,
            "description": "The timeout in milliseconds between two successive read operations for transmitting a request to the upstream server.",
            "type": "integer"
          },
          "retries": {
            "default": 5,
            "description": "The number of retries to execute upon failure to proxy.",
            "type": "integer"
          },
          "tags": {
            "description": "An optional set of strings associated with the Service for grouping and filtering.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "tls_verify": {
            "description": "Whether to enable verification of upstream server TLS certificate. If set to `null`, then the Nginx default is respected.",
            "type": "boolean"
          },
          "tls_verify_depth": {
            "description": "Maximum depth of chain while verifying Upstream server's TLS certificate. If set to `null`, then the Nginx default is respected.",
            "type": "integer"
          },
          "updated_at": {
            "description": "Unix epoch when the resource was last updated.",
            "type": "integer"
          },
          "url": {
            "description": "Helper field to set `protocol`, `host`, `port` and `path` using a URL. This field is write-only and is not returned in responses.",
            "type": "string"
          },
          "write_timeout": {
            "default": 60000,
            "description": "The timeout in milliseconds between two successive write operations for transmitting a request to the upstream server.",
            "type": "integer"
          }
        },
        "type": "object",
        "title": "Service"
      },
      "Target": {
        "description": "A target is an ip address/hostname with a port that identifies an instance of a backend service. Every upstream can have many targets, and the targets can be dynamically added, modified, or deleted. Changes take effect on the fly. To disable a target, post a new one with `weight=0`; alternatively, use the `DELETE` convenience method to accomplish the same. The current target object definition is the one with the latest `created_at`.",
        "example": {
          "id": "089292a7-ba3d-4d88-acf0-97b4b2e2621a",
          "target": "203.0.113.42",
          "upstream": {
            "id": "5f1d7e76-2fed-4806-a6af-869984f025cb"
          },
          "weight": 100
        },
        "properties": {
          "created_at": {
            "description": "Unix epoch when the resource was created.",
            "type": "number"
          },
          "id": {
            "type": "string"
          },
          "tags": {
            "description": "An optional set of strings associated with the Target for grouping and filtering.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "target": {
            "description": "The target address (ip or hostname) and port. If the hostname resolves to an SRV record, the `port` value will be overridden by the value from the DNS record.",
            "type": "string"
          },
          "upstream": {
            "additionalProperties": false,
            "properties": {
              "id": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "weight": {
            "default": 100,
            "description": "The weight this target gets within the upstream loadbalancer (`0`-`65535`). If the hostname resolves to an SRV record, the `weight` value will be overridden by the value from the DNS record.",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "Upstream": {
        "description": "The upstream object represents a virtual hostname and can be used to loadbalance incoming requests over multiple services (targets). So for example an upstream named `service.v1.xyz` for a Service object whose `host` is `service.v1.xyz`. Requests for this Service would be proxied to the targets defined within the upstream. An upstream also includes a [health checker][healthchecks], which is able to enable and disable targets based on their ability or inability to serve requests. The configuration for the health checker is stored in the upstream object, and applies to all of its targets.",
        "example": {
          "algorithm": "round-robin",
          "hash_fallback": "none",
          "hash_on": "none",
          "hash_on_cookie_path": "/",
          "healthchecks": {
            "active": {
              "concurrency": 10,
              "healthy": {
                "http_statuses": [
                  200,
                  302
                ],
                "interval": 0,
                "successes": 0
              },
              "http_path": "/",
              "https_verify_certificate": true,
              "timeout": 1,
              "type": "http",
              "unhealthy": {
                "http_failures": 0,
                "http_statuses": [
                  429,
                  404,
                  500,
                  501,
                  502,
                  503,
                  504,
                  505
                ],
                "interval": 0,
                "tcp_failures": 0,
                "timeouts": 0
              }
            },
            "passive": {
              "healthy": {
                "http_statuses": [
                  200,
                  201,
                  202,
                  203,
                  204,
                  205,
                  206,
                  207,
                  208,
                  226,
                  300,
                  301,
                  302,
                  303,
                  304,
                  305,
                  306,
                  307,
                  308
                ],
                "successes": 0
              },
              "type": "http",
              "unhealthy": {
                "http_failures": 0,
                "http_statuses": [
                  429,
                  500,
                  503
                ],
                "tcp_failures": 0,
                "timeouts": 0
              }
            },
            "threshold": 0
          },
          "id": "6eed5e9c-5398-4026-9a4c-d48f18a2431e",
          "name": "api.example.internal",
          "slots": 10000
        },
        "properties": {
          "algorithm": {
            "default": "round-robin",
            "description": "Which load balancing algorithm to use.",
            "type": "string"
          },
          "client_certificate": {
            "additionalProperties": false,
            "description": "If set, the certificate to be used as client certificate while TLS handshaking to the upstream server.",
            "properties": {
              "id": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "created_at": {
            "description": "Unix epoch when the resource was created.",
            "type": "integer"
          },
          "hash_fallback": {
            "default": "none",
            "description": "What to use as hashing input if the primary `hash_on` does not return a hash (eg. header is missing, or no Consumer identified). Not available if `hash_on` is set to `cookie`.",
            "type": "string"
          },
          "hash_fallback_header": {
            "description": "The header name to take the value from as hash input. Only required when `hash_fallback` is set to `header`.",
            "type": "string"
          },
          "hash_fallback_query_arg": {
            "description": "The name of the query string argument to take the value from as hash input. Only required when `hash_fallback` is set to `query_arg`.",
            "type": "string"
          },
          "hash_fallback_uri_capture": {
            "description": "The name of the route URI capture to take the value from as hash input. Only required when `hash_fallback` is set to `uri_capture`.",
            "type": "string"
          },
          "hash_on": {
            "default": "none",
            "description": "What to use as hashing input. Using `none` results in a weighted-round-robin scheme with no hashing.",
            "type": "string"
          },
          "hash_on_cookie": {
            "description": "The cookie name to take the value from as hash input. Only required when `hash_on` or `hash_fallback` is set to `cookie`. If the specified cookie is not in the request, Kong will generate a value and set the cookie in the response.",
            "type": "string"
          },
          "hash_on_cookie_path": {
            "default": "/",
            "description": "The cookie path to set in the response headers. Only required when `hash_on` or `hash_fallback` is set to `cookie`.",
            "type": "string"
          },
          "hash_on_header": {
            "description": "The header name to take the value from as hash input. Only required when `hash_on` is set to `header`.",
            "type": "string"
          },
          "hash_on_query_arg": {
            "description": "The name of the query string argument to take the value from as hash input. Only required when `hash_on` is set to `query_arg`.",
            "type": "string"
          },
          "hash_on_uri_capture": {
            "description": "The name of the route URI capture to take the value from as hash input. Only required when `hash_on` is set to `uri_capture`.",
            "type": "string"
          },
          "healthchecks": {
            "properties": {
              "active": {
                "properties": {
                  "concurrency": {
                    "default": 10,
                    "type": "integer"
                  },
                  "headers": {
                    "type": "object"
                  },
                  "healthy": {
                    "properties": {
                      "http_statuses": {
                        "default": [
                          200,
                          302
                        ],
                        "items": {
                          "type": "integer"
                        },
                        "type": "array"
                      },
                      "interval": {
                        "default": 0,
                        "type": "number"
                      },
                      "successes": {
                        "default": 0,
                        "type": "integer"
                      }
                    },
                    "type": "object"
                  },
                  "http_path": {
                    "default": "/",
                    "type": "string"
                  },
                  "https_sni": {
                    "type": "string"
                  },
                  "https_verify_certificate": {
                    "default": true,
                    "type": "boolean"
                  },
                  "timeout": {
                    "default": 1,
                    "type": "number"
                  },
                  "type": {
                    "default": "http",
                    "type": "string"
                  },
                  "unhealthy": {
                    "properties": {
                      "http_failures": {
                        "default": 0,
                        "type": "integer"
                      },
                      "http_statuses": {
                        "default": [
                          429,
                          404,
                          500,
                          501,
                          502,
                          503,
                          504,
                          505
                        ],
                        "items": {
                          "type": "integer"
                        },
                        "type": "array"
                      },
                      "interval": {
                        "default": 0,
                        "type": "number"
                      },
                      "tcp_failures": {
                        "default": 0,
                        "type": "integer"
                      },
                      "timeouts": {
                        "default": 0,
                        "type": "integer"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "passive": {
                "properties": {
                  "healthy": {
                    "properties": {
                      "http_statuses": {
                        "default": [
                          200,
                          201,
                          202,
                          203,
                          204,
                          205,
                          206,
                          207,
                          208,
                          226,
                          300,
                          301,
                          302,
                          303,
                          304,
                          305,
                          306,
                          307,
                          308
                        ],
                        "items": {
                          "type": "integer"
                        },
                        "type": "array"
                      },
                      "successes": {
                        "default": 0,
                        "type": "integer"
                      }
                    },
                    "type": "object"
                  },
                  "type": {
                    "default": "http",
                    "type": "string"
                  },
                  "unhealthy": {
                    "properties": {
                      "http_failures": {
                        "default": 0,
                        "type": "integer"
                      },
                      "http_statuses": {
                        "default": [
                          429,
                          500,
                          503
                        ],
                        "items": {
                          "type": "integer"
                        },
                        "type": "array"
                      },
                      "tcp_failures": {
                        "default": 0,
                        "type": "integer"
                      },
                      "timeouts": {
                        "default": 0,
                        "type": "integer"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "threshold": {
                "default": 0,
                "type": "number"
              }
            },
            "type": "object"
          },
          "host_header": {
            "description": "The hostname to be used as `Host` header when proxying requests through Kong.",
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "description": "This is a hostname, which must be equal to the `host` of a Service.",
            "type": "string"
          },
          "slots": {
            "default": 10000,
            "description": "The number of slots in the load balancer algorithm. If `algorithm` is set to `round-robin`, this setting determines the maximum number of slots. If `algorithm` is set to `consistent-hashing`, this setting determines the actual number of slots in the algorithm. Accepts an integer in the range `10`-`65536`.",
            "type": "integer"
          },
          "tags": {
            "description": "An optional set of strings associated with the Upstream for grouping and filtering.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "use_srv_name": {
            "default": false,
            "description": "If set, the balancer will use SRV hostname(if DNS Answer has SRV record) as the proxy upstream `Host`.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "Vault": {
        "description": "Vault entities are used to configure different Vault connectors. Examples of Vaults are Environment Variables, Hashicorp Vault and AWS Secrets Manager. Configuring a Vault allows referencing the secrets with other entities. For example a certificate entity can store a reference to a certificate and key, stored in a vault, instead of storing the certificate and key within the entity. This allows a proper separation of secrets and configuration and prevents secret sprawl.",
        "example": {
          "config": {
            "prefix": "ENV_PREFIX"
          },
          "description": "environment variable based vault",
          "id": "2747d1e5-8246-4f65-a939-b392f1ee17f8",
          "name": "env",
          "tags": [
            "foo",
            "bar"
          ]
        },
        "properties": {
          "config": {
            "description": "The configuration properties for the Vault which can be found on the vaults' documentation page.",
            "type": "object"
          },
          "created_at": {
            "description": "Unix epoch when the resource was created.",
            "type": "integer"
          },
          "description": {
            "description": "The description of the Vault entity.",
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "description": "The name of the Vault that's going to be added. Currently, the Vault implementation must be installed in every Kong instance.",
            "type": "string"
          },
          "prefix": {
            "description": "The unique prefix (or identifier) for this Vault configuration. The prefix is used to load the right Vault configuration and implementation when referencing secrets with the other entities.",
            "type": "string"
          },
          "tags": {
            "description": "An optional set of strings associated with the Vault for grouping and filtering.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "updated_at": {
            "description": "Unix epoch when the resource was last updated.",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "Workspace": {
        "type": "object",
        "properties": {
          "comment": {
            "type": "string"
          },
          "config": {
            "type": "object",
            "properties": {
              "meta": {
                "type": "object"
              },
              "portal": {
                "default": false,
                "type": "boolean",
                "description": "Portal enabled"
              },
              "portal_access_request_email": {
                "type": "boolean"
              },
              "portal_application_request_email": {
                "type": "boolean"
              },
              "portal_application_status_email": {
                "type": "boolean"
              },
              "portal_approved_email": {
                "type": "boolean"
              },
              "portal_auth": {
                "type": "string"
              },
              "portal_auth_conf": {
                "type": "string"
              },
              "portal_auto_approve": {
                "type": "boolean"
              },
              "portal_cors_origins": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "portal_developer_meta_fields": {
                "default": [
                  {
                    "label": "Full Name",
                    "title": "full_name",
                    "validator": {
                      "required": true,
                      "type": "string"
                    }
                  }
                ],
                "type": "array"
              },
              "portal_emails_from": {
                "type": "string"
              },
              "portal_emails_reply_to": {
                "type": "string"
              },
              "portal_invite_email": {
                "type": "boolean"
              },
              "portal_is_legacy": {
                "type": "boolean"
              },
              "portal_reset_email": {
                "type": "boolean"
              },
              "portal_reset_success_email": {
                "type": "boolean"
              },
              "portal_session_conf": {
                "type": "string"
              },
              "portal_smtp_admin_emails": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "portal_token_exp": {
                "type": "integer"
              }
            }
          },
          "created_at": {
            "description": "Unix epoch when the resource was created.",
            "type": "integer"
          },
          "id": {
            "type": "string",
            "description": "The unique UUID for this resource."
          },
          "meta": {
            "type": "object",
            "properties": {
              "color": {
                "type": "string"
              },
              "thumbnail": {
                "type": "string"
              }
            }
          },
          "name": {
            "type": "string"
          }
        },
        "x-examples": {
          "Example 1": {
            "comment": "string",
            "config": {
              "meta": {},
              "portal": false,
              "portal_access_request_email": true,
              "portal_application_request_email": true,
              "portal_application_status_email": true,
              "portal_approved_email": true,
              "portal_auth": "string",
              "portal_auth_conf": "string",
              "portal_auto_approve": true,
              "portal_cors_origins": [
                "string"
              ],
              "portal_developer_meta_fields": [
                {
                  "label": "Full Name",
                  "title": "full_name",
                  "validator": {
                    "required": true,
                    "type": "string"
                  }
                }
              ],
              "portal_emails_from": "string",
              "portal_emails_reply_to": "string",
              "portal_invite_email": true,
              "portal_is_legacy": true,
              "portal_reset_email": true,
              "portal_reset_success_email": true,
              "portal_session_conf": "string",
              "portal_smtp_admin_emails": [
                "string"
              ],
              "portal_token_exp": 0
            },
            "created_at": 0,
            "id": "string",
            "meta": {
              "color": "string",
              "thumbnail": "string"
            },
            "name": "string"
          }
        },
        "description": "Workspaces provide a way to segment Kong entities."
      },
      "pagination-offset-response": {
        "description": "Offset is used to paginate through the API. Provide this value to the next list operation to fetch the next page",
        "type": "string"
      }
    },
    "responses": {
      "tags-response": {
        "description": "Tags response body",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "x-examples": {
                "Example 1": {
                  "data": [
                    {
                      "entity_name": "services",
                      "entity_id": "acf60b10-125c-4c1a-bffe-6ed55daefba4",
                      "tag": "s1"
                    }
                  ],
                  "offset": "c47139f3-d780-483d-8a97-17e9adc5a7ab",
                  "next": "/tags?offset=c47139f3-d780-483d-8a97-17e9adc5a7ab"
                }
              },
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "entity_name": {
                        "type": "string",
                        "example": "services",
                        "description": "The name of the entity that corresponds to a tag"
                      },
                      "entity_id": {
                        "type": "string",
                        "example": "c87440e1-0496-420b-b06f-dac59544bb6c",
                        "description": "The unique ID for the entity that is attached to the tag"
                      },
                      "tag": {
                        "type": "string",
                        "example": "example",
                        "description": "The tag "
                      }
                    }
                  }
                },
                "offset": {
                  "type": "string",
                  "example": "1fb491c4-f4a7-4bca-aeba-7f3bcee4d2f9",
                  "description": "Pagination information"
                },
                "next": {
                  "type": "string",
                  "example": "/tags/example?offset=1fb491c4-f4a7-4bca-aeba-7f3bcee4d2f9",
                  "description": "Pagination information"
                }
              }
            },
            "examples": {
              "Tags response": {
                "value": {
                  "data": [
                    {
                      "entity_name": "services",
                      "entity_id": "c87440e1-0496-420b-b06f-dac59544bb6c",
                      "tag": "example"
                    }
                  ],
                  "offset": "1fb491c4-f4a7-4bca-aeba-7f3bcee4d2f9",
                  "next": "/tags/example?offset=1fb491c4-f4a7-4bca-aeba-7f3bcee4d2f9"
                }
              }
            }
          }
        }
      },
      "key-set-response": {
        "description": "Key set object response body",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "x-examples": {
                "Example 1": {
                  "id": "b58c7d9d-e54f-444c-b24d-cdfc4159f61e",
                  "name": "example-key-set",
                  "created_at": 1422386534,
                  "updated_at": 1422386534,
                  "tags": [
                    "idp-keys"
                  ],
                  "next": "http://localhost:8001/key-sets?offset=6378122c-a0a1-438d-a5c6-efabae9fb969"
                }
              },
              "properties": {
                "id": {
                  "type": "string",
                  "example": "4D0DBDA-671C-11ED-BA0B-EF1DCCD3725F"
                },
                "name": {
                  "type": "string",
                  "description": "The name to associate with the given key-set.\n",
                  "example": "my-key_set"
                },
                "created_at": {
                  "type": "integer",
                  "description": "Unix epoch when the resource was last created.",
                  "example": 1422386534
                },
                "updated_at": {
                  "type": "integer",
                  "description": "Unix epoch when the resource was last updated.\n",
                  "example": 1422386534
                },
                "tags": {
                  "type": "array",
                  "description": "The name to associate with the given key-set.\n",
                  "items": {
                    "type": "string"
                  }
                },
                "next": {
                  "type": "string",
                  "description": "Offset is used to paginate through the API. Provide this value to the next list operation to fetch the next page\n",
                  "example": "http://localhost:8001/key-sets?offset=6378122c-a0a1-438d-a5c6-efabae9fb969"
                }
              }
            },
            "examples": {
              "example": {
                "value": {
                  "id": "4D0DBDA-671C-11ED-BA0B-EF1DCCD3725F",
                  "name": "my-key_set",
                  "created_at": 1422386534,
                  "updated_at": 1422386534,
                  "tags": [
                    "string"
                  ],
                  "next": "http://localhost:8001/key-sets?offset=6378122c-a0a1-438d-a5c6-efabae9fb969"
                }
              }
            }
          }
        }
      },
      "plugin-response": {
        "description": "A plugin  entity represents a plugin configuration that will be executed during the HTTP request/response lifecycle.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "name": {
                  "type": "string",
                  "description": "The name of the plugin that’s going to be added. Currently, the plugin must be installed in every Kong instance separately.",
                  "example": "rate-limiting"
                },
                "created_at": {
                  "type": "integer",
                  "description": "Unix epoch when the resource was created."
                },
                "route": {
                  "type": "string",
                  "description": "If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the route being used. Default: `null`.With form-encoded, the notation is `route.id=<route id> or route.name=<route name>`. With JSON, use `\"route\":{\"id\":\"<route id>\"}` or `\"route\":{\"name\":\"<route name>\"}`.",
                  "nullable": true
                },
                "service": {
                  "type": "string",
                  "description": "If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified service.",
                  "nullable": true
                },
                "consumer": {
                  "type": "string",
                  "description": "If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.)",
                  "nullable": true
                },
                "instance_name": {
                  "type": "string",
                  "description": "The plugin instance name.\n",
                  "example": "rate-limiting-foo"
                },
                "config": {
                  "type": "object",
                  "description": "The configuration properties for the plugin",
                  "properties": {
                    "hour": {
                      "type": "integer",
                      "example": 500
                    },
                    "minute": {
                      "type": "integer",
                      "example": 500
                    }
                  }
                },
                "protocols": {
                  "type": "array",
                  "description": "A list of the request protocols that will trigger this plugin.",
                  "items": {
                    "type": "string",
                    "enum": [
                      "http",
                      "grpc",
                      "grpcs",
                      "tls",
                      "tcp"
                    ],
                    "default": "http"
                  }
                },
                "enabled": {
                  "type": "boolean",
                  "description": "Whether the plugin is applied. Default: `true`.\n",
                  "default": true
                },
                "tags": {
                  "type": "array",
                  "description": "An optional set of strings associated with the plugin for grouping and filtering.\n",
                  "items": {
                    "type": "string"
                  }
                },
                "ordering": {
                  "type": "object",
                  "description": "Describes a dependency to another plugin to determine plugin ordering during the access phase.\n–`before`: The plugin will be executed before a specified plugin or list of plugins.\n– `after`: The plugin will be executed after a specified plugin or list of plugins.",
                  "properties": {
                    "before": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            "x-examples": {
              "Example 1": {
                "id": "ce44eef5-41ed-47f6-baab-f725cecf98c7",
                "name": "rate-limiting",
                "created_at": 1422386534,
                "route": null,
                "service": null,
                "consumer": null,
                "instance_name": "rate-limiting-foo",
                "config": {
                  "hour": 500,
                  "minute": 20
                },
                "protocols": [
                  "http",
                  "https"
                ],
                "enabled": true,
                "tags": [
                  "user-level",
                  "low-priority"
                ],
                "ordering": {
                  "before": [
                    "plugin-name"
                  ]
                }
              }
            },
            "examples": {
              "Plugin response": {
                "value": {
                  "data": [
                    {
                      "id": "02621eee-8309-4bf6-b36b-a82017a5393e",
                      "name": "rate-limiting",
                      "created_at": 1422386534,
                      "route": null,
                      "service": null,
                      "consumer": null,
                      "config": {
                        "hour": 500,
                        "minute": 20
                      },
                      "protocols": [
                        "http",
                        "https"
                      ],
                      "enabled": true,
                      "tags": [
                        "user-level",
                        "low-priority"
                      ],
                      "ordering": {
                        "before": [
                          "plugin-name"
                        ]
                      }
                    },
                    {
                      "id": "66c7b5c4-4aaf-4119-af1e-ee3ad75d0af4",
                      "name": "rate-limiting",
                      "created_at": 1422386534,
                      "route": null,
                      "service": null,
                      "consumer": null,
                      "config": {
                        "hour": 500,
                        "minute": 20
                      },
                      "protocols": [
                        "tcp",
                        "tls"
                      ],
                      "enabled": true,
                      "tags": [
                        "admin",
                        "high-priority",
                        "critical"
                      ],
                      "ordering": {
                        "after": [
                          "plugin-name"
                        ]
                      }
                    }
                  ],
                  "next": "http://localhost:8001/plugins?offset=6378122c-a0a1-438d-a5c6-efabae9fb969"
                }
              }
            }
          }
        }
      },
      "sni-response": {
        "description": "SNI response object",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "x-examples": {
                "Example 1": {
                  "data": [
                    {
                      "id": "147f5ef0-1ed6-4711-b77f-489262f8bff7",
                      "name": "my-sni",
                      "created_at": 1422386534,
                      "tags": [
                        "user-level",
                        "low-priority"
                      ],
                      "certificate": {
                        "id": "a3ad71a8-6685-4b03-a101-980a953544f6"
                      }
                    },
                    {
                      "id": "b87eb55d-69a1-41d2-8653-8d706eecefc0",
                      "name": "my-sni",
                      "created_at": 1422386534,
                      "tags": [
                        "admin",
                        "high-priority",
                        "critical"
                      ],
                      "certificate": {
                        "id": "4e8d95d4-40f2-4818-adcb-30e00c349618"
                      }
                    }
                  ],
                  "next": "http://localhost:8001/snis?offset=6378122c-a0a1-438d-a5c6-efabae9fb969"
                }
              },
              "properties": {
                "data": {
                  "type": "array",
                  "description": "Array of SNIs",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "example": "147f5ef0-1ed6-4711-b77f-489262f8bff7",
                        "description": "The unique identifier or the name attribute of the Certificate whose SNIs are to be retrieved. When using this endpoint, only SNIs associated to the specified Certificate will be listed."
                      },
                      "name": {
                        "type": "string",
                        "description": "The SNI name to associate with the given certificate.\n",
                        "example": "my-sni"
                      },
                      "created_at": {
                        "type": "integer",
                        "example": 1422386534,
                        "description": "Unix epoch when the resource was created.\n"
                      },
                      "tags": {
                        "type": "array",
                        "description": "An optional set of strings associated with the SNIs for grouping and filtering.\n",
                        "items": {
                          "type": "string"
                        }
                      },
                      "certificate": {
                        "type": "object",
                        "description": "The id (a UUID) of the certificate with which to associate the SNI hostname. The Certificate must have a valid private key associated with it to be used by the SNI object.\n",
                        "properties": {
                          "id": {
                            "type": "string",
                            "example": "2e013e8-7623-4494-a347-6d29108ff68b",
                            "description": "The unique identifier or the name attribute of the Certificate whose SNIs"
                          }
                        }
                      }
                    }
                  }
                },
                "next": {
                  "type": "string",
                  "example": "http://localhost:8001/snis?offset=6378122c-a0a1-438d-a5c6-efabae9fb969",
                  "description": "Offset is used to paginate through the API. Provide this value to the next list operation to fetch the next page"
                }
              }
            }
          }
        }
      },
      "consumer-response-data": {
        "description": "The consumer object response body",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "x-examples": {
                "Example 1": {
                  "data": [
                    {
                      "id": "a4407883-c166-43fd-80ca-3ca035b0cdb7",
                      "created_at": 1422386534,
                      "username": "my-username",
                      "custom_id": "my-custom-id",
                      "tags": [
                        "user-level",
                        "low-priority"
                      ]
                    },
                    {
                      "id": "01c23299-839c-49a5-a6d5-8864c09184af",
                      "created_at": 1422386534,
                      "username": "my-username",
                      "custom_id": "my-custom-id",
                      "tags": [
                        "admin",
                        "high-priority",
                        "critical"
                      ]
                    }
                  ],
                  "next": "http://localhost:8001/consumers?offset=6378122c-a0a1-438d-a5c6-efabae9fb969"
                }
              },
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "The unique identifier or the name attribute of the consumer.",
                        "example": "a4407883-c166-43fd-80ca-3ca035b0cdb7"
                      },
                      "created_at": {
                        "type": "integer",
                        "description": "Unix epoch when the resource was created.",
                        "example": 1422386534
                      },
                      "username": {
                        "type": "string",
                        "description": "The unique username of the consumer. You must send either this field or` custom_i`d with the request.",
                        "example": "my-username"
                      },
                      "custom_id": {
                        "type": "string",
                        "description": "Field for storing an existing unique ID for the Consumer - useful for mapping Kong with users in your existing database. You must send either this field or `username` with the request.",
                        "example": "my-custom-id"
                      },
                      "tags": {
                        "type": "array",
                        "description": "An optional set of strings associated with the Consumer for grouping and filtering.\n",
                        "items": {
                          "type": "string",
                          "example": "admin"
                        }
                      }
                    }
                  }
                },
                "next": {
                  "type": "string",
                  "description": "Pagination information",
                  "example": "http://localhost:8001/consumers?offset=6378122c-a0a1-438d-a5c6-efabae9fb969"
                }
              }
            }
          }
        }
      },
      "consumer_group_response": {
        "description": "The consumer group response body",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "x-examples": {
                "Example 1": {
                  "consumer_group": {
                    "created_at": 1638917780,
                    "id": "be4bcfca-b1df-4fac-83cc-5cf6774bf48e",
                    "name": "JL",
                    "tags": null
                  }
                }
              },
              "properties": {
                "consumer_group": {
                  "type": "object",
                  "properties": {
                    "created_at": {
                      "type": "integer",
                      "description": "Unix epoch when the resource was created.",
                      "example": 1638918560
                    },
                    "id": {
                      "type": "string",
                      "description": "The UUID of the consumer group",
                      "example": "42b022c1-eb3c-4512-badc-1aee8c0f50b5"
                    },
                    "name": {
                      "type": "string",
                      "description": "The name of the consumer group",
                      "example": "my_group"
                    },
                    "tags": {
                      "description": "An optional set of strings associated with consumer group for grouping and filtering."
                    }
                  }
                }
              }
            },
            "examples": {
              "Consumer group example": {
                "value": {
                  "consumer_group": {
                    "created_at": 0,
                    "id": "42b022c1-eb3c-4512-badc-1aee8c0f50b5",
                    "name": "my_group",
                    "tags": "red"
                  }
                }
              }
            }
          }
        }
      },
      "add_consumer_to_group_response": {
        "description": "The object returns information about the consumer and the group",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "x-examples": {
                "Example 1": {
                  "consumer": {
                    "created_at": 1638918560,
                    "custom_id": null,
                    "id": "288f2bfc-04e2-4ec3-b6f3-40408dff5417",
                    "tags": null,
                    "type": 0,
                    "username": "BarryAllen",
                    "username_lower": "barryallen"
                  },
                  "consumer_groups": [
                    {
                      "created_at": 1638918476,
                      "id": "e2c3f16e-22c7-4ef4-b6e4-ab25c522b339",
                      "name": "JL",
                      "tags": null
                    }
                  ]
                }
              },
              "properties": {
                "consumer": {
                  "type": "object",
                  "properties": {
                    "created_at": {
                      "type": "integer",
                      "description": "Unix epoch when the resource was created.",
                      "example": 1638918560
                    },
                    "custom_id": {
                      "type": "string",
                      "description": "Field for storing an existing unique ID for the Consumer - useful for mapping Kong with users in your existing database. You must send either this field or `username` with the request.",
                      "nullable": true
                    },
                    "id": {
                      "type": "string",
                      "description": "The UUID for the consumer"
                    },
                    "tags": {
                      "type": "array",
                      "description": "An optional set of strings associated with consumer group for grouping and filtering.",
                      "nullable": true
                    },
                    "type": {
                      "type": "integer",
                      "default": 0,
                      "example": 0
                    },
                    "username": {
                      "type": "string",
                      "description": "The unique username of the Consumer. You must send either this field or `custom_id` with the request."
                    },
                    "username_lower": {
                      "type": "string",
                      "description": "A lowercase representation of the username"
                    }
                  }
                },
                "consumer_groups": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "created_at": {
                        "type": "integer",
                        "description": "Unix epoch when the resource was created."
                      },
                      "id": {
                        "type": "string",
                        "description": "The UUID for the consumer group"
                      },
                      "name": {
                        "type": "string",
                        "description": "The name of the consumer group"
                      },
                      "tags": {
                        "type": "array",
                        "description": "An optional set of strings associated with consumer group for grouping and filtering.",
                        "nullable": true
                      }
                    }
                  }
                }
              }
            },
            "examples": {
              "Example": {
                "value": {
                  "consumer": {
                    "created_at": 0,
                    "custom_id": null,
                    "id": "string",
                    "tags": null,
                    "type": 0,
                    "username": "string",
                    "username_lower": "string"
                  },
                  "consumer_groups": [
                    {
                      "created_at": 0,
                      "id": "string",
                      "name": "string",
                      "tags": [
                        "red"
                      ]
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "consumer_response": {
        "description": "A consumer response object",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "x-examples": {
                "Example 1": {
                  "consumers": [
                    {
                      "created_at": 1638918560,
                      "id": "288f2bfc-04e2-4ec3-b6f3-40408dff5417",
                      "type": 0,
                      "username": "BarryAllen",
                      "username_lower": "barryallen"
                    }
                  ]
                }
              },
              "properties": {
                "consumers": {
                  "type": "array",
                  "description": "The consumers array contains consumer objects",
                  "items": {
                    "type": "object",
                    "properties": {
                      "created_at": {
                        "type": "integer",
                        "description": "Unix epoch when the resource was created.",
                        "example": 1638918560
                      },
                      "id": {
                        "type": "string",
                        "example": "288f2bfc-04e2-4ec3-b6f3-40408dff5417",
                        "description": "The consumer ID"
                      },
                      "type": {
                        "type": "integer",
                        "default": 0,
                        "example": 0
                      },
                      "username": {
                        "type": "string",
                        "example": "BarryAllen",
                        "description": "The username of the consumer"
                      },
                      "username_lower": {
                        "type": "string",
                        "example": "barryallen",
                        "description": "Lowercase representation of the consumer username."
                      },
                      "tags": {
                        "type": "array",
                        "description": "tags",
                        "items": {
                          "type": "string",
                          "example": "test"
                        }
                      }
                    }
                  }
                },
                "id": {
                  "type": "string",
                  "default": "496a3eae-5f7f-4e70-b254-95d5c9b8b764",
                  "description": "Consumer ID"
                }
              }
            },
            "examples": {
              "One consumer": {
                "value": {
                  "consumers": [
                    {
                      "created_at": 1638918560,
                      "id": "288f2bfc-04e2-4ec3-b6f3-40408dff5417",
                      "type": 0,
                      "username": "BarryAllen",
                      "username_lower": "barryallen"
                    }
                  ]
                }
              },
              "Multiple consumers": {
                "value": {
                  "next": null,
                  "data": [
                    {
                      "type": 0,
                      "username_lower": "angel",
                      "created_at": 1683054731,
                      "custom_id": "123412312312312312312312",
                      "username": "angel",
                      "tags": null,
                      "id": "1ec7a260-b005-46b4-89e2-c62a417aa45c"
                    },
                    {
                      "type": 0,
                      "username_lower": "repr",
                      "created_at": 1682006579,
                      "custom_id": "nisi in id ad",
                      "username": "repr",
                      "tags": [
                        "Duis aliqua in",
                        "velit deserunt non dolor"
                      ],
                      "id": "4e8032e7-02b9-460c-8b2c-a6fee42aea51"
                    },
                    {
                      "type": 0,
                      "username_lower": "bob-the-builder",
                      "created_at": 1682006428,
                      "custom_id": "4200",
                      "username": "bob-the-builder",
                      "tags": [
                        "silver-tier"
                      ],
                      "id": "8a388226-80e8-4027-a486-25e4f7db5d21"
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "license-response": {
        "description": "The license response object. ",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "x-examples": {
                "Example 1": {
                  "created_at": 1500508800,
                  "id": "30b4edb7-0847-4f65-af90-efbed8b0161f",
                  "payload": "{\"license\":{\"payload\":{\"admin_seats\":\"1\",\"customer\":\"Example Company, Inc\",\"dataplanes\":\"1\",\"license_creation_date\":\"2017-07-20\",\"license_expiration_date\":\"2017-07-21\",\"license_key\":\"00141000017ODj3AAG_a1V41000004wT0OEAU\",\"product_subscription\":\"Konnect Enterprise\",\"support_plan\":\"None\"},\"signature\":\"24cc21223633044c15c300be19cacc26ccc5aca0dd9a12df8a7324a1970fe304bc07b8dcd7fb08d7b92e04169313377ae3b550ead653b951bc44cd2eb59f6beb\",\"version\":\"1\"}}",
                  "updated_at": 1500508800
                }
              },
              "properties": {
                "created_at": {
                  "type": "integer",
                  "example": 1500508800
                },
                "id": {
                  "type": "string",
                  "example": "30b4edb7-0847-4f65-af90-efbed8b0161f",
                  "description": "The UUID of the license"
                },
                "payload": {
                  "type": "string",
                  "example": "{\\\"license\\\":{\\\"payload\\\":{\\\"admin_seats\\\":\\\"1\\\",\\\"customer\\\":\\\"Example Company, Inc\\\",\\\"dataplanes\\\":\\\"1\\\",\\\"license_creation_date\\\":\\\"2017-07-20\\\",\\\"license_expiration_date\\\":\\\"2017-07-21\\\",\\\"license_key\\\":\\\"00141000017ODj3AAG_a1V41000004wT0OEAU\\\",\\\"product_subscription\\\":\\\"Konnect Enterprise\\\",\\\"support_plan\\\":\\\"None\\\"},\\\"signature\\\":\\\"24cc21223633044c15c300be19cacc26ccc5aca0dd9a12df8a7324a1970fe304bc07b8dcd7fb08d7b92e04169313377ae3b550ead653b951bc44cd2eb59f6beb\\\",\\\"version\\\":\\\"1\\\"}}",
                  "description": "The Kong Gateway license in JSON format.\n"
                },
                "updated_at": {
                  "type": "integer",
                  "example": 1500508800
                }
              }
            },
            "examples": {
              "Active license": {
                "value": {
                  "created_at": 1500508800,
                  "id": "30b4edb7-0847-4f65-af90-efbed8b0161f",
                  "payload": "{\\\"license\\\":{\\\"payload\\\":{\\\"admin_seats\\\":\\\"1\\\",\\\"customer\\\":\\\"Example Company, Inc\\\",\\\"dataplanes\\\":\\\"1\\\",\\\"license_creation_date\\\":\\\"2017-07-20\\\",\\\"license_expiration_date\\\":\\\"2017-07-21\\\",\\\"license_key\\\":\\\"00141000017ODj3AAG_a1V41000004wT0OEAU\\\",\\\"product_subscription\\\":\\\"Konnect Enterprise\\\",\\\"support_plan\\\":\\\"None\\\"},\\\"signature\\\":\\\"24cc21223633044c15c300be19cacc26ccc5aca0dd9a12df8a7324a1970fe304bc07b8dcd7fb08d7b92e04169313377ae3b550ead653b951bc44cd2eb59f6beb\\\",\\\"version\\\":\\\"1\\\"}}",
                  "updated_at": 1500508800
                }
              },
              "No license": {
                "value": {
                  "data": [],
                  "next": null
                }
              }
            }
          }
        }
      },
      "report-response": {
        "description": "Fields available in the report",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "x-examples": {
                "Example 1": {
                  "counters": [
                    {
                      "bucket": "2021-12",
                      "request_count": 0
                    }
                  ],
                  "db_version": "postgres 9.6.19",
                  "kong_version": "3.2.2.1",
                  "license_key": "ASDASDASDASDASDASDASDASDASD_ASDASDA",
                  "rbac_users": 0,
                  "services_count": 0,
                  "system_info": {
                    "cores": 4,
                    "hostname": "13b867agsa008",
                    "uname": "Linux x86_64"
                  },
                  "workspaces_count": 1
                }
              },
              "properties": {
                "counters": {
                  "type": "array",
                  "description": "Counts the number of requests made in a given month.\n",
                  "items": {
                    "type": "object",
                    "properties": {
                      "bucket": {
                        "type": "string",
                        "description": " Year and month when the requests were processed. If the value in bucket is UNKNOWN, then the requests were processed before Kong Gateway 2.7.0.1.",
                        "example": "2021-12"
                      },
                      "request_count": {
                        "type": "integer",
                        "description": "Number of requests processed in the given month and year.",
                        "example": 0
                      }
                    }
                  }
                },
                "db_version": {
                  "type": "string",
                  "description": "The type and version of the data store Kong Gateway is using.\n",
                  "example": "postgres 9.6.19"
                },
                "kong_version": {
                  "type": "string",
                  "description": "The version of the Kong Gateway instance.\n",
                  "example": "3.2.2.1"
                },
                "license_key": {
                  "type": "string",
                  "description": "An encrypted identifier for the current license key. If no license is present, the field displays as UNLICENSED.\n",
                  "example": "ASDASDASDASDASDASDASDASDASD_ASDASDA"
                },
                "rbac_users": {
                  "type": "integer",
                  "description": "The number of users registered with through RBAC.\n",
                  "example": 0
                },
                "services_count": {
                  "type": "integer",
                  "description": "The number of configured services in the Kong Gateway instance.\n",
                  "example": 0
                },
                "system_info": {
                  "type": "object",
                  "description": "Displays information about the system running Kong Gateway.\n",
                  "properties": {
                    "cores": {
                      "type": "integer",
                      "description": "Number of CPU cores on the node",
                      "example": 11
                    },
                    "hostname": {
                      "type": "string",
                      "description": "Encrypted system hostname",
                      "example": "13b867agsa008"
                    },
                    "uname": {
                      "type": "string",
                      "description": " Operating system",
                      "example": "Linux x86_64"
                    }
                  }
                },
                "workspaces_count": {
                  "type": "integer",
                  "description": "The number of workspaces configured in the Kong Gateway instance.\n",
                  "example": 1
                }
              }
            }
          }
        }
      },
      "key-ring-response": {
        "description": "The contents of the keyring.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "x-examples": {
                "Example 1": {
                  "ids": [
                    "LaW1urRQ"
                  ],
                  "active": "LaW1urRQ"
                }
              },
              "description": "The keyring object contains an array of keyring ids.",
              "properties": {
                "ids": {
                  "type": "array",
                  "description": "The list of the active key IDs",
                  "items": {
                    "type": "string",
                    "example": "LaW1urRQ"
                  }
                },
                "active": {
                  "type": "string",
                  "example": "LaW1urRQ",
                  "description": "The ID of the active key."
                }
              }
            },
            "examples": {
              "example": {
                "value": {
                  "ids": [
                    "LaW1urRQ"
                  ],
                  "active": "LaW1urRQ"
                }
              }
            }
          }
        }
      },
      "keyring-generate-response": {
        "description": "Keyring response object",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "key": {
                  "type": "string"
                },
                "id": {
                  "type": "string"
                }
              },
              "x-examples": {
                "Example 1": {
                  "key": "t6NWgbj3g9cbNVC3/D6oZ2Md1Br5gWtRrqb1T2FZy44=",
                  "id": "8zgITLQh"
                }
              }
            }
          }
        }
      },
      "workspace-response": {
        "description": "The workspace response object.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Workspace"
            }
          }
        }
      },
      "workspace_create_response": {
        "description": "The response object for creating a new workspace.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "x-examples": {
                "Example 1": {
                  "total": 1,
                  "data": [
                    {
                      "created_at": 1529627841000,
                      "id": "a43fc3f9-98e4-43b0-b703-c3b1004980d5",
                      "name": "default"
                    }
                  ]
                }
              },
              "properties": {
                "total": {
                  "type": "integer",
                  "description": "The amount of workspaces."
                },
                "data": {
                  "type": "array",
                  "description": "The array of workspaces",
                  "items": {
                    "type": "object",
                    "properties": {
                      "created_at": {
                        "type": "integer",
                        "example": 1529627841000,
                        "description": "The time and date of workspace creation."
                      },
                      "id": {
                        "type": "string",
                        "example": "a43fc3f9-98e4-43b0-b703-c3b1004980d5",
                        "description": "The unique ID of the workspace"
                      },
                      "name": {
                        "type": "string",
                        "description": "The name assigned in the request body.",
                        "example": "default"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "requestBodies": {
      "vault-request": {
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "x-examples": {
                "Example 1": {
                  "prefix": "env",
                  "name": "env",
                  "description": "This vault is used to retrieve redis database access credentials",
                  "config": {
                    "prefix": "SSL_"
                  },
                  "tags": [
                    "database-credentials",
                    "data-plane"
                  ]
                }
              },
              "properties": {
                "prefix": {
                  "type": "string",
                  "description": "The unique prefix (or identifier) for this Vault configuration. The prefix is used to load the right Vault configuration and implementation when referencing secrets with the other entities.\n",
                  "example": "env"
                },
                "name": {
                  "type": "string",
                  "description": "The name of the Vault that’s going to be added. Currently, the Vault implementation must be installed in every Kong instance.\n",
                  "example": "env"
                },
                "description": {
                  "type": "string",
                  "description": "The description of the Vault object.\n",
                  "example": "This vault is used to retrieve redis database access credentials"
                },
                "config": {
                  "type": "object",
                  "description": "The configuration properties for the Vault which can be found on the vaults’ documentation page.\n",
                  "properties": {
                    "prefix": {
                      "type": "string",
                      "example": "SSL_"
                    }
                  }
                },
                "tags": {
                  "type": "array",
                  "description": "An optional set of strings associated with the Vault for grouping and filtering.\n",
                  "items": {
                    "type": "string"
                  }
                }
              }
            },
            "examples": {
              "Example 1": {
                "value": {
                  "prefix": "env",
                  "name": "env",
                  "description": "This vault is used to retrieve redis database access credentials",
                  "config": {
                    "prefix": "SSL_"
                  },
                  "tags": [
                    "database-credentials",
                    "data-plane"
                  ]
                }
              }
            }
          }
        },
        "description": "The request object for creating a new vault object."
      },
      "target-request": {
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "x-examples": {
                "Example 1": {
                  "upstream": {
                    "id": "bdab0e47-4e37-4f0b-8fd0-87d95cc4addc"
                  },
                  "target": "example.com:8000",
                  "weight": 100,
                  "tags": [
                    "user-level",
                    "low-priority"
                  ]
                }
              },
              "properties": {
                "upstream": {
                  "type": "object",
                  "description": "The unique identifier or the name of the upstream for which to update the target.\n",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "173a6cee-90d1-40a7-89cf-0329eca780a6",
                      "description": "The unique identifier or the name of the upstream for which to update the target."
                    }
                  }
                },
                "weight": {
                  "default": 100,
                  "description": "The weight this target gets within the upstream loadbalancer (`0`-`65535`). If the hostname resolves to an SRV record, the `weight` value will be overridden by the value from the DNS record.",
                  "type": "integer",
                  "minimum": 0,
                  "maximum": 65535
                },
                "tags": {
                  "type": "array",
                  "description": "An optional set of strings associated with the Target for grouping and filtering.",
                  "items": {
                    "type": "string"
                  }
                }
              }
            },
            "examples": {
              "Example": {
                "value": {
                  "upstream": {
                    "id": "173a6cee-90d1-40a7-89cf-0329eca780a6"
                  },
                  "weight": 100,
                  "tags": [
                    "string"
                  ]
                }
              }
            }
          }
        },
        "description": "The request body for creating a new target entity."
      },
      "upstream-request": {
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "x-examples": {
                "Example 1": {
                  "id": "58c8ccbb-eafb-4566-991f-2ed4f678fa70",
                  "created_at": 1422386534,
                  "name": "my-upstream",
                  "algorithm": "round-robin",
                  "hash_on": "none",
                  "hash_fallback": "none",
                  "hash_on_cookie_path": "/",
                  "slots": 10000,
                  "healthchecks": {
                    "passive": {
                      "type": "http",
                      "healthy": {
                        "http_statuses": [
                          200,
                          201,
                          202,
                          203,
                          204,
                          205,
                          206,
                          207,
                          208,
                          226,
                          300,
                          301,
                          302,
                          303,
                          304,
                          305,
                          306,
                          307,
                          308
                        ],
                        "successes": 0
                      },
                      "unhealthy": {
                        "http_statuses": [
                          429,
                          500,
                          503
                        ],
                        "timeouts": 0,
                        "http_failures": 0,
                        "tcp_failures": 0
                      }
                    },
                    "active": {
                      "https_verify_certificate": true,
                      "healthy": {
                        "http_statuses": [
                          200,
                          302
                        ],
                        "successes": 0,
                        "interval": 0
                      },
                      "unhealthy": {
                        "http_failures": 0,
                        "http_statuses": [
                          429,
                          404,
                          500,
                          501,
                          502,
                          503,
                          504,
                          505
                        ],
                        "timeouts": 0,
                        "tcp_failures": 0,
                        "interval": 0
                      },
                      "type": "http",
                      "concurrency": 10,
                      "headers": [
                        {
                          "x-my-header": [
                            "foo",
                            "bar"
                          ],
                          "x-another-header": [
                            "bla"
                          ]
                        }
                      ],
                      "timeout": 1,
                      "http_path": "/",
                      "https_sni": "example.com"
                    },
                    "threshold": 0
                  },
                  "tags": [
                    "user-level",
                    "low-priority"
                  ],
                  "host_header": "example.com",
                  "client_certificate": {
                    "id": "ea29aaa3-3b2d-488c-b90c-56df8e0dd8c6"
                  },
                  "use_srv_name": false
                }
              },
              "properties": {
                "name": {
                  "type": "string",
                  "description": "This is a hostname, which must be equal to the `host` of a service.",
                  "example": "my-upstream"
                },
                "algorithm": {
                  "type": "string",
                  "description": "Which load balancing algorithm to use. Accepted values are: `\"consistent-hashing\"`, `\"least-connections\"`,` \"round-robin\"`. Default: `\"round-robin\"`.\n",
                  "enum": [
                    "consistent-hashing",
                    "least-connections",
                    "round-robin",
                    "latency"
                  ],
                  "default": "round-robin",
                  "example": "round-robin"
                },
                "hash_on": {
                  "type": "string",
                  "description": "What to use as hashing input. Using none results in a weighted-round-robin scheme with no hashing",
                  "default": "none",
                  "enum": [
                    "none",
                    "consumer",
                    "ip",
                    "cookie",
                    "uri_capture",
                    "path",
                    "query_arg"
                  ]
                },
                "hash_fallback": {
                  "type": "string",
                  "description": "What to use as hashing input if the primary hash_on does not return a hash (eg. header is missing, or no Consumer identified). Not available if hash_on is set to cookie.",
                  "default": "none",
                  "enum": [
                    "none",
                    "consumer",
                    "ip",
                    "cookie",
                    "uri_capture",
                    "path",
                    "query_arg"
                  ],
                  "example": "none"
                },
                "hash_on_header": {
                  "type": "string",
                  "description": "The header name to take the value from as hash input. Only required when `hash_on` is set to header.",
                  "example": "none"
                },
                "hash_fallback_header": {
                  "type": "string",
                  "description": "The header name to take the value from as hash input. Only required when hash_fallback is set to header.",
                  "default": "none",
                  "example": "none"
                },
                "hash_on_cookie": {
                  "type": "string",
                  "description": "The cookie name to take the value from as hash input. Only required when `hash_on` or `hash_fallback` is set to `cookie`. If the specified cookie is not in the request, Kong will generate a value and set the cookie in the response.",
                  "example": "none"
                },
                "hash_on_cookie_path": {
                  "type": "string",
                  "description": "The cookie path to set in the response headers. Only required when `hash_on` or `hash_fallback` is set to `cookie`. Default: `/`.",
                  "default": "/",
                  "example": "/"
                },
                "hash_on_query_arg": {
                  "type": "string",
                  "description": "The name of the query string argument to take the value from as hash input. Only required when `hash_on` is set to `query_arg`.",
                  "example": "hash_value"
                },
                "hash_fallback_query_arg": {
                  "type": "string",
                  "description": "The name of the query string argument to take the value from as hash input. Only required when `hash_fallback` is set to `query_arg`.",
                  "example": "hash_value"
                },
                "hash_on_uri_capture": {
                  "type": "string",
                  "description": "The name of the route URI capture to take the value from as hash input. Only required when `hash_on` is set to `uri_capture`.",
                  "example": "hash_value"
                },
                "hash_fallback_uri_capture": {
                  "type": "string",
                  "description": "The name of the route URI capture to take the value from as hash input. Only required when `hash_fallback` is set to `uri_capture`.",
                  "example": "hash_value"
                },
                "slots": {
                  "type": "integer",
                  "description": "The number of slots in the load balancer algorithm. If the algorithm is set to `round-robin`, this setting determines the maximum number of slots. If the algorithm is set to `consistent-hashing`, this setting determines the actual number of slots in the algorithm. Accepts an integer in the range 10-65536.",
                  "minimum": 10,
                  "maximum": 65536,
                  "default": 10000,
                  "example": 5000
                },
                "healthchecks": {
                  "type": "object",
                  "properties": {
                    "passive": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string",
                          "description": "Whether to perform passive health checks interpreting HTTP/HTTPS statuses, or just check for TCP connection success. In passive checks, http and https options are equivalent. Accepted values are: `tcp`, `http`, `https`, `grpc`, `grpcs`.",
                          "default": "http",
                          "enum": [
                            "tcp",
                            "http",
                            "https",
                            "grpc",
                            "grpcs"
                          ],
                          "example": "tcp"
                        },
                        "healthy": {
                          "type": "object",
                          "properties": {
                            "http_statuses": {
                              "type": "array",
                              "description": "An array of HTTP statuses which represent healthiness when produced by proxied traffic, as observed by passive health checks.  With form-encoded, the notation is `http_statuses[]=200&http_statuses[]=201`. With JSON, use an array.",
                              "default": [
                                200,
                                201,
                                202,
                                203,
                                204,
                                205,
                                206,
                                207,
                                208,
                                226,
                                300,
                                301,
                                302,
                                303,
                                304,
                                305,
                                306,
                                307,
                                308
                              ],
                              "example": [
                                200,
                                201,
                                202
                              ],
                              "items": {
                                "type": "integer",
                                "enum": [
                                  200,
                                  201,
                                  202,
                                  203,
                                  204,
                                  205,
                                  206,
                                  207,
                                  208,
                                  226,
                                  300,
                                  301,
                                  302,
                                  303,
                                  304,
                                  305,
                                  306,
                                  307,
                                  308
                                ]
                              }
                            },
                            "successes": {
                              "type": "integer",
                              "description": "Number of successes in proxied traffic (as defined by `healthchecks.passive.healthy.http_statuses`) to consider a target healthy, as observed by passive health checks.",
                              "default": 0,
                              "example": 2
                            }
                          }
                        },
                        "unhealthy": {
                          "type": "object",
                          "properties": {
                            "http_statuses": {
                              "type": "array",
                              "description": "An array of HTTP statuses which represent unhealthiness when produced by proxied traffic, as observed by passive health checks. With form-encoded, the notation is `http_statuses[]=429&http_statuses[]=500`. With JSON, use an array.",
                              "default": [
                                429,
                                500,
                                503
                              ],
                              "example": [
                                500,
                                503
                              ],
                              "items": {
                                "type": "integer",
                                "enum": [
                                  429,
                                  500,
                                  503
                                ]
                              }
                            },
                            "timeouts": {
                              "type": "integer",
                              "description": "Number of timeouts in proxied traffic to consider a target unhealthy, as observed by passive health checks.",
                              "default": 0,
                              "example": 1
                            },
                            "http_failures": {
                              "type": "integer",
                              "description": "Number of HTTP failures in proxied traffic (as defined by `healthchecks.passive.unhealthy.http_statuses`) to consider a target unhealthy, as observed by passive health checks.",
                              "default": 0,
                              "example": 3
                            },
                            "tcp_failures": {
                              "type": "integer",
                              "description": "Number of TCP connection failures to consider a target unhealthy, as observed by passive health checks.",
                              "default": 0,
                              "example": 1
                            }
                          }
                        }
                      }
                    },
                    "active": {
                      "type": "object",
                      "properties": {
                        "https_verify_certificate": {
                          "type": "boolean"
                        },
                        "healthy": {
                          "type": "object",
                          "properties": {
                            "http_statuses": {
                              "type": "array",
                              "description": "An array of HTTP statuses to consider a success, indicating healthiness, when returned by a probe in active health checks. With form-encoded, the notation is `http_statuses[]=200&http_statuses[]=302`. With JSON, use an array.",
                              "default": [
                                200,
                                302
                              ],
                              "example": [
                                200,
                                201
                              ],
                              "items": {
                                "type": "integer"
                              }
                            },
                            "successes": {
                              "type": "integer",
                              "description": "Number of successes in active probes (as defined by `healthchecks.active.healthy.http_statuses`) to consider a target healthy.",
                              "default": 0,
                              "example": 3
                            },
                            "interval": {
                              "type": "integer",
                              "description": "Interval between active health checks for healthy targets (in seconds). A value of zero indicates that active probes for healthy targets should not be performed.",
                              "default": 0,
                              "example": 30
                            }
                          }
                        },
                        "unhealthy": {
                          "type": "object",
                          "properties": {
                            "http_failures": {
                              "type": "integer",
                              "description": "Number of HTTP failures in active probes (as defined by `healthchecks.active.unhealthy.http_statuses`) to consider a target unhealthy.",
                              "default": 0,
                              "example": 2
                            },
                            "http_statuses": {
                              "type": "array",
                              "description": "An array of HTTP statuses to consider a failure, indicating unhealthiness, when returned by a probe in active health checks. With form-encoded, the notation is `http_statuses[]=429&http_statuses[]=404`. With JSON, use an array.",
                              "default": [
                                429,
                                404,
                                500,
                                501,
                                502,
                                503,
                                504,
                                505
                              ],
                              "example": [
                                400,
                                404
                              ],
                              "items": {
                                "type": "integer"
                              }
                            },
                            "timeouts": {
                              "type": "integer",
                              "description": "Number of timeouts in active probes to consider a target unhealthy.",
                              "default": 0,
                              "example": 2
                            },
                            "tcp_failures": {
                              "type": "integer",
                              "description": "Number of TCP failures in active probes to consider a target unhealthy.",
                              "default": 0,
                              "example": 1
                            },
                            "interval": {
                              "type": "integer",
                              "description": "Interval between active health checks for unhealthy targets (in seconds). A value of zero indicates that active probes for unhealthy targets should not be performed.",
                              "default": 0,
                              "example": 10
                            }
                          }
                        },
                        "type": {
                          "type": "string",
                          "description": "Whether to perform active health checks using HTTP or HTTPS, or just attempt a TCP connection.",
                          "enum": [
                            "tcp",
                            "http",
                            "https",
                            "grpc",
                            "grpcs"
                          ],
                          "default": "http",
                          "example": "https"
                        },
                        "concurrency": {
                          "type": "integer",
                          "description": "Number of targets to check concurrently in active health checks.",
                          "default": 10,
                          "example": 5
                        },
                        "headers": {
                          "type": "object",
                          "description": "One or more lists of values indexed by header name to use in GET HTTP request to run as a probe on active health checks. Values must be pre-formatted.",
                          "example": {
                            "x-my-header": [
                              "foo",
                              "bar"
                            ],
                            "x-another-header": [
                              "bla"
                            ]
                          }
                        },
                        "timeout": {
                          "type": "integer",
                          "description": "Socket timeout for active health checks (in seconds).",
                          "default": 1,
                          "example": 5
                        },
                        "http_path": {
                          "type": "string",
                          "description": "Path to use in GET HTTP request to run as a probe on active health checks.",
                          "default": "/"
                        },
                        "https_sni": {
                          "type": "string",
                          "description": "The hostname to use as an SNI (Server Name Identification) when performing active health checks using HTTPS. This is particularly useful when Targets are configured using IPs, so that the target host’s certificate can be verified with the proper SNI."
                        }
                      }
                    },
                    "threshold": {
                      "type": "integer",
                      "description": "The minimum percentage of the upstream’s targets’ weight that must be available for the whole upstream to be considered healthy.",
                      "minimum": 0,
                      "maximum": 100,
                      "default": 0
                    }
                  }
                },
                "tags": {
                  "type": "array",
                  "description": "An optional set of strings associated with the Upstream for grouping and filtering.",
                  "example": [
                    "user-level",
                    "low-priority"
                  ],
                  "items": {
                    "type": "string"
                  }
                },
                "host_header": {
                  "type": "string",
                  "description": "The hostname to be used as Host header when proxying requests through Kong."
                },
                "client_certificate": {
                  "type": "object",
                  "description": "If set, the certificate to be used as client certificate while TLS handshaking to the upstream server.",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "ea29aaa3-3b2d-488c-b90c-56df8e0dd8c6"
                    }
                  }
                },
                "use_srv_name": {
                  "type": "boolean",
                  "description": "If set, the balancer will use SRV hostname(if DNS Answer has SRV record) as the proxy upstream Host.",
                  "example": false
                }
              },
              "required": [
                "name"
              ]
            },
            "examples": {
              "Upstream": {
                "value": {
                  "name": "my-upstream",
                  "algorithm": "round-robin",
                  "hash_on": "none",
                  "hash_fallback": "none",
                  "hash_on_cookie_path": "/",
                  "slots": 10000,
                  "healthchecks": {
                    "passive": {
                      "type": "http",
                      "healthy": {
                        "http_statuses": [
                          200,
                          201,
                          202,
                          203,
                          204,
                          205,
                          206,
                          207,
                          208,
                          226,
                          300,
                          301,
                          302,
                          303,
                          304,
                          305,
                          306,
                          307,
                          308
                        ],
                        "successes": 0
                      },
                      "unhealthy": {
                        "http_statuses": [
                          429,
                          500,
                          503
                        ],
                        "timeouts": 0,
                        "http_failures": 0,
                        "tcp_failures": 0
                      }
                    },
                    "active": {
                      "https_verify_certificate": true,
                      "healthy": {
                        "http_statuses": [
                          200,
                          302
                        ],
                        "successes": 0,
                        "interval": 0
                      },
                      "unhealthy": {
                        "http_failures": 0,
                        "http_statuses": [
                          429,
                          404,
                          500,
                          501,
                          502,
                          503,
                          504,
                          505
                        ],
                        "timeouts": 0,
                        "tcp_failures": 0,
                        "interval": 0
                      },
                      "type": "http",
                      "concurrency": 10,
                      "headers": {
                        "type": "object",
                        "properties": {
                          "x-my-header": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            },
                            "description": "The value(s) of the x-my-header header."
                          },
                          "x-another-header": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            },
                            "description": "The value(s) of the x-another-header header."
                          }
                        }
                      },
                      "timeout": 1,
                      "http_path": "/",
                      "https_sni": "example.com"
                    },
                    "threshold": 0
                  },
                  "tags": [
                    "user-level",
                    "low-priority"
                  ],
                  "host_header": "example.com",
                  "client_certificate": {
                    "id": "ea29aaa3-3b2d-488c-b90c-56df8e0dd8c6"
                  },
                  "use_srv_name": false
                }
              },
              "Example request": {
                "value": {
                  "name": "my-upstream",
                  "tags": [
                    "user-level",
                    "low-priority"
                  ],
                  "algorithm": "round-robin"
                }
              }
            }
          }
        },
        "description": "The request object for creating a new upstream."
      },
      "service-request": {
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "x-examples": {
                "Example 1": {
                  "id": "9748f662-7711-4a90-8186-dc02f10eb0f5",
                  "created_at": 1422386534,
                  "updated_at": 1422386534,
                  "name": "my-service",
                  "retries": 5,
                  "protocol": "http",
                  "host": "example.com",
                  "port": 80,
                  "path": "/some_api",
                  "connect_timeout": 60000,
                  "write_timeout": 60000,
                  "read_timeout": 60000,
                  "tags": [
                    "user-level",
                    "low-priority"
                  ],
                  "client_certificate": {
                    "id": "4e3ad2e4-0bc4-4638-8e34-c84a417ba39b"
                  },
                  "tls_verify": true,
                  "tls_verify_depth": null,
                  "ca_certificates": [
                    "4e3ad2e4-0bc4-4638-8e34-c84a417ba39b",
                    "51e77dc2-8f3e-4afa-9d0e-0e3bbbcfd515"
                  ],
                  "enabled": true
                }
              },
              "properties": {
                "name": {
                  "type": "string",
                  "description": "The service name.\n",
                  "example": "my-service"
                },
                "retries": {
                  "type": "integer",
                  "description": "The number of retries to execute upon failure to proxy. Default:`5`.\n",
                  "default": 5,
                  "example": 5
                },
                "protocol": {
                  "type": "string",
                  "description": "The protocol used to communicate with the upstream. Accepted values are: \"`grpc`\", \"`grpcs`\", \"`http`\", \"`https`\", \"`tcp`\", \"`tls`\", \"`tls_passthrough`\", \"`udp`\", \"`ws`\" \n, \"`wss`\" \n. Default: \"`http`\".",
                  "default": "http",
                  "enum": [
                    "grpc",
                    "grpcs",
                    "http",
                    "https",
                    "tcp",
                    "tls ",
                    "tls_passthrough",
                    "udp",
                    "ws",
                    "wss"
                  ],
                  "example": "http"
                },
                "host": {
                  "type": "string",
                  "description": "The host of the upstream server. Note that the host value is case sensitive.\n",
                  "example": "example.com"
                },
                "port": {
                  "type": "integer",
                  "description": "The upstream server port. Default: `80`.\n",
                  "default": 80,
                  "example": 80
                },
                "path": {
                  "type": "string",
                  "description": "The path to be used in requests to the upstream server.\n",
                  "example": "/some_api"
                },
                "connect_timeout": {
                  "type": "integer",
                  "description": "The timeout in milliseconds for establishing a connection to the upstream server. Default: `60000`.",
                  "default": 6000,
                  "example": 6000
                },
                "write_timeout": {
                  "type": "integer",
                  "description": "The timeout in milliseconds between two successive write operations for transmitting a request to the upstream server. Default: `60000`.\n",
                  "default": 6000,
                  "example": 6000
                },
                "read_timeout": {
                  "type": "integer",
                  "description": "The timeout in milliseconds between two successive read operations for transmitting a request to the upstream server. Default: `60000`.\n",
                  "default": 6000,
                  "example": 6000
                },
                "tags": {
                  "type": "array",
                  "description": "An optional set of strings associated with the service for grouping and filtering.\n",
                  "items": {
                    "type": "string",
                    "example": "user-level"
                  }
                },
                "client_certificate": {
                  "type": "object",
                  "description": "Certificate to be used as client certificate while TLS handshaking to the upstream server. With form-encoded, the notation is `client_certificate.id=<client_certificate id>`. With JSON, use `\"client_certificate\":{\"id\":\"<client_certificate id>\"}`.",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "4e3ad2e4-0bc4-4638-8e34-c84a417ba39b"
                    }
                  }
                },
                "tls_verify": {
                  "type": "boolean",
                  "description": "Whether to enable verification of upstream server TLS certificate. If set to null, then the Nginx default is respected.\n",
                  "default": true
                },
                "tls_verify_depth": {
                  "type": "string",
                  "description": "Maximum depth of chain while verifying Upstream server’s TLS certificate. If set to null, then the Nginx default is respected. Default: null.\n",
                  "example": "respected",
                  "default": null,
                  "nullable": true
                },
                "ca_certificates": {
                  "type": "array",
                  "description": "Array of CA Certificate object UUIDs that are used to build the trust store while verifying upstream server’s TLS certificate. If set to null when Nginx default is respected. With form-encoded, the notation is `ca_certificates[]=4e3ad2e4-0bc4-4638-8e34-c84a417ba39b&ca_certificates[]=51e77dc2-8f3e-4afa-9d0e-0e3bbbcfd515`. With JSON, use an Array.",
                  "items": {
                    "type": "string",
                    "example": "4e3ad2e4-0bc4-4638-8e34-c84a417ba39b"
                  }
                },
                "enabled": {
                  "type": "boolean",
                  "default": true,
                  "description": "Whether the service is active. If set to `false`, the proxy behavior will be as if any routes attached to it do not exist (404). Default: `true`."
                }
              },
              "required": [
                "protocol",
                "host",
                "port",
                "enabled"
              ]
            },
            "examples": {
              "Example": {
                "value": {
                  "name": "my-service",
                  "retries": 5,
                  "protocol": "http",
                  "host": "example.com",
                  "port": 80,
                  "path": "/some_api",
                  "connect_timeout": 6000,
                  "write_timeout": 6000,
                  "read_timeout": 6000,
                  "tags": [
                    "user-level"
                  ],
                  "client_certificate": {
                    "id": "4e3ad2e4-0bc4-4638-8e34-c84a417ba39b"
                  },
                  "tls_verify": true,
                  "tls_verify_depth": null,
                  "ca_certificates": [
                    "4e3ad2e4-0bc4-4638-8e34-c84a417ba39b"
                  ],
                  "enabled": true
                }
              }
            }
          }
        },
        "description": "The request body for creating a new service entity."
      },
      "route-request": {
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "x-examples": {
                "Example 1": {
                  "name": "my-route",
                  "protocols": [
                    "http",
                    "https"
                  ],
                  "methods": [
                    "GET",
                    "POST"
                  ],
                  "hosts": [
                    "example.com",
                    "foo.test"
                  ],
                  "paths": [
                    "/foo",
                    "/bar"
                  ],
                  "headers": {
                    "x-my-header": [
                      "foo",
                      "bar"
                    ],
                    "x-another-header": [
                      "bla"
                    ]
                  },
                  "https_redirect_status_code": 426,
                  "regex_priority": 0,
                  "strip_path": true,
                  "path_handling": "v0",
                  "preserve_host": false,
                  "request_buffering": true,
                  "response_buffering": true,
                  "snis": [
                    "foo.test",
                    "example.com"
                  ],
                  "sources": [
                    {
                      "ip": "10.1.0.0/16",
                      "port": 1234
                    },
                    {
                      "ip": "10.2.2.2"
                    },
                    {
                      "port": 9123
                    }
                  ],
                  "destinations": [
                    {
                      "ip": "10.1.0.0/16",
                      "port": 1234
                    },
                    {
                      "ip": "10.2.2.2"
                    },
                    {
                      "port": 9123
                    }
                  ],
                  "tags": [
                    "user-level",
                    "low-priority"
                  ],
                  "service": {
                    "id": "af8330d3-dbdc-48bd-b1be-55b98608834b"
                  }
                }
              },
              "properties": {
                "name": {
                  "type": "string",
                  "description": "The name of the route. Route names must be unique, and they are case sensitive. For example, there can be two different routes named “test” and “Test”.\n"
                },
                "protocols": {
                  "type": "array",
                  "description": "An array of the protocols this route should allow",
                  "items": {
                    "type": "string",
                    "default": "https",
                    "example": "tcp"
                  }
                },
                "methods": {
                  "type": "array",
                  "description": "A list of HTTP methods that match this route.\n",
                  "items": {
                    "type": "string",
                    "example": "GET"
                  }
                },
                "hosts": {
                  "type": "array",
                  "description": "A list of domain names that match this route. Note that the hosts value is case sensitive. With form-encoded, the notation is `hosts[]=example.com&hosts[]=foo.test`. With JSON, use an Array.",
                  "items": {
                    "type": "string"
                  }
                },
                "paths": {
                  "type": "array",
                  "description": "A list of paths that match this route. With form-encoded, the notation is `paths[]=/foo&paths[]=/bar`. With JSON, use an array. The path can be a regular expression, or a plain text pattern. ",
                  "items": {
                    "type": "string"
                  }
                },
                "headers": {
                  "type": "object",
                  "description": "One or more lists of values indexed by header name that will cause this route to match if present in the request. The Host header cannot be used with this attribute: hosts should be specified using the `hosts` attribute. When headers contains only one value and that value starts with the special prefix` ~*`, the value is interpreted as a regular expression.",
                  "properties": {
                    "x-my-header": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "x-another-header": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                },
                "https_redirect_status_code": {
                  "type": "integer",
                  "description": "The status code Kong responds with when all properties of a route match except the protocol i.e. if the protocol of the request is `HTTP` instead of `HTTPS`\nLocation header is injected by Kong if the field is set to `301`, `302`, `307` or `308`. Note: This config applies only if the route is configured to only accept the https protocol. Accepted values are: `426`, `301`, `302`, `307`, `308`. Default: `426`.",
                  "default": 426,
                  "enum": [
                    426,
                    301,
                    302,
                    307,
                    308
                  ],
                  "example": 426
                },
                "regex_priority": {
                  "type": "integer",
                  "description": "A number used to choose which route resolves a given request when several routes match it using regexes simultaneously. When two routes match the path and have the same regex_priority, the older one (lowest `created_at`) is used. Note that the priority for non-regex routes is different (longer non-regex routes are matched before shorter ones). Default: `0`.",
                  "default": 0,
                  "example": 0
                },
                "strip_path": {
                  "type": "boolean",
                  "description": "When matching a route via one of the paths, strip the matching prefix from the upstream request URL. Default: `true`.",
                  "default": true
                },
                "path_handling": {
                  "type": "string",
                  "description": "Controls how the service path, route path and requested path are combined when sending a request to the upstream. Accepted values are: \"`v0`\", \"`v1`\". Default: \"`v0`\".",
                  "enum": [
                    "v1",
                    "v0"
                  ],
                  "example": "v0"
                },
                "preserve_host": {
                  "type": "boolean",
                  "description": "When matching a route via one of the `hosts` domain names, use the request `host` header in the upstream request headers. If set to `false`, the upstream Host header will be that of the service’s host.",
                  "default": true
                },
                "request_buffering": {
                  "type": "boolean",
                  "default": true,
                  "description": "Whether to enable request body buffering or not. With HTTP 1.1, it may make sense to turn this off on services that receive data with chunked transfer encoding. Default: true.\n"
                },
                "response_buffering": {
                  "type": "boolean",
                  "default": true,
                  "description": "Whether to enable response body buffering or not. With HTTP 1.1, it may make sense to turn this off on services that send data with chunked transfer encoding. Default: `true`.\n"
                },
                "snis": {
                  "type": "array",
                  "description": "A list of SNIs that match this route when using stream routing.\n",
                  "items": {
                    "type": "string"
                  }
                },
                "sources": {
                  "type": "array",
                  "description": "A list of IP sources of incoming connections that match this route when using stream routing. Each entry is an object with fields “ip” (optionally in CIDR range notation) and/or “port”.\n",
                  "items": {
                    "type": "object",
                    "properties": {
                      "ip": {
                        "type": "string",
                        "example": "10.1.0.0/16"
                      },
                      "port": {
                        "type": "integer",
                        "example": 1234
                      }
                    }
                  }
                },
                "destinations": {
                  "type": "array",
                  "description": "A list of IP destinations of incoming connections that match this route when using stream routing. Each entry is an object with fields “ip” (optionally in CIDR range notation) and/or “port”.\n",
                  "items": {
                    "type": "object",
                    "properties": {
                      "ip": {
                        "type": "string",
                        "example": "0.1.0.0/16"
                      },
                      "port": {
                        "type": "integer"
                      }
                    }
                  }
                },
                "tags": {
                  "type": "array",
                  "description": "An optional set of strings associated with the route for grouping and filtering.\n",
                  "items": {
                    "type": "string"
                  }
                },
                "service": {
                  "type": "object",
                  "description": "The service this route is associated to. This is where the route proxies traffic to. With form-encoded, the notation is service.id=<service id> or service.name=<service name>. With JSON, use “`\"service\":{\"id\":\"<service id>\"}` or `\"service\":{\"name\":\"<service name>\"}`.",
                  "nullable": true,
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "af8330d3-dbdc-48bd-b1be-55b98608834b"
                    }
                  }
                }
              },
              "required": [
                "protocols",
                "https_redirect_status_code",
                "preserve_host",
                "request_buffering",
                "response_buffering"
              ]
            },
            "examples": {
              "Create a route": {
                "value": {
                  "name": "my-route",
                  "protocols": [
                    "http",
                    "https"
                  ],
                  "methods": [
                    "GET",
                    "POST"
                  ],
                  "hosts": [
                    "example.com",
                    "foo.test"
                  ],
                  "paths": [
                    "/foo",
                    "/bar"
                  ],
                  "headers": {
                    "x-my-header": [
                      "foo",
                      "bar"
                    ],
                    "x-another-header": [
                      "bla"
                    ]
                  },
                  "https_redirect_status_code": 426,
                  "regex_priority": 0,
                  "strip_path": true,
                  "path_handling": "v0",
                  "preserve_host": false,
                  "request_buffering": true,
                  "response_buffering": true,
                  "tags": [
                    "user-level",
                    "low-priority"
                  ],
                  "service": {
                    "id": "af8330d3-dbdc-48bd-b1be-55b98608834b"
                  }
                }
              }
            }
          }
        },
        "description": "Route request body"
      },
      "keys-request": {
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "x-examples": {
                "Example 1": {
                  "set": {
                    "id": "46CA83EE-671C-11ED-BFAB-2FE47512C77A"
                  },
                  "name": "my-key",
                  "kid": "42",
                  "jwk": "{\"alg\":\"RSA\",  \"kid\": \"42\",  ...}",
                  "pem": {
                    "private_key": "-----BEGIN",
                    "public_key": "-----BEGIN"
                  },
                  "tags": [
                    "application-a",
                    "public-key-xyz"
                  ]
                }
              },
              "properties": {
                "set": {
                  "type": "object",
                  "description": "The id (an UUID) of the key-set with which to associate the key .With form-encoded, the notation is `set.id=<set id>` or `set.name=<set name>`. With JSON, use `“\"set\":{\"id\":\"<set id>\"}` or `\"set\":{\"name\":\"<set name>\"}.`",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "46CA83EE-671C-11ED-BFAB-2FE47512C77A"
                    }
                  }
                },
                "name": {
                  "type": "string",
                  "example": "my-key",
                  "description": "The name to associate with the given keys.\n"
                },
                "kid": {
                  "type": "string",
                  "description": "A unique identifier for a key.\n",
                  "example": "42"
                },
                "jwk": {
                  "type": "string",
                  "description": "A JSON Web Key represented as a string.",
                  "example": "{\\\"alg\\\":\\\"RSA\\\",  \\\"kid\\\": \\\"42\\\",  ...}"
                },
                "pem": {
                  "type": "object",
                  "description": "A keypair in PEM format.\n",
                  "properties": {
                    "private_key": {
                      "type": "string",
                      "example": "private_key\": \"-----BEGIN"
                    },
                    "public_key": {
                      "type": "string",
                      "example": "public_key\": \"-----BEGIN"
                    }
                  }
                },
                "tags": {
                  "type": "array",
                  "description": "An optional set of strings associated with the Key for grouping and filtering.\n",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "required": [
                "kid"
              ]
            }
          }
        },
        "description": "The request body for creating a new key entity."
      },
      "key-set-request": {
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "x-examples": {
                "Example 1": {
                  "name": "my-key_set",
                  "tags": [
                    "google-keys",
                    "mozilla-keys"
                  ]
                }
              },
              "properties": {
                "name": {
                  "type": "string",
                  "description": "The name to associate with the given key-set.\n",
                  "example": "my-key_set"
                },
                "tags": {
                  "type": "array",
                  "description": "An optional set of strings associated with the Key for grouping and filtering.\n",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "description": "The request body for creating a new key-set entity."
      },
      "plugin-request": {
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "x-examples": {
                "Example 1": {
                  "name": "rate-limiting",
                  "route": null,
                  "service": null,
                  "consumer": null,
                  "instance_name": "rate-limiting-foo",
                  "config": {
                    "hour": 500,
                    "minute": 20
                  },
                  "protocols": [
                    "http",
                    "https"
                  ],
                  "enabled": true,
                  "tags": [
                    "user-level",
                    "low-priority"
                  ],
                  "ordering": {
                    "before": [
                      "plugin-name"
                    ]
                  }
                }
              },
              "properties": {
                "name": {
                  "type": "string",
                  "description": "The name of the plugin that’s going to be added. Currently, the plugin must be installed in every Kong instance separately.",
                  "example": "rate-limiting"
                },
                "route": {
                  "type": "string",
                  "description": "If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the route being used. Default: `null`.With form-encoded, the notation is `route.id=<route id> or route.name=<route name>`. With JSON, use `\"route\":{\"id\":\"<route id>\"}` or `\"route\":{\"name\":\"<route name>\"}`.",
                  "nullable": true
                },
                "service": {
                  "type": "string",
                  "description": "If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified service.",
                  "nullable": true
                },
                "consumer": {
                  "type": "string",
                  "description": "If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.)",
                  "nullable": true
                },
                "instance_name": {
                  "type": "string",
                  "description": "The plugin instance name.\n",
                  "example": "rate-limiting-foo"
                },
                "config": {
                  "type": "object",
                  "description": "The configuration properties for the plugin",
                  "properties": {
                    "hour": {
                      "type": "integer",
                      "example": 500
                    },
                    "minute": {
                      "type": "integer",
                      "example": 500
                    }
                  }
                },
                "protocols": {
                  "type": "array",
                  "description": "A list of the request protocols that will trigger this plugin.",
                  "items": {
                    "type": "string",
                    "enum": [
                      "http",
                      "grpc",
                      "grpcs",
                      "tls",
                      "tcp"
                    ],
                    "default": "http"
                  }
                },
                "enabled": {
                  "type": "boolean",
                  "description": "Whether the plugin is applied. Default: `true`.\n",
                  "default": true
                },
                "tags": {
                  "type": "array",
                  "description": "An optional set of strings associated with the plugin for grouping and filtering.\n",
                  "items": {
                    "type": "string"
                  }
                },
                "ordering": {
                  "type": "object",
                  "description": "Describes a dependency to another plugin to determine plugin ordering during the access phase.\n–`before`: The plugin will be executed before a specified plugin or list of plugins.\n– `after`: The plugin will be executed after a specified plugin or list of plugins.",
                  "properties": {
                    "before": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            "examples": {
              "request example": {
                "value": {
                  "name": "rate-limiting",
                  "route": "string",
                  "service": "string",
                  "consumer": "string",
                  "instance_name": "rate-limiting-foo",
                  "config": {
                    "hour": 500,
                    "minute": 500
                  },
                  "protocols": [
                    "http"
                  ],
                  "enabled": true,
                  "tags": [
                    "string"
                  ],
                  "ordering": {
                    "before": [
                      "string"
                    ]
                  }
                }
              }
            }
          }
        },
        "description": "Plugin request body"
      },
      "consumer-request": {
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "x-examples": {
                "Example 1": {
                  "id": "ec1a1f6f-2aa4-4e58-93ff-b56368f19b27",
                  "created_at": 1422386534,
                  "username": "my-username",
                  "custom_id": "my-custom-id",
                  "tags": [
                    "user-level",
                    "low-priority"
                  ]
                }
              },
              "properties": {
                "username": {
                  "type": "string",
                  "description": "The unique username of the Consumer. You must send either this field or custom_id with the request.\n"
                },
                "custom_id": {
                  "type": "string",
                  "description": "Field for storing an existing unique ID for the Consumer - useful for mapping Kong with users in your existing database. You must send either this field or username with the request.\n"
                },
                "tags": {
                  "type": "array",
                  "description": "An optional set of strings associated with the Consumer for grouping and filtering.\n",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "required": [
                "username",
                "custom_id"
              ]
            }
          }
        },
        "description": "Consumer request body"
      },
      "create-sni": {
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "x-examples": {
                "Example 1": {
                  "name": "my-sni",
                  "tags": [
                    "user-level",
                    "low-priority"
                  ],
                  "certificate": {
                    "id": "a2e013e8-7623-4494-a347-6d29108ff68b"
                  }
                }
              },
              "properties": {
                "name": {
                  "type": "string",
                  "description": "The SNI name to associate with the given certificate.",
                  "example": "my-sni"
                },
                "tags": {
                  "type": "array",
                  "description": "An optional set of strings associated with the SNIs for grouping and filtering.\n",
                  "items": {
                    "type": "string",
                    "example": "[\"user-level\", \"low-priority\"]"
                  }
                },
                "certificate": {
                  "type": "object",
                  "description": "The id (a UUID) of the certificate with which to associate the SNI hostname. The Certificate must have a valid private key associated with it to be used by the SNI object. With form-encoded, the notation is `certificate.id=<certificate id>`. With JSON, use `“certificate\":{\"id\":\"<certificate id>”}`.",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "91020192-062d-416f-a275-9addeeaffaf2",
                      "description": "91020192-062d-416f-a275-9addeeaffaf2"
                    }
                  }
                }
              },
              "required": [
                "name",
                "certificate"
              ]
            }
          }
        },
        "description": "A JSON object containing the details of the new SNI, including the name, certificate, and tags."
      },
      "cert-request": {
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "x-examples": {
                "Example": {
                  "id": "7fca84d6-7d37-4a74-a7b0-93e576089a41",
                  "created_at": 1422386534,
                  "cert": "-----BEGIN CERTIFICATE-----...",
                  "key": "-----BEGIN RSA PRIVATE KEY-----...",
                  "cert_alt": "-----BEGIN CERTIFICATE-----...",
                  "key_alt": "-----BEGIN EC PRIVATE KEY-----...",
                  "snis": [
                    "foo.test",
                    "example.com"
                  ],
                  "tags": [
                    "user-level",
                    "low-priority"
                  ]
                }
              },
              "properties": {
                "cert": {
                  "type": "string",
                  "description": "PEM-encoded public certificate chain of the SSL key pair. ",
                  "example": "\"-----BEGIN CERTIFICATE-----...\","
                },
                "key": {
                  "type": "string",
                  "example": "\"-----BEGIN RSA PRIVATE KEY-----...\"",
                  "description": "PEM-encoded private key of the SSL key pair. "
                },
                "cert_alt": {
                  "type": "string",
                  "description": "PEM-encoded public certificate chain of the alternate SSL key pair. "
                },
                "key_alt": {
                  "type": "string",
                  "description": "PEM-encoded private key of the alternate SSL key pair. ",
                  "example": "\"-----BEGIN EC PRIVATE KEY-----...\""
                },
                "snis": {
                  "type": "array",
                  "description": "An array of zero or more hostnames to associate with this certificate as SNIs.",
                  "items": {
                    "type": "string"
                  }
                },
                "tags": {
                  "type": "array",
                  "description": "An optional set of strings associated with the Certificate for grouping and filtering.\n",
                  "items": {
                    "type": "string"
                  }
                },
                "passphrase": {
                  "type": "string",
                  "description": "To load an encrypted private key into Kong, specify the passphrase using this attributKong will decrypt the private key and store it in its database. e. Enterprise Only",
                  "example": "example"
                }
              },
              "required": [
                "cert",
                "key"
              ]
            }
          }
        },
        "description": "The certificate request body"
      },
      "CA-cert-request": {
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "x-examples": {
                "Example 1": {
                  "cert": "-----BEGIN CERTIFICATE-----...",
                  "cert_digest": "c641e28d77e93544f2fa87b2cf3f3d51...",
                  "tags": [
                    "user-level",
                    "low-priority"
                  ]
                }
              },
              "properties": {
                "cert": {
                  "type": "string",
                  "description": "PEM-encoded public certificate of the CA.\n",
                  "example": "\"-----BEGIN CERTIFICATE-----...\""
                },
                "cert_digest": {
                  "type": "string",
                  "example": "c641e28d77e93544f2fa87b2cf3f3d51...",
                  "description": "SHA256 hex digest of the public certificate.\n"
                },
                "tags": {
                  "type": "array",
                  "description": "An optional set of strings associated with the Certificate for grouping and filtering.",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "required": [
                "cert"
              ]
            }
          }
        },
        "description": "This request body represents a new Certificate Authority (CA) certificate and includes the properties required to create a new certificate."
      },
      "consumer_group_request": {
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "x-examples": {
                "Example 1": {
                  "created_at": 1557522650,
                  "id": "fa6881b2-f49f-4007-9475-577cd21d34f4",
                  "name": "JL",
                  "tags": [
                    "tag1",
                    "tag2"
                  ]
                }
              },
              "properties": {
                "name": {
                  "type": "string",
                  "description": "A unique name for the consumer group you want to create.",
                  "example": "my_group"
                },
                "tags": {
                  "type": "array",
                  "description": "An optional set of strings associated with the consumer group for grouping and filtering.",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "required": [
                "name"
              ]
            },
            "examples": {
              "example consumer group request body": {
                "value": {
                  "name": "my_group",
                  "tags": [
                    "string"
                  ]
                }
              }
            }
          }
        },
        "description": "The consumer groups request body for creating new consumer groups."
      },
      "license-request": {
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "payload": {
                  "type": "string",
                  "description": "The Kong Gateway license in JSON format.\n",
                  "example": "{\\\"license\\\":{\\\"payload\\\":{\\\"admin_seats\\\":\\\"1\\\",\\\"customer\\\":\\\"Example Company, Inc\\\",\\\"dataplanes\\\":\\\"1\\\",\\\"license_creation_date\\\":\\\"2017-07-20\\\",\\\"license_expiration_date\\\":\\\"2017-07-20\\\",\\\"license_key\\\":\\\"00141000017ODj3AAG_a1V41000004wT0OEAU\\\",\\\"product_subscription\\\":\\\"Konnect Enterprise\\\",\\\"support_plan\\\":\\\"None\\\"},\\\"signature\\\":\\\"6985968131533a967fcc721244a979948b1066967f1e9cd65dbd8eeabe060fc32d894a2945f5e4a03c1cd2198c74e058ac63d28b045c2f1fcec95877bd790e1b\\\",\\\"version\\\":\\\"1\\\"}}"
                }
              }
            }
          }
        },
        "description": "The request body for uploading a license."
      },
      "workspace-request": {
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "The workspace name.\n",
                  "example": "my-workspace"
                }
              }
            }
          }
        },
        "description": "The workspace object describes the workspace entity, which has an ID and a name.\n"
      }
    }
  },
  "externalDocs": {
    "description": "Kong Gateway Enterprise Admin API",
    "url": "https://docs.konghq.com"
  },
  "info": {
    "contact": {
      "email": "harry@konghq.com",
      "name": "Kong Inc",
      "url": "https://konghq.com"
    },
    "description": "OpenAPI 3.0 spec for Kong Gateway's Enterprise Admin API.\n\nYou can learn more about Kong Gateway at [docs.konghq.com](https://docs.konghq.com)\n.Give Kong a star at [Kong/kong](https://github.com/kong/kong) repository.",
    "license": {
      "name": "Apache 2.0",
      "url": "https://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "title": "Enterprise Kong Admin API",
    "version": "0.0.2"
  },
  "openapi": "3.0.0",
  "paths": {
    "/ca_certificates": {
      "get": {
        "description": "Retrieve a list of all available Certificate Authority (CA) certificates, including the certificate ID, creation date, and other details. You can use query parameters to filter the results by size or tags, for example `/ca-certificates?size=50&tags=enterprise`.",
        "operationId": "list-ca_certificate",
        "parameters": [
          {
            "$ref": "#/components/parameters/pagination-size"
          },
          {
            "$ref": "#/components/parameters/pagination-offset"
          },
          {
            "$ref": "#/components/parameters/pagination-tags-filter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CA-Certificate"
                }
              }
            },
            "description": "A successful response listing CA Certificates"
          }
        },
        "summary": "List all CA Certificates",
        "tags": [
          "CA Certificates"
        ]
      },
      "post": {
        "description": "Create a new Certificate Authority (CA) certificate. The request body must include the `cert` property, the certificate data in PEM format; it can also include `cert_digest`, a digest of the certificate in hex format for verifying the certificates integrity, and `tags`, an optional list of tags to categorize the certificate. ",
        "operationId": "create-ca_certificate",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CA-Certificate"
                }
              }
            },
            "description": "Successfully created CA Certificate"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "x-examples": {
                    "Example 1": {
                      "fields": {
                        "cert": "invalid certificate: x509.new: asn1/a_d2i_fp.c:197:error:0D06B08E:asn1 encoding routines:asn1_d2i_read_bio:not enough data"
                      },
                      "message": "schema violation (cert: invalid certificate: x509.new: asn1/a_d2i_fp.c:197:error:0D06B08E:asn1 encoding routines:asn1_d2i_read_bio:not enough data)",
                      "name": "schema violation",
                      "code": 2
                    }
                  },
                  "properties": {
                    "fields": {
                      "type": "object",
                      "properties": {
                        "cert": {
                          "type": "string",
                          "description": "Error information about the certificate.",
                          "example": "invalid certificate: x509.new:"
                        }
                      }
                    },
                    "message": {
                      "type": "string",
                      "description": "More information about the error",
                      "example": "schema violation (cert: invalid certificate: x509.new:"
                    },
                    "name": {
                      "type": "string",
                      "description": "The name of the error.",
                      "example": "schema violation"
                    },
                    "code": {
                      "type": "integer",
                      "description": "An error code.",
                      "example": 2
                    }
                  }
                },
                "examples": {
                  "invalid certificate": {
                    "value": {
                      "fields": {
                        "cert": "invalid certificate: x509.new:"
                      },
                      "message": "schema violation (cert: invalid certificate: x509.new:",
                      "name": "schema violation",
                      "code": 2
                    }
                  }
                }
              }
            },
            "description": "400 Bad Request"
          }
        },
        "summary": "Create a new CA Certificate",
        "tags": [
          "CA Certificates"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/CA-cert-request"
        }
      }
    },
    "/ca_certificates/{ca_certificate_id}": {
      "delete": {
        "description": "Delete the specified Certificate Authority (CA) certificate using the provided ca_certificate_id.",
        "operationId": "delete-ca_certificate",
        "responses": {
          "204": {
            "description": "Successfully deleted CA Certificate or the resource didn't exist"
          }
        },
        "summary": "Delete a CA Certificate",
        "tags": [
          "CA Certificates"
        ]
      },
      "get": {
        "description": "Retrieve details about the specified Certificate Authority (CA) certificate using the provided path parameter `ca_certificate_id`.",
        "operationId": "get-ca_certificate",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CA-Certificate"
                }
              }
            },
            "description": "Successfully fetched CA Certificate"
          },
          "404": {
            "description": "Resource does not exist"
          }
        },
        "summary": "Fetch a CA Certificate",
        "tags": [
          "CA Certificates"
        ]
      },
      "patch": {
        "description": "Update a CA Certificate",
        "operationId": "update-ca_certificate",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CA-Certificate"
                }
              }
            },
            "description": "Successfully updated CA Certificate"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Invalid CA Certificate"
          },
          "404": {
            "description": "Resource does not exist"
          }
        },
        "summary": "Update a CA Certificate",
        "tags": [
          "CA Certificates"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/CA-cert-request"
        }
      },
      "put": {
        "description": "Update the specified Certificate Authority (CA) certificate using the provided `ca_certificate_id`. Use this endpoint to modify an existing CA certificate in the system. The request body should include the fields of the CA certificate that need to be updated. ",
        "operationId": "upsert-ca_certificate",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CA-Certificate"
                }
              }
            },
            "description": "Successfully upserted CA Certificate"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Invalid CA Certificate"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "summary": "Upsert a CA Certificate",
        "tags": [
          "CA Certificates"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/CA-cert-request"
        }
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/ca_certificate_id"
        }
      ]
    },
    "/certificates": {
      "get": {
        "description": "Retrieve a list of all available CA Certificate Authority (CA) certificates. You can use query parameters to filter the results by size or tags, for example `/certificates?size=50&tags=enterprise`.",
        "operationId": "list-certificate",
        "parameters": [
          {
            "$ref": "#/components/parameters/pagination-size"
          },
          {
            "$ref": "#/components/parameters/pagination-offset"
          },
          {
            "$ref": "#/components/parameters/pagination-tags-filter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Certificate"
                },
                "examples": {
                  "Certificate": {
                    "value": {
                      "cert": "-----BEGIN CERTIFICATE-----\ncertificate-content\n-----END CERTIFICATE-----",
                      "id": "b2f34145-0343-41a4-9602-4c69dec2f269",
                      "key": "-----BEGIN PRIVATE KEY-----\nprivate-key-content\n-----END PRIVATE KEY-----"
                    }
                  }
                }
              }
            },
            "description": "A successful response listing Certificates"
          }
        },
        "summary": "List all Certificates",
        "tags": [
          "Certificates"
        ]
      },
      "post": {
        "description": "Create a new certificate with the provided details. Use this endpoint to add a new certificate to the system. The request body must include the certificate data and other details required for creating a new certificate.",
        "operationId": "create-certificate",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Certificate"
              }
            }
          },
          "description": "Description of the new Certificate for creation",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Certificate"
                }
              }
            },
            "description": "Successfully created Certificate"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "x-examples": {
                    "Example 1": {
                      "fields": {
                        "key": "invalid key: pkey.new:load_key: pem/pem_lib.c:949:error:09091064:PEM routines:PEM_read_bio_ex:bad base64 decode",
                        "cert": "invalid certificate: x509.new: asn1/tasn_dec.c:309:error:0D07803A:asn1 encoding routines:asn1_item_embed_d2i:nested asn1 error"
                      },
                      "message": "2 schema violations (cert: invalid certificate: x509.new: asn1/tasn_dec.c:309:error:0D07803A:asn1 encoding routines:asn1_item_embed_d2i:nested asn1 error; key: invalid key: pkey.new:load_key: pem/pem_lib.c:949:error:09091064:PEM routines:PEM_read_bio_ex:bad base64 decode)",
                      "name": "schema violation",
                      "code": 2
                    }
                  },
                  "properties": {
                    "fields": {
                      "type": "object",
                      "properties": {
                        "key": {
                          "type": "string",
                          "description": "Information about the key.",
                          "example": "invalid key: pkey.new:load_key: "
                        },
                        "cert": {
                          "type": "string",
                          "description": "Information about the certificate.",
                          "example": "invalid certificate: x509.new: "
                        }
                      }
                    },
                    "message": {
                      "type": "string",
                      "description": "error message",
                      "example": "2 schema violations (cert: invalid certificate: x509.new: asn1/tasn_dec.c:309:error:0D07803A:asn1"
                    },
                    "name": {
                      "type": "string",
                      "description": "The name of the error message.",
                      "example": "schema violation"
                    },
                    "code": {
                      "type": "integer",
                      "description": "An error code.",
                      "example": 2
                    }
                  }
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "fields": {
                        "key": "string",
                        "cert": "string"
                      },
                      "message": "string",
                      "name": "string",
                      "code": 0
                    }
                  }
                }
              }
            },
            "description": "Invalid Certificate"
          }
        },
        "summary": "Create a new Certificate",
        "tags": [
          "Certificates"
        ]
      }
    },
    "/certificates/{certificate_id}": {
      "delete": {
        "description": "Delete a Certificate",
        "operationId": "delete-certificate",
        "responses": {
          "204": {
            "description": "Successfully deleted Certificate or the resource didn't exist"
          }
        },
        "summary": "Delete a Certificate",
        "tags": [
          "Certificates"
        ]
      },
      "get": {
        "description": "Get a Certificate using ID.",
        "operationId": "get-certificate",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Certificate"
                }
              }
            },
            "description": "Successfully fetched Certificate"
          },
          "404": {
            "description": "Resource does not exist"
          }
        },
        "summary": "Fetch a Certificate",
        "tags": [
          "Certificates"
        ]
      },
      "patch": {
        "description": "Update a Certificate\n\nInserts (or replaces) the certificate under the requested `certificate_id`with the definition specified in the request body. When the `name` or `id` attribute has the structure of a UUID, the certificate being inserted/replaced will be identified by its `id`. Otherwise it will be identified by the `name`.\n\nWhen creating a new Certificate without specifying `id` (neither in the path or the request body), then it will be auto-generated.\n",
        "operationId": "update-certificate",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Certificate"
                }
              }
            },
            "description": "Successfully updated Certificate"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Invalid Certificate"
          },
          "404": {
            "description": "Resource does not exist"
          }
        },
        "summary": "Update a Certificate",
        "tags": [
          "Certificates"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/cert-request"
        }
      },
      "put": {
        "description": "Update details about the specified certificate using the provided path parameter `certificate_id`.\n\nInserts (or replaces) the certificate under the requested `certificate_id`with the definition specified in the request body. When the `name` or `id` attribute has the structure of a UUID, the certificate being inserted/replaced will be identified by its `id`. Otherwise it will be identified by the `name`.\n\nWhen creating a new Certificate without specifying `id` (neither in the path or the request body), then it will be auto-generated.\n",
        "operationId": "upsert-certificate",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Certificate"
                }
              }
            },
            "description": "Successfully upserted Certificate"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Invalid Certificate"
          }
        },
        "summary": "Upsert a Certificate",
        "tags": [
          "Certificates"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/cert-request"
        }
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/certificate_id"
        }
      ]
    },
    "/certificates/{certificate_name_or_id}/snis": {
      "get": {
        "description": "Retrieve a paginated list of all SNIs associated with a certificate. Use this endpoint to retrieve a list of SNIs that are linked to a specific certificate. You can use the optional query parameters to filter the results based on specific criteria. The response will include the list of SNIs and pagination information. See the response schema for details on the expected format of the response body.",
        "parameters": [
          {
            "$ref": "#/components/parameters/pagination-size"
          },
          {
            "$ref": "#/components/parameters/pagination-offset"
          },
          {
            "$ref": "#/components/parameters/pagination-tags-filter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/SNI"
                      },
                      "type": "array"
                    },
                    "offset": {
                      "$ref": "#/components/schemas/pagination-offset-response"
                    }
                  }
                }
              }
            },
            "description": "A successful response listing SNIs"
          }
        },
        "summary": "List all SNIs associated with a Certificate",
        "tags": [
          "SNIs"
        ],
        "operationId": "list-sni-with-certificate"
      },
      "post": {
        "description": "Create a new SNI and associate it with a certificate in the system. Use this endpoint to add a new SNI to the system and link it to a specific certificate.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SNI"
                }
              }
            },
            "description": "Successfully created SNI"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Invalid SNI"
          }
        },
        "summary": "Create a new SNI associated with a Certificate",
        "tags": [
          "SNIs"
        ],
        "operationId": "create-sni-with-certificate",
        "requestBody": {
          "$ref": "#/components/requestBodies/create-sni"
        }
      },
      "parameters": [
        {
          "name": "certificate_name_or_id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string",
            "enum": [
              "a3ad71a8-6685-4b03-a101-980a953544f6",
              "name"
            ],
            "example": "name"
          },
          "description": "The unique identifier or the `name` attribute of the Certificate whose SNIs are to be retrieved. When using this endpoint, only SNIs associated to the specified Certificate will be listed."
        }
      ]
    },
    "/certificates/{certificate_id}/snis/{sni_name_or_id}": {
      "delete": {
        "description": "Delete a an SNI associated with a Certificate using ID or name.\n",
        "responses": {
          "204": {
            "description": "Successfully deleted SNI or the resource didn't exist"
          }
        },
        "summary": "Delete a an SNI associated with a Certificate",
        "tags": [
          "SNIs"
        ],
        "operationId": "delete-sni-with-cert"
      },
      "get": {
        "description": "Get an SNI associated with a Certificate using ID or name.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SNI"
                }
              }
            },
            "description": "Successfully fetched SNI"
          },
          "404": {
            "description": "Resource does not exist"
          }
        },
        "summary": "Fetch an SNI associated with a Certificate",
        "tags": [
          "SNIs"
        ],
        "operationId": "fetch-sni-with-cert"
      },
      "patch": {
        "description": "Update an existing SNI associated with a certificate in the system using the SNI ID or name. The request body should include the fields of the SNI that need to be updated, such as the name, description, or other properties. If the request body contains valid data, the endpoint will update the SNI and return a success response. ",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SNI"
                }
              }
            },
            "description": "Successfully updated SNI"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Invalid SNI"
          },
          "404": {
            "description": "Resource does not exist"
          }
        },
        "summary": "Update a an SNI associated with a Certificate",
        "tags": [
          "SNIs"
        ],
        "operationId": "update-sni-with-cert",
        "requestBody": {
          "$ref": "#/components/requestBodies/create-sni"
        }
      },
      "put": {
        "description": "Create or Update an SNI associated with a Certificate using ID or name.\n\nInserts (or replaces) the SNI under the requested resource with the definition specified in the body. The SNI will be identified via the name or id attribute.\n\nWhen the name or id attribute has the structure of a UUID, the SNI being inserted/replaced will be identified by its id. Otherwise it will be identified by its name.\n\nWhen creating a new SNI without specifying id (neither in the URL nor in the body), then it will be auto-generated.\n",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SNI"
                }
              }
            },
            "description": "Successfully upserted SNI"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Invalid SNI"
          }
        },
        "summary": "Upsert an SNI associated with a Certificate",
        "tags": [
          "SNIs"
        ],
        "operationId": "upsert-sni-with-cert",
        "requestBody": {
          "$ref": "#/components/requestBodies/create-sni"
        }
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/certificate_id"
        },
        {
          "$ref": "#/components/parameters/sni_name_or_id"
        }
      ]
    },
    "/consumers": {
      "get": {
        "description": "Retrieve a list of all consumers.You can use query parameters to filter the results by size or tags, for example `/consumers?size=50&tags=enterprise`.",
        "operationId": "list-consumer",
        "parameters": [
          {
            "$ref": "#/components/parameters/pagination-size"
          },
          {
            "$ref": "#/components/parameters/pagination-offset"
          },
          {
            "$ref": "#/components/parameters/pagination-tags-filter"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/consumer_response"
          }
        },
        "summary": "List all Consumers",
        "tags": [
          "Consumers"
        ]
      },
      "post": {
        "description": "Create a new Consumer",
        "operationId": "create-consumer",
        "responses": {
          "201": {
            "$ref": "#/components/responses/consumer_response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Invalid Consumer"
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "x-examples": {
                    "Example 1": {
                      "fields": {
                        "username": "stri22ng"
                      },
                      "message": "UNIQUE violation detected on '{username=\"stri22ng\"}'",
                      "name": "unique constraint violation",
                      "code": 5
                    }
                  },
                  "properties": {
                    "fields": {
                      "type": "object",
                      "description": "An array of fields that may have caused the error.",
                      "properties": {
                        "username": {
                          "type": "string",
                          "description": "The username that triggerd the conflict.",
                          "example": "stri22ng"
                        }
                      }
                    },
                    "message": {
                      "type": "string",
                      "description": "Detail about the conflict.",
                      "example": "UNIQUE violation detected on '{username=\\\"stri22ng\\\"}'"
                    },
                    "name": {
                      "type": "string",
                      "description": "THe name of the violation.",
                      "example": "unique constraint violation"
                    },
                    "code": {
                      "type": "integer",
                      "description": "Error code for debugging purposes.",
                      "example": 5
                    }
                  }
                },
                "examples": {
                  "Constraint violation": {
                    "value": {
                      "fields": {
                        "username": "stri22ng"
                      },
                      "message": "UNIQUE violation detected on '{username=\"stri22ng\"}'",
                      "name": "unique constraint violation",
                      "code": 5
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Create a new Consumer",
        "tags": [
          "Consumers"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/consumer-request"
        }
      }
    },
    "/consumers/{consumer_username_or_id}": {
      "delete": {
        "description": "Delete a Consumer",
        "operationId": "delete-consumer",
        "responses": {
          "204": {
            "description": "Successfully deleted Consumer or the resource didn't exist"
          }
        },
        "summary": "Delete a Consumer",
        "tags": [
          "Consumers"
        ]
      },
      "get": {
        "description": "Retrieve the details of a specific consumer in the system using either the consumer ID or the consumer username. If the consumer with the specified ID or username cannot be found, the endpoint will return a 404.\n",
        "operationId": "get-consumer",
        "responses": {
          "200": {
            "$ref": "#/components/responses/consumer_response"
          },
          "404": {
            "description": "Resource does not exist"
          }
        },
        "summary": "Fetch a consumer",
        "tags": [
          "Consumers"
        ]
      },
      "patch": {
        "description": "Update the details of a specific consumer in the system using either the consumer ID or the consumer username.If the consumer with the specified ID or username cannot be found, the endpoint will return a 404.\n",
        "operationId": "update-consumer",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Consumer"
                }
              }
            },
            "description": "Successfully updated Consumer"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Invalid Consumer"
          },
          "404": {
            "description": "Resource does not exist"
          }
        },
        "summary": "Update a Consumer",
        "tags": [
          "Consumers"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/consumer-request"
        }
      },
      "put": {
        "description": "Create or Update Consumer using ID or username. The consumer will be identified via the username or id attribute.If the consumer with the specified ID or username cannot be found, the endpoint will return a 404.\n\nWhen the username or id attribute has the structure of a UUID, the Consumer being inserted/replaced will be identified by its id. Otherwise it will be identified by its username.\n\nWhen creating a new Consumer without specifying id (neither in the URL nor in the body), then it will be auto-generated.\n\nNotice that specifying a username in the URL and a different one in the request body is not allowed.",
        "operationId": "upsert-consumer",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Consumer"
                }
              }
            },
            "description": "Successfully upserted Consumer"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Invalid Consumer"
          }
        },
        "summary": "Upsert a Consumer",
        "tags": [
          "Consumers"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/consumer-request"
        }
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/consumer_username_or_id"
        }
      ]
    },
    "/consumers/{consumer_username_or_id}/plugins": {
      "get": {
        "description": "Retrieve a list of all plugins associated with a consumer. ",
        "parameters": [
          {
            "$ref": "#/components/parameters/pagination-size"
          },
          {
            "$ref": "#/components/parameters/pagination-offset"
          },
          {
            "$ref": "#/components/parameters/pagination-tags-filter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/Plugin"
                      },
                      "type": "array"
                    },
                    "offset": {
                      "$ref": "#/components/schemas/pagination-offset-response"
                    }
                  }
                }
              }
            },
            "description": "A successful response listing plugins"
          }
        },
        "summary": "List all plugins associated with a consumer",
        "tags": [
          "Plugins"
        ],
        "operationId": "list-plugins-with-consumer"
      },
      "post": {
        "description": "Create a new plugin associated with a Consumer",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Plugin"
                }
              }
            },
            "description": "Successfully created plugin"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Invalid plugin"
          }
        },
        "summary": "Create a new plugin associated with a consumer",
        "tags": [
          "Plugins"
        ],
        "operationId": "create-plugin-for-consumer",
        "requestBody": {
          "$ref": "#/components/requestBodies/plugin-request"
        }
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/consumer_username_or_id"
        }
      ]
    },
    "/consumers/{consumer_name_or_id}/plugins/{plugin_id}": {
      "delete": {
        "description": "Delete a plugin associated with a aconsumer using ID.",
        "responses": {
          "204": {
            "description": "Successfully deleted plugin or the resource didn't exist"
          }
        },
        "summary": "Delete a plugin associated with a consumer",
        "tags": [
          "Plugins"
        ],
        "operationId": "delete-plugin-for-consumer"
      },
      "get": {
        "description": "Get a plugin associated with a Consumer using ID.",
        "responses": {
          "200": {
            "$ref": "#/components/responses/plugin-response"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "x-examples": {
                    "Example 1": {
                      "message": "Not found"
                    }
                  },
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Not Found",
                      "description": "404 Not Found "
                    }
                  }
                },
                "examples": {
                  "Not Found": {
                    "value": {
                      "message": "Not Found"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Fetch a plugin associated with a Consumer",
        "tags": [
          "Plugins"
        ],
        "operationId": "fetch-plugin-with-consumer"
      },
      "patch": {
        "description": "Update a plugin associated with a consumer using the consumer username or ID.",
        "responses": {
          "200": {
            "$ref": "#/components/responses/plugin-response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Invalid plugin"
          },
          "404": {
            "description": "Resource does not exist"
          }
        },
        "summary": "Update a plugin associated with a consumer",
        "tags": [
          "Plugins"
        ],
        "operationId": "update-plugin-with-consumer",
        "requestBody": {
          "$ref": "#/components/requestBodies/plugin-request"
        }
      },
      "put": {
        "description": "Create or Update a plugin associated with a Consumer using ID.",
        "responses": {
          "200": {
            "$ref": "#/components/responses/plugin-response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Invalid plugin"
          }
        },
        "summary": "Upsert a plugin associated with a Consumer",
        "tags": [
          "Plugins"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/plugin-request"
        },
        "operationId": "upsert-plugin-for-customer"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/consumer_name_or_id"
        },
        {
          "$ref": "#/components/parameters/plugin_id"
        }
      ]
    },
    "/key-sets": {
      "get": {
        "description": "Retrieve a list of all Key-sets in the system. A Key Set object holds a collection of asymmetric key objects. This entity allows to logically group keys by their purpose. Key Sets can be both tagged and filtered by tags.\n",
        "operationId": "list-key-set",
        "parameters": [
          {
            "$ref": "#/components/parameters/pagination-size"
          },
          {
            "$ref": "#/components/parameters/pagination-offset"
          },
          {
            "$ref": "#/components/parameters/pagination-tags-filter"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/key-set-response"
          }
        },
        "summary": "List all Key-sets",
        "tags": [
          "Key-sets"
        ]
      },
      "post": {
        "description": "This endpoint allows creating a new Key-set by sending a JSON object that describes the Key-set to be created.The request body must contain all the fields required to create a new Key-set.\n",
        "operationId": "create-key-set",
        "responses": {
          "201": {
            "$ref": "#/components/responses/key-set-response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Invalid Key-set"
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "fields": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string"
                        }
                      }
                    },
                    "message": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    },
                    "code": {
                      "type": "integer"
                    }
                  },
                  "x-examples": {
                    "Example 1": {
                      "fields": {
                        "name": "my-key_set"
                      },
                      "message": "UNIQUE violation detected on '{name=\"my-key_set\"}'",
                      "name": "unique constraint violation",
                      "code": 5
                    }
                  }
                },
                "examples": {
                  "Not Found": {
                    "value": {
                      "fields": {
                        "name": "my-key_set"
                      },
                      "message": "UNIQUE violation detected on '{name=\"my-key_set\"}'",
                      "name": "unique constraint violation",
                      "code": 5
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Create a new Key-set",
        "tags": [
          "Key-sets"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/key-set-request"
        }
      }
    },
    "/key-sets/{key-set_id_or_name}": {
      "delete": {
        "description": "Delete a Key-set",
        "operationId": "delete-key-set",
        "responses": {
          "204": {
            "description": "Successfully deleted Key-set or the resource didn't exist"
          }
        },
        "summary": "Delete a Key-set",
        "tags": [
          "Key-sets"
        ]
      },
      "get": {
        "description": "Get a Key-set using ID or name. This endpoint retrieves information about a specific key-set based on its ID or name.\n",
        "operationId": "get-key-set",
        "responses": {
          "200": {
            "$ref": "#/components/responses/key-set-response"
          },
          "404": {
            "description": "Resource does not exist"
          }
        },
        "summary": "Fetch a Key-set",
        "tags": [
          "Key-sets"
        ]
      },
      "patch": {
        "description": "Update a Key-set using ID or name.\n\nNote: This API is not available in DB-less mode.\n\nInserts (or replaces) the Key Set under the requested resource with the definition specified in the body. The Key Set will be identified via the name or id attribute.\n\nWhen the name or id attribute has the structure of a UUID, the Key Set being inserted/replaced will be identified by its id. Otherwise it will be identified by its name.\n\nWhen creating a new Key Set without specifying id (neither in the URL nor in the body), then it will be auto-generated.\n\nNotice that specifying a name in the URL and a different one in the request body is not allowed.",
        "operationId": "update-key-set",
        "responses": {
          "200": {
            "$ref": "#/components/responses/key-set-response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Invalid Key-set"
          },
          "404": {
            "description": "Resource does not exist"
          }
        },
        "summary": "Update a Key-set",
        "tags": [
          "Key-sets"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/key-set-request"
        }
      },
      "put": {
        "description": "Update a Key-set using ID or name.\n",
        "operationId": "upsert-key-set",
        "responses": {
          "200": {
            "$ref": "#/components/responses/key-set-response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Invalid Key-set"
          }
        },
        "summary": "Update key-set",
        "tags": [
          "Key-sets"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/key-set-request"
        }
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/key-set_id_or_name"
        }
      ]
    },
    "/keys": {
      "get": {
        "description": "List all Keys",
        "operationId": "list-key",
        "parameters": [
          {
            "$ref": "#/components/parameters/pagination-size"
          },
          {
            "$ref": "#/components/parameters/pagination-offset"
          },
          {
            "$ref": "#/components/parameters/pagination-tags-filter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/Key"
                      },
                      "type": "array"
                    },
                    "offset": {
                      "$ref": "#/components/schemas/pagination-offset-response"
                    }
                  }
                }
              }
            },
            "description": "A successful response listing Keys"
          }
        },
        "summary": "List all Keys",
        "tags": [
          "Keys"
        ]
      },
      "post": {
        "description": "This API endpoint allows you to create a new key. When the request is successful, the API will respond with a 200 status code and a JSON object that represents the newly created key. If the request is invalid, the API will respond with a 400 status code and an error message in the response body.",
        "operationId": "create-key",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Key"
                }
              }
            },
            "description": "Successfully created Key"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Invalid Key"
          }
        },
        "summary": "Create a new Key",
        "tags": [
          "Keys"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/keys-request"
        }
      }
    },
    "/keys/{key_id_or_name}": {
      "delete": {
        "description": "Delete a Key",
        "operationId": "delete-key",
        "responses": {
          "204": {
            "description": "Successfully deleted Key or the resource didn't exist"
          }
        },
        "summary": "Delete a Key",
        "tags": [
          "Keys"
        ]
      },
      "get": {
        "description": "Get a Key using ID or name.",
        "operationId": "get-key",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Key"
                }
              }
            },
            "description": "Successfully fetched Key"
          },
          "404": {
            "description": "Resource does not exist"
          }
        },
        "summary": "Fetch a Key",
        "tags": [
          "Keys"
        ]
      },
      "patch": {
        "description": "Update a Key",
        "operationId": "update-key",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Key"
                }
              }
            },
            "description": "Successfully updated Key"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Invalid Key"
          },
          "404": {
            "description": "Resource does not exist"
          }
        },
        "summary": "Update a Key",
        "tags": [
          "Keys"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/keys-request"
        }
      },
      "put": {
        "description": "Create or update a key using ID or name.\n",
        "operationId": "upsert-key",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Key"
                }
              }
            },
            "description": "Successfully upserted Key"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Invalid Key"
          }
        },
        "summary": "Upsert a Key",
        "tags": [
          "Keys"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/keys-request"
        }
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/key_id_or_name"
        }
      ]
    },
    "/plugins": {
      "get": {
        "description": "List all plugins",
        "operationId": "list-plugin",
        "parameters": [
          {
            "$ref": "#/components/parameters/pagination-size"
          },
          {
            "$ref": "#/components/parameters/pagination-offset"
          },
          {
            "$ref": "#/components/parameters/pagination-tags-filter"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/plugin-response"
          }
        },
        "summary": "List all plugins",
        "tags": [
          "Plugins"
        ]
      },
      "post": {
        "description": "Create a new plugin",
        "operationId": "create-plugin",
        "responses": {
          "200": {
            "$ref": "#/components/responses/plugin-response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Invalid plugin"
          }
        },
        "summary": "Create a new plugin",
        "tags": [
          "Plugins"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/plugin-request"
        }
      }
    },
    "/plugins/{plugin_id}": {
      "delete": {
        "description": "Delete a plugin",
        "operationId": "delete-plugin",
        "responses": {
          "204": {
            "description": "Successfully deleted plugin or the resource didn't exist"
          }
        },
        "summary": "Delete a plugin",
        "tags": [
          "Plugins"
        ]
      },
      "get": {
        "description": "Get a plugin using ID.",
        "operationId": "get-plugin",
        "responses": {
          "200": {
            "$ref": "#/components/responses/plugin-response"
          },
          "404": {
            "description": "Resource does not exist"
          }
        },
        "summary": "Fetch a plugin",
        "tags": [
          "Plugins"
        ]
      },
      "patch": {
        "description": "Update a plugin",
        "operationId": "update-plugin",
        "responses": {
          "200": {
            "$ref": "#/components/responses/plugin-response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Invalid plugin"
          },
          "404": {
            "description": "Resource does not exist"
          }
        },
        "summary": "Update a plugin",
        "tags": [
          "Plugins"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/plugin-request"
        }
      },
      "put": {
        "description": "Create or Update plugin using ID.",
        "operationId": "upsert-plugin",
        "responses": {
          "200": {
            "$ref": "#/components/responses/plugin-response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Invalid plugin"
          }
        },
        "summary": "Upsert a plugin",
        "tags": [
          "Plugins"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/plugin-request"
        }
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/plugin_id"
        }
      ]
    },
    "/routes": {
      "get": {
        "description": "List all routes\n\nroute entities define rules to match client requests. Each route is associated with a service, and a service may have multiple routes associated to it. Every request matching a given route will be proxied to its associated service.\n\nNote: Path handling algorithms v1 was deprecated in Kong 3.0. From Kong 3.0, when router_flavor is set to expressions, route.path_handling will be unconfigurable and the path handling behavior will be \"v0\"; when router_flavor is set to traditional_compatible, the path handling behavior will be \"v0\" regardless of the value of route.path_handling. Only router_flavor = traditional will support path_handling \"v1' behavior.",
        "operationId": "list-route",
        "parameters": [
          {
            "$ref": "#/components/parameters/pagination-size"
          },
          {
            "$ref": "#/components/parameters/pagination-offset"
          },
          {
            "$ref": "#/components/parameters/pagination-tags-filter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/Route"
                      },
                      "type": "array"
                    },
                    "offset": {
                      "$ref": "#/components/schemas/pagination-offset-response"
                    }
                  }
                }
              }
            },
            "description": "A successful response listing routes"
          }
        },
        "summary": "List all routes",
        "tags": [
          "Routes"
        ]
      },
      "post": {
        "description": "Create a new route",
        "operationId": "create-route",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Route"
                }
              }
            },
            "description": "Successfully created route"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Invalid route"
          }
        },
        "summary": "Create a new route",
        "tags": [
          "Routes"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/route-request"
        }
      }
    },
    "/routes/{route_id_or_name}": {
      "delete": {
        "description": "Delete a route",
        "operationId": "delete-route",
        "responses": {
          "204": {
            "description": "Successfully deleted route or the resource didn't exist"
          }
        },
        "summary": "Delete a route",
        "tags": [
          "Routes"
        ]
      },
      "get": {
        "description": "Get a route using ID or name.",
        "operationId": "get-route",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Route"
                }
              }
            },
            "description": "Successfully fetched route"
          },
          "404": {
            "description": "Resource does not exist"
          }
        },
        "summary": "Fetch a route",
        "tags": [
          "Routes"
        ]
      },
      "patch": {
        "description": "Update a route",
        "operationId": "update-route",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Route"
                }
              }
            },
            "description": "Successfully updated route"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Invalid route"
          },
          "404": {
            "description": "Resource does not exist"
          }
        },
        "summary": "Update a route",
        "tags": [
          "Routes"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/route-request"
        }
      },
      "put": {
        "description": "Create or update a route using ID or name.",
        "operationId": "upsert-route",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Route"
                }
              }
            },
            "description": "Successfully upserted route"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Invalid route"
          }
        },
        "summary": "Update a route",
        "tags": [
          "Routes"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/route-request"
        }
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/route_id_or_name"
        }
      ]
    },
    "/routes/{route_id_or_name}/plugins": {
      "get": {
        "description": "List all plugins associated with a route",
        "parameters": [
          {
            "$ref": "#/components/parameters/pagination-size"
          },
          {
            "$ref": "#/components/parameters/pagination-offset"
          },
          {
            "$ref": "#/components/parameters/pagination-tags-filter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/Plugin"
                      },
                      "type": "array"
                    },
                    "offset": {
                      "$ref": "#/components/schemas/pagination-offset-response"
                    }
                  }
                }
              }
            },
            "description": "A successful response listing plugins"
          }
        },
        "summary": "List all plugins associated with a route",
        "tags": [
          "Plugins"
        ],
        "operationId": "list-plugins-with-route"
      },
      "post": {
        "description": "Create a new plugin associated with a route",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Plugin"
                }
              }
            },
            "description": "Successfully created plugin"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Invalid plugin"
          }
        },
        "summary": "Create a new plugin associated with a route",
        "tags": [
          "Plugins"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/plugin-request"
        },
        "operationId": "create-plugin-with-route"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/route_id_or_name"
        }
      ]
    },
    "/routes/{route_id_or_name}/plugins/{plugin_id}": {
      "delete": {
        "description": "Delete a plugin associated with a route using ID.",
        "responses": {
          "204": {
            "description": "Successfully deleted plugin or the resource didn't exist"
          }
        },
        "summary": "Delete a plugin associated with a route",
        "tags": [
          "Plugins"
        ],
        "operationId": "delete-plugin-with-route"
      },
      "get": {
        "description": "Get a plugin associated with a route using ID.",
        "responses": {
          "200": {
            "$ref": "#/components/responses/plugin-response"
          },
          "404": {
            "description": "Resource does not exist"
          }
        },
        "summary": "Fetch a plugin associated with a route",
        "tags": [
          "Plugins"
        ],
        "operationId": "fetch-plugin-with-route"
      },
      "patch": {
        "description": "Update a plugin associated with a route using ID.",
        "responses": {
          "200": {
            "$ref": "#/components/responses/plugin-response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Invalid plugin"
          },
          "404": {
            "description": "Resource does not exist"
          }
        },
        "summary": "Update a plugin associated with a route",
        "tags": [
          "Plugins"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/plugin-request"
        },
        "operationId": "update-plugin-with-route"
      },
      "put": {
        "description": "Create or Update a plugin associated with a route using ID.",
        "responses": {
          "200": {
            "$ref": "#/components/responses/plugin-response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Invalid plugin"
          }
        },
        "summary": "Upsert a plugin associated with a route",
        "tags": [
          "Plugins"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/plugin-request"
        },
        "operationId": "upsert-plugin-with-route"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/route_id_or_name"
        },
        {
          "$ref": "#/components/parameters/plugin_id"
        }
      ]
    },
    "/services": {
      "get": {
        "description": "List all Services",
        "operationId": "list-service",
        "parameters": [
          {
            "$ref": "#/components/parameters/pagination-size"
          },
          {
            "$ref": "#/components/parameters/pagination-offset"
          },
          {
            "$ref": "#/components/parameters/pagination-tags-filter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/Service"
                      },
                      "type": "array"
                    },
                    "offset": {
                      "$ref": "#/components/schemas/pagination-offset-response"
                    }
                  }
                }
              }
            },
            "description": "A successful response listing Services"
          }
        },
        "summary": "List all services",
        "tags": [
          "Services"
        ]
      },
      "post": {
        "description": "Create a new service",
        "operationId": "create-service",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Service"
                }
              }
            },
            "description": "Successfully created Service"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Invalid Service"
          }
        },
        "summary": "Create a new service",
        "tags": [
          "Services"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/service-request"
        }
      }
    },
    "/services/{service_id_or_name}": {
      "delete": {
        "description": "Delete a Service",
        "operationId": "delete-service",
        "responses": {
          "204": {
            "description": "Successfully deleted Service or the resource didn't exist"
          }
        },
        "summary": "Delete a Service",
        "tags": [
          "Services"
        ]
      },
      "get": {
        "description": "Get a Service using ID or name.",
        "operationId": "get-service",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Service"
                }
              }
            },
            "description": "Successfully fetched Service"
          },
          "404": {
            "description": "Resource does not exist"
          }
        },
        "summary": "Fetch a Service",
        "tags": [
          "Services"
        ]
      },
      "patch": {
        "description": "Update a Service",
        "operationId": "update-service",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Service"
                }
              }
            },
            "description": "Successfully updated Service"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Invalid Service"
          },
          "404": {
            "description": "Resource does not exist"
          }
        },
        "summary": "Update a Service",
        "tags": [
          "Services"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/service-request"
        }
      },
      "put": {
        "description": "Create or Update Service using ID or name.",
        "operationId": "upsert-service",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Service"
                }
              }
            },
            "description": "Successfully upserted Service"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Invalid Service"
          }
        },
        "summary": "Upsert a Service",
        "tags": [
          "Services"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/service-request"
        }
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/service_id_or_name"
        }
      ]
    },
    "/services/{service_id_or_name}/plugins": {
      "get": {
        "description": "List all plugins associated with a Service",
        "parameters": [
          {
            "$ref": "#/components/parameters/pagination-size"
          },
          {
            "$ref": "#/components/parameters/pagination-offset"
          },
          {
            "$ref": "#/components/parameters/pagination-tags-filter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/Plugin"
                      },
                      "type": "array"
                    },
                    "offset": {
                      "$ref": "#/components/schemas/pagination-offset-response"
                    }
                  }
                }
              }
            },
            "description": "A successful response listing plugins"
          }
        },
        "summary": "List all plugins associated with a Service",
        "tags": [
          "Plugins"
        ],
        "operationId": "list-plugins-with-service"
      },
      "post": {
        "description": "Create a new plugin associated with a Service",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Plugin"
                }
              }
            },
            "description": "Successfully created plugin"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Invalid plugin"
          }
        },
        "summary": "Create a new plugin associated with a Service",
        "tags": [
          "Plugins"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/plugin-request"
        },
        "operationId": "create-plugin-with-service"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/service_id_or_name"
        }
      ]
    },
    "/services/{service_id_or_name}/plugins/{plugin_id}": {
      "delete": {
        "description": "Delete a plugin associated with a Service using ID.",
        "responses": {
          "204": {
            "description": "Successfully deleted plugin or the resource didn't exist"
          }
        },
        "summary": "Delete a plugin associated with a Service",
        "tags": [
          "Plugins"
        ],
        "operationId": "delete-plugin-with-service"
      },
      "get": {
        "description": "Get a plugin associated with a Service using ID.",
        "responses": {
          "200": {
            "$ref": "#/components/responses/plugin-response"
          },
          "404": {
            "description": "Resource does not exist"
          }
        },
        "summary": "Fetch a plugin associated with a Service",
        "tags": [
          "Plugins"
        ],
        "operationId": "fetch-plugin-with-service"
      },
      "patch": {
        "description": "Update a plugin associated with a Service using ID.",
        "responses": {
          "200": {
            "$ref": "#/components/responses/plugin-response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Invalid plugin"
          },
          "404": {
            "description": "Resource does not exist"
          }
        },
        "summary": "Update a plugin associated with a Service",
        "tags": [
          "Plugins"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/plugin-request"
        },
        "operationId": "update-plugin-with-service"
      },
      "put": {
        "description": "Create or Update a plugin associated with a Service using ID.",
        "responses": {
          "200": {
            "$ref": "#/components/responses/plugin-response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Invalid plugin"
          }
        },
        "summary": "Upsert a plugin associated with a Service",
        "tags": [
          "Plugins"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/plugin-request"
        },
        "operationId": "upsert-plugin-with-service"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/service_id_or_name"
        },
        {
          "$ref": "#/components/parameters/plugin_id"
        }
      ]
    },
    "/services/{service_id_or_name}/routes": {
      "get": {
        "description": "List all routes associated with a Service",
        "parameters": [
          {
            "$ref": "#/components/parameters/pagination-size"
          },
          {
            "$ref": "#/components/parameters/pagination-offset"
          },
          {
            "$ref": "#/components/parameters/pagination-tags-filter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/Route"
                      },
                      "type": "array"
                    },
                    "offset": {
                      "$ref": "#/components/schemas/pagination-offset-response"
                    }
                  }
                }
              }
            },
            "description": "A successful response listing routes"
          }
        },
        "summary": "List all routes associated with a Service",
        "tags": [
          "Routes"
        ],
        "operationId": "list-routes-with-service"
      },
      "post": {
        "description": "Create a new route associated with a Service",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Route"
                }
              }
            },
            "description": "Successfully created route"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Invalid route"
          }
        },
        "summary": "Create a new route associated with a Service",
        "tags": [
          "Routes"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/route-request"
        },
        "operationId": "create-route-with-service"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/service_id_or_name"
        }
      ]
    },
    "/services/{service_id_or_name}/routes/{route_id_or_name}": {
      "delete": {
        "description": "Delete a route associated with a Service using ID or name.",
        "responses": {
          "204": {
            "description": "Successfully deleted route or the resource didn't exist"
          }
        },
        "summary": "Delete a route associated with a Service",
        "tags": [
          "Routes"
        ],
        "operationId": "delete-route-with-service"
      },
      "get": {
        "description": "Get a route associated with a service using ID or name.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Route"
                }
              }
            },
            "description": "Successfully fetched route"
          },
          "404": {
            "description": "Resource does not exist"
          }
        },
        "summary": "Fetch a route associated with a Service",
        "tags": [
          "Routes"
        ],
        "operationId": "fetch-route-with-service"
      },
      "patch": {
        "description": "Update a route associated with a Service using ID or name.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Route"
                }
              }
            },
            "description": "Successfully updated route"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Invalid route"
          },
          "404": {
            "description": "Resource does not exist"
          }
        },
        "summary": "Update a route associated with a Service",
        "tags": [
          "Routes"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/route-request"
        },
        "operationId": "update-route-with-service"
      },
      "put": {
        "description": "Create or Update a route associated with a Service using ID or name.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Route"
                }
              }
            },
            "description": "Successfully upserted route"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Invalid route"
          }
        },
        "summary": "Upsert a route associated with a Service",
        "tags": [
          "Routes"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/route-request"
        },
        "operationId": "upsert-route-with-service"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/service_id_or_name"
        },
        {
          "$ref": "#/components/parameters/route_id_or_name"
        }
      ]
    },
    "/snis": {
      "get": {
        "description": "List all SNIs",
        "operationId": "list-sni",
        "parameters": [
          {
            "$ref": "#/components/parameters/pagination-size"
          },
          {
            "$ref": "#/components/parameters/pagination-offset"
          },
          {
            "$ref": "#/components/parameters/pagination-tags-filter"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/sni-response"
          }
        },
        "summary": "List all SNIs",
        "tags": [
          "SNIs"
        ]
      },
      "post": {
        "description": "Create a new SNI",
        "operationId": "create-sni",
        "responses": {
          "200": {
            "$ref": "#/components/responses/sni-response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Invalid SNI"
          }
        },
        "summary": "Create a new SNI",
        "tags": [
          "SNIs"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/create-sni"
        }
      }
    },
    "/snis/{sni_name_or_id}": {
      "delete": {
        "description": "Delete an SNI",
        "operationId": "delete-sni",
        "responses": {
          "204": {
            "description": "Successfully deleted SNI or the resource didn't exist"
          }
        },
        "summary": "Delete an SNI",
        "tags": [
          "SNIs"
        ]
      },
      "get": {
        "description": "Get an SNI using ID or name.",
        "operationId": "get-sni",
        "responses": {
          "200": {
            "$ref": "#/components/responses/sni-response"
          },
          "404": {
            "description": "Resource does not exist"
          }
        },
        "summary": "Fetch an SNI",
        "tags": [
          "SNIs"
        ]
      },
      "patch": {
        "description": "Update an SNI",
        "operationId": "update-sni",
        "responses": {
          "200": {
            "$ref": "#/components/responses/sni-response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Invalid SNI"
          },
          "404": {
            "description": "Resource does not exist"
          }
        },
        "summary": "Update an SNI",
        "tags": [
          "SNIs"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/create-sni"
        }
      },
      "put": {
        "description": "Create or Update SNI using ID or name.",
        "operationId": "upsert-sni",
        "responses": {
          "200": {
            "$ref": "#/components/responses/sni-response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Invalid SNI"
          }
        },
        "summary": "Upsert a SNI",
        "tags": [
          "SNIs"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/create-sni"
        }
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/sni_name_or_id"
        }
      ]
    },
    "/upstreams": {
      "get": {
        "description": "List all registered upstreams. You can filter the results by pagination size, offset, or tags like /upstreams?size=10&offset=0.\n",
        "operationId": "list-upstream",
        "parameters": [
          {
            "$ref": "#/components/parameters/pagination-size"
          },
          {
            "$ref": "#/components/parameters/pagination-offset"
          },
          {
            "$ref": "#/components/parameters/pagination-tags-filter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/Upstream"
                      },
                      "type": "array"
                    },
                    "offset": {
                      "$ref": "#/components/schemas/pagination-offset-response"
                    }
                  }
                }
              }
            },
            "description": "A successful response listing Upstreams"
          }
        },
        "summary": "List all Upstreams",
        "tags": [
          "Upstreams"
        ]
      },
      "post": {
        "description": "Create a new Upstream",
        "operationId": "create-upstream",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Upstream"
                }
              }
            },
            "description": "Successfully created Upstream"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Invalid Upstream"
          }
        },
        "summary": "Create a new Upstream",
        "tags": [
          "Upstreams"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/upstream-request"
        }
      }
    },
    "/upstreams/{upstream_id_or_name}": {
      "delete": {
        "description": "Delete an Upstream",
        "operationId": "delete-upstream",
        "responses": {
          "204": {
            "description": "Successfully deleted Upstream or the resource didn't exist"
          }
        },
        "summary": "Delete an Upstream",
        "tags": [
          "Upstreams"
        ]
      },
      "get": {
        "description": "Get an Upstream using ID or name.",
        "operationId": "get-upstream",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Upstream"
                }
              }
            },
            "description": "Successfully fetched Upstream"
          },
          "404": {
            "description": "Resource does not exist"
          }
        },
        "summary": "Fetch an Upstream",
        "tags": [
          "Upstreams"
        ]
      },
      "patch": {
        "description": "Update an Upstream",
        "operationId": "update-upstream",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Upstream"
                }
              }
            },
            "description": "Successfully updated Upstream"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Invalid Upstream"
          },
          "404": {
            "description": "Resource does not exist"
          }
        },
        "summary": "Update an Upstream",
        "tags": [
          "Upstreams"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/upstream-request"
        }
      },
      "put": {
        "description": "Create or Update Upstream using ID or name.",
        "operationId": "upsert-upstream",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Upstream"
                }
              }
            },
            "description": "Successfully upserted Upstream"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Invalid Upstream"
          }
        },
        "summary": "Upsert a Upstream",
        "tags": [
          "Upstreams"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/upstream-request"
        }
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/upstream_id_or_name"
        }
      ]
    },
    "/upstreams/{upstream_id_or_name}/targets": {
      "get": {
        "description": "List all Targets associated with a an Upstream",
        "parameters": [
          {
            "$ref": "#/components/parameters/pagination-size"
          },
          {
            "$ref": "#/components/parameters/pagination-offset"
          },
          {
            "$ref": "#/components/parameters/pagination-tags-filter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/Target"
                      },
                      "type": "array"
                    },
                    "offset": {
                      "$ref": "#/components/schemas/pagination-offset-response"
                    }
                  }
                }
              }
            },
            "description": "A successful response listing Targets"
          }
        },
        "summary": "List all Targets associated with an Upstream",
        "tags": [
          "Targets"
        ],
        "operationId": "list-target-with-upstream"
      },
      "post": {
        "description": "Create a new Target associated with an Upstream",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Target"
                }
              }
            },
            "description": "Successfully created Target"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Invalid Target"
          }
        },
        "summary": "Create a new Target associated with an Upstream",
        "tags": [
          "Targets"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/target-request"
        },
        "operationId": "create-target-with-upstream"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/upstream_id_or_name"
        }
      ]
    },
    "/upstreams/{upstream_id_or_name}/targets/{target_id_or_target}": {
      "delete": {
        "description": "Delete a Target associated with a an Upstream using ID or target.",
        "responses": {
          "204": {
            "description": "Successfully deleted Target or the resource didn't exist"
          }
        },
        "summary": "Delete a Target associated with a an Upstream",
        "tags": [
          "Targets"
        ],
        "operationId": "delete-target-with-upstream"
      },
      "get": {
        "description": "Get a Target associated with an Upstream using ID or target.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Target"
                }
              }
            },
            "description": "Successfully fetched Target"
          },
          "404": {
            "description": "Resource does not exist"
          }
        },
        "summary": "Fetch a Target associated with an Upstream",
        "tags": [
          "Targets"
        ],
        "operationId": "fetch-target-with-upstream"
      },
      "patch": {
        "description": "Update a Target associated with a an Upstream using ID or target.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Target"
                }
              }
            },
            "description": "Successfully updated Target"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Invalid Target"
          },
          "404": {
            "description": "Resource does not exist"
          }
        },
        "summary": "Update a Target associated with a an Upstream",
        "tags": [
          "Targets"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/target-request"
        },
        "operationId": "update-target-with-upstream"
      },
      "put": {
        "description": "Create or Update a Target associated with an Upstream using ID or target.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Target"
                }
              }
            },
            "description": "Successfully upserted Target"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Invalid Target"
          }
        },
        "summary": "Upsert a Target associated with an Upstream",
        "tags": [
          "Targets"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/target-request"
        },
        "operationId": "upsert-target-with-upstream"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/upstream_id_or_name"
        },
        {
          "$ref": "#/components/parameters/target_id_or_target"
        }
      ]
    },
    "/vaults": {
      "get": {
        "description": "List all Vaults",
        "operationId": "list-vault",
        "parameters": [
          {
            "$ref": "#/components/parameters/pagination-size"
          },
          {
            "$ref": "#/components/parameters/pagination-offset"
          },
          {
            "$ref": "#/components/parameters/pagination-tags-filter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/Vault"
                      },
                      "type": "array"
                    },
                    "offset": {
                      "$ref": "#/components/schemas/pagination-offset-response"
                    }
                  }
                }
              }
            },
            "description": "A successful response listing Vaults"
          }
        },
        "summary": "List all Vaults",
        "tags": [
          "Vaults"
        ]
      },
      "post": {
        "description": "Create a new Vault",
        "operationId": "create-vault",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Vault"
                }
              }
            },
            "description": "Successfully created Vault"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Invalid Vault"
          }
        },
        "summary": "Create a new Vault",
        "tags": [
          "Vaults"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/vault-request"
        }
      }
    },
    "/vaults/{vault_id_or_prefix}": {
      "delete": {
        "description": "Delete a Vault",
        "operationId": "delete-vault",
        "responses": {
          "204": {
            "description": "Successfully deleted Vault or the resource didn't exist"
          }
        },
        "summary": "Delete a Vault",
        "tags": [
          "Vaults"
        ]
      },
      "get": {
        "description": "Fetch a Vault using ID or prefix.\n\nVault entities are used to configure different Vault connectors.\n",
        "operationId": "get-vault",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Vault"
                }
              }
            },
            "description": "Successfully fetched Vault"
          },
          "404": {
            "description": "Resource does not exist"
          }
        },
        "summary": "Fetch a Vault",
        "tags": [
          "Vaults"
        ]
      },
      "patch": {
        "description": "Update a Vault",
        "operationId": "update-vault",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Vault"
                }
              }
            },
            "description": "Successfully updated Vault"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Invalid Vault"
          },
          "404": {
            "description": "Resource does not exist"
          }
        },
        "summary": "Update a Vault",
        "tags": [
          "Vaults"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/vault-request"
        }
      },
      "put": {
        "description": "Create or Update Vault using ID or prefix.",
        "operationId": "upsert-vault",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Vault"
                }
              }
            },
            "description": "Successfully upserted Vault"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Invalid Vault"
          }
        },
        "summary": "Upsert a Vault",
        "tags": [
          "Vaults"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/vault-request"
        }
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/vault_id_or_prefix"
        }
      ]
    },
    "/workspaces": {
      "get": {
        "description": "List all Workspaces\n\nFor workspace use cases and configuration examples, see [Workspace examples](https://docs.konghq.com/gateway/3.2.x/kong-enterprise/workspaces/).",
        "operationId": "list-workspace",
        "parameters": [
          {
            "$ref": "#/components/parameters/pagination-size"
          },
          {
            "$ref": "#/components/parameters/pagination-offset"
          },
          {
            "$ref": "#/components/parameters/pagination-tags-filter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/Workspace"
                      },
                      "type": "array"
                    },
                    "offset": {
                      "$ref": "#/components/schemas/pagination-offset-response"
                    }
                  }
                }
              }
            },
            "description": "A successful response listing Workspaces"
          }
        },
        "summary": "List all Workspaces",
        "tags": [
          "Workspaces"
        ]
      },
      "post": {
        "description": "Create a new Workspace\n\nFor workspace use cases and configuration examples, see [Workspace examples](https://docs.konghq.com/gateway/3.2.x/kong-enterprise/workspaces/).\n",
        "operationId": "create-workspace",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Workspace"
              }
            }
          },
          "description": "Description of the new Workspace for creation",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Workspace"
                }
              }
            },
            "description": "Successfully created Workspace"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Invalid Workspace"
          }
        },
        "summary": "Create a new Workspace",
        "tags": [
          "Workspaces"
        ]
      }
    },
    "/workspaces/{workspace_id_or_name}": {
      "delete": {
        "description": "Delete a Workspace",
        "operationId": "delete-workspace",
        "responses": {
          "204": {
            "description": "Successfully deleted Workspace or the resource didn't exist"
          }
        },
        "summary": "Delete a Workspace",
        "tags": [
          "Workspaces"
        ]
      },
      "get": {
        "description": "Get a Workspace using ID or name.",
        "operationId": "get-workspace",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Workspace"
                }
              }
            },
            "description": "Successfully fetched Workspace"
          },
          "404": {
            "description": "Resource does not exist"
          }
        },
        "summary": "Fetch a Workspace",
        "tags": [
          "Workspaces"
        ]
      },
      "patch": {
        "description": "Update a Workspace",
        "operationId": "update-workspace",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Workspace"
              }
            }
          },
          "description": "Fields of the Workspace that need to be updated",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Workspace"
                }
              }
            },
            "description": "Successfully updated Workspace"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Invalid Workspace"
          },
          "404": {
            "description": "Resource does not exist"
          }
        },
        "summary": "Update a Workspace",
        "tags": [
          "Workspaces"
        ]
      },
      "put": {
        "description": "Create or Update Workspace using ID or name.",
        "operationId": "upsert-workspace",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Workspace"
              }
            }
          },
          "description": "Description of the Workspace",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Workspace"
                }
              }
            },
            "description": "Successfully upserted Workspace"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Invalid Workspace"
          }
        },
        "summary": "Upsert a Workspace",
        "tags": [
          "Workspaces"
        ]
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/workspace_id_or_name"
        }
      ]
    },
    "/{workspace}/certificates": {
      "get": {
        "description": "List all Certificates in a workspace",
        "operationId": "list-certificate-in-workspace",
        "parameters": [
          {
            "$ref": "#/components/parameters/pagination-size"
          },
          {
            "$ref": "#/components/parameters/pagination-offset"
          },
          {
            "$ref": "#/components/parameters/pagination-tags-filter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/Certificate"
                      },
                      "type": "array"
                    },
                    "offset": {
                      "$ref": "#/components/schemas/pagination-offset-response"
                    }
                  }
                }
              }
            },
            "description": "A successful response listing Certificates"
          }
        },
        "summary": "List all Certificates in a workspace",
        "tags": [
          "Certificates"
        ]
      },
      "post": {
        "description": "Create a new Certificate in a workspace",
        "operationId": "create-certificate-in-workspace",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Certificate"
                }
              }
            },
            "description": "Successfully created Certificate"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Invalid Certificate"
          }
        },
        "summary": "Create a new Certificate in a workspace",
        "tags": [
          "Certificates"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/cert-request"
        }
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/workspace"
        }
      ]
    },
    "/{workspace}/certificates/{certificate_id}": {
      "delete": {
        "description": "Delete a Certificate in a workspace",
        "operationId": "delete-certificate-in-workspace",
        "responses": {
          "204": {
            "description": "Successfully deleted Certificate or the resource didn't exist"
          }
        },
        "summary": "Delete a Certificate in a workspace",
        "tags": [
          "Certificates"
        ]
      },
      "get": {
        "description": "Get a Certificate using ID in a workspace.",
        "operationId": "get-certificate-in-workspace",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Certificate"
                }
              }
            },
            "description": "Successfully fetched Certificate"
          },
          "404": {
            "description": "Resource does not exist"
          }
        },
        "summary": "Fetch a Certificate in a workspace",
        "tags": [
          "Certificates"
        ]
      },
      "patch": {
        "description": "Update a Certificate in a workspace",
        "operationId": "update-certificate-in-workspace",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Certificate"
              }
            }
          },
          "description": "Fields of the Certificate that need to be updated",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Certificate"
                }
              }
            },
            "description": "Successfully updated Certificate"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Invalid Certificate"
          },
          "404": {
            "description": "Resource does not exist"
          }
        },
        "summary": "Update a Certificate in a workspace",
        "tags": [
          "Certificates"
        ]
      },
      "put": {
        "description": "Create or Update Certificate using ID in a workspace.",
        "operationId": "upsert-certificate-in-workspace",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Certificate"
              }
            }
          },
          "description": "Description of the Certificate",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Certificate"
                }
              }
            },
            "description": "Successfully upserted Certificate"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Invalid Certificate"
          }
        },
        "summary": "Upsert a Certificate in a workspace",
        "tags": [
          "Certificates"
        ]
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/workspace"
        },
        {
          "$ref": "#/components/parameters/certificate_id"
        }
      ]
    },
    "/{workspace}/certificates/{certificate_id}/snis": {
      "get": {
        "description": "List all SNIs associated with a Certificate in a workspace",
        "parameters": [
          {
            "$ref": "#/components/parameters/pagination-size"
          },
          {
            "$ref": "#/components/parameters/pagination-offset"
          },
          {
            "$ref": "#/components/parameters/pagination-tags-filter"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/sni-response"
          }
        },
        "summary": "List all SNIs associated with a Certificate in a workspace",
        "tags": [
          "SNIs"
        ],
        "operationId": "list-sni-with-cert-in-workspace"
      },
      "post": {
        "description": "Create a new SNI associated with a Certificate in a workspace",
        "responses": {
          "200": {
            "$ref": "#/components/responses/sni-response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Invalid SNI"
          }
        },
        "summary": "Create a new SNI associated with a Certificate in a workspace",
        "tags": [
          "SNIs"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/create-sni"
        },
        "operationId": "create-sni-with-cert-in-workspace"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/workspace"
        },
        {
          "$ref": "#/components/parameters/certificate_id"
        }
      ]
    },
    "/{workspace}/certificates/{certificate_id}/snis/{sni_name_or_id}": {
      "delete": {
        "description": "Delete a an SNI associated with a Certificate using ID or name in a workspace.",
        "responses": {
          "204": {
            "description": "Successfully deleted SNI or the resource didn't exist"
          }
        },
        "summary": "Delete an SNI associated with a Certificate in a workspace",
        "tags": [
          "SNIs"
        ],
        "operationId": "delete-sni-with-cert-in-workspace"
      },
      "get": {
        "description": "Get an SNI associated with a Certificate using ID or name in a workspace.",
        "responses": {
          "200": {
            "$ref": "#/components/responses/sni-response"
          },
          "404": {
            "description": "Resource does not exist"
          }
        },
        "summary": "Fetch an SNI associated with a Certificate in a workspace",
        "tags": [
          "SNIs"
        ],
        "operationId": "fetch-sni-with-cert-in-workspace"
      },
      "patch": {
        "description": "Update a an SNI associated with a Certificate using ID or name in a workspace.",
        "responses": {
          "200": {
            "$ref": "#/components/responses/sni-response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Invalid SNI"
          },
          "404": {
            "description": "Resource does not exist"
          }
        },
        "summary": "Update an SNI associated with a Certificate in a workspace",
        "tags": [
          "SNIs"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/create-sni"
        },
        "operationId": "update-sni-with-cert-in-workspace"
      },
      "put": {
        "description": "Create or Update an SNI associated with a Certificate using ID or name in a workspace.",
        "responses": {
          "200": {
            "$ref": "#/components/responses/sni-response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Invalid SNI"
          }
        },
        "summary": "Upsert an SNI associated with a Certificate in a workspace",
        "tags": [
          "SNIs"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/create-sni"
        },
        "operationId": "upsert-sni-with-cert-in-workspace"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/workspace"
        },
        {
          "$ref": "#/components/parameters/certificate_id"
        },
        {
          "$ref": "#/components/parameters/sni_name_or_id"
        }
      ]
    },
    "/{workspace}/consumers": {
      "get": {
        "description": "List all Consumers in a workspace",
        "operationId": "list-consumer-in-workspace",
        "parameters": [
          {
            "$ref": "#/components/parameters/pagination-size"
          },
          {
            "$ref": "#/components/parameters/pagination-offset"
          },
          {
            "$ref": "#/components/parameters/pagination-tags-filter"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/consumer_response"
          }
        },
        "summary": "List all Consumers in a workspace",
        "tags": [
          "Consumers"
        ]
      },
      "post": {
        "description": "Create a new Consumer in a workspace",
        "operationId": "create-consumer-in-workspace",
        "parameters": [
          {
            "description": "Name or ID of workspace",
            "example": "team-a",
            "in": "path",
            "name": "workspace",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/consumer_response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Invalid Consumer"
          }
        },
        "summary": "Create a new Consumer in a workspace",
        "tags": [
          "Consumers"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/consumer-request"
        }
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/workspace"
        }
      ]
    },
    "/{workspace}/consumers/{consumer_username_or_id}": {
      "delete": {
        "description": "Delete a Consumer in a workspace",
        "operationId": "delete-consumer-in-workspace",
        "responses": {
          "204": {
            "description": "Successfully deleted Consumer or the resource didn't exist"
          }
        },
        "summary": "Delete a Consumer in a workspace",
        "tags": [
          "Consumers"
        ]
      },
      "get": {
        "description": "Get a Consumer using ID or username in a workspace.",
        "operationId": "get-consumer-in-workspace",
        "responses": {
          "200": {
            "$ref": "#/components/responses/consumer_response"
          },
          "404": {
            "description": "Resource does not exist"
          }
        },
        "summary": "Fetch a Consumer in a workspace",
        "tags": [
          "Consumers"
        ]
      },
      "patch": {
        "description": "Update a Consumer in a workspace",
        "operationId": "update-consumer-in-workspace",
        "responses": {
          "200": {
            "$ref": "#/components/responses/consumer_response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Invalid Consumer"
          },
          "404": {
            "description": "Resource does not exist"
          }
        },
        "summary": "Update a Consumer in a workspace",
        "tags": [
          "Consumers"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/consumer-request"
        }
      },
      "put": {
        "description": "Create or Update Consumer using ID or username in a workspace.",
        "operationId": "upsert-consumer-in-workspace",
        "responses": {
          "200": {
            "$ref": "#/components/responses/consumer_response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Invalid Consumer"
          }
        },
        "summary": "Upsert a Consumer in a workspace",
        "tags": [
          "Consumers"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/consumer-request"
        }
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/workspace"
        },
        {
          "$ref": "#/components/parameters/consumer_username_or_id"
        }
      ]
    },
    "/{workspace}/consumers/{consumer_username_or_id}/plugins": {
      "get": {
        "description": "List all plugins associated with a Consumer in a workspace",
        "parameters": [
          {
            "$ref": "#/components/parameters/pagination-size"
          },
          {
            "$ref": "#/components/parameters/pagination-offset"
          },
          {
            "$ref": "#/components/parameters/pagination-tags-filter"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/plugin-response"
          }
        },
        "summary": "List all plugins associated with a Consumer in a workspace",
        "tags": [
          "Plugins"
        ],
        "operationId": "list-plugins-consumer-workspace"
      },
      "post": {
        "description": "Create a new plugin associated with a Consumer in a workspace",
        "responses": {
          "200": {
            "$ref": "#/components/responses/plugin-response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Invalid plugin"
          }
        },
        "summary": "Create a new plugin associated with a Consumer in a workspace",
        "tags": [
          "Plugins"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/plugin-request"
        },
        "operationId": "create-plugin-with-consumer-workspace"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/workspace"
        },
        {
          "$ref": "#/components/parameters/consumer_username_or_id"
        }
      ]
    },
    "/{workspace}/consumers/{consumer_username_or_id}/plugins/{plugin_id}": {
      "delete": {
        "description": "Delete a plugin associated with a Consumer using ID in a workspace.",
        "responses": {
          "204": {
            "description": "Successfully deleted plugin or the resource didn't exist"
          }
        },
        "summary": "Delete a plugin associated with a Consumer in a workspace",
        "tags": [
          "Plugins"
        ],
        "operationId": "delete-plugin-with-consumer-workspace"
      },
      "get": {
        "description": "Get a plugin associated with a Consumer using ID in a workspace.",
        "responses": {
          "200": {
            "$ref": "#/components/responses/plugin-response"
          },
          "404": {
            "description": "Resource does not exist"
          }
        },
        "summary": "Fetch a plugin associated with a Consumer in a workspace",
        "tags": [
          "Plugins"
        ],
        "operationId": "fetch-plugin-with-consumer-workspace"
      },
      "patch": {
        "description": "Update a plugin associated with a Consumer using ID in a workspace.",
        "responses": {
          "200": {
            "$ref": "#/components/responses/plugin-response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Invalid plugin"
          },
          "404": {
            "description": "Resource does not exist"
          }
        },
        "summary": "Update a plugin associated with a Consumer in a workspace",
        "tags": [
          "Plugins"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/plugin-request"
        },
        "operationId": "update-plugin-with-consumer-workspace"
      },
      "put": {
        "description": "Create or Update a plugin associated with a Consumer using ID in a workspace.",
        "responses": {
          "200": {
            "$ref": "#/components/responses/plugin-response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Invalid plugin"
          }
        },
        "summary": "Upsert a plugin associated with a Consumer in a workspace",
        "tags": [
          "Plugins"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/plugin-request"
        },
        "operationId": "upsert-plugin-with-consumer-workspace"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/workspace"
        },
        {
          "$ref": "#/components/parameters/consumer_username_or_id"
        },
        {
          "$ref": "#/components/parameters/plugin_id"
        }
      ]
    },
    "/{workspace}/key-sets": {
      "get": {
        "description": "List all Key-sets in a workspace",
        "operationId": "list-key-set-in-workspace",
        "parameters": [
          {
            "$ref": "#/components/parameters/pagination-size"
          },
          {
            "$ref": "#/components/parameters/pagination-offset"
          },
          {
            "$ref": "#/components/parameters/pagination-tags-filter"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/key-set-response"
          }
        },
        "summary": "List all Key-sets in a workspace",
        "tags": [
          "Key-sets"
        ]
      },
      "post": {
        "description": "Create a new Key-set in a workspace",
        "operationId": "create-key-set-in-workspace",
        "responses": {
          "200": {
            "$ref": "#/components/responses/key-set-response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Invalid Key-set"
          }
        },
        "summary": "Create a new Key-set in a workspace",
        "tags": [
          "Key-sets"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/key-set-request"
        }
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/workspace"
        }
      ]
    },
    "/{workspace}/key-sets/{key-set_id_or_name}": {
      "delete": {
        "description": "Delete a Key-set in a workspace",
        "operationId": "delete-key-set-in-workspace",
        "responses": {
          "204": {
            "description": "Successfully deleted Key-set or the resource didn't exist"
          }
        },
        "summary": "Delete a Key-set in a workspace",
        "tags": [
          "Key-sets"
        ]
      },
      "get": {
        "description": "Get a Key-set using ID or name in a workspace.",
        "operationId": "get-key-set-in-workspace",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Key-set"
                }
              }
            },
            "description": "Successfully fetched Key-set"
          },
          "404": {
            "description": "Resource does not exist"
          }
        },
        "summary": "Fetch a Key-set in a workspace",
        "tags": [
          "Key-sets"
        ]
      },
      "patch": {
        "description": "Update a Key-set in a workspace",
        "operationId": "update-key-set-in-workspace",
        "responses": {
          "200": {
            "$ref": "#/components/responses/key-set-response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Invalid Key-set"
          },
          "404": {
            "description": "Resource does not exist"
          }
        },
        "summary": "Update a Key-set in a workspace",
        "tags": [
          "Key-sets"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/key-set-request"
        }
      },
      "put": {
        "description": "Create or Update Key-set using ID or name in a workspace.",
        "operationId": "upsert-key-set-in-workspace",
        "responses": {
          "200": {
            "$ref": "#/components/responses/key-set-response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Invalid Key-set"
          }
        },
        "summary": "Upsert a Key-set in a workspace",
        "tags": [
          "Key-sets"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/key-set-request"
        }
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/workspace"
        },
        {
          "$ref": "#/components/parameters/key-set_id_or_name"
        }
      ]
    },
    "/{workspace}/keys": {
      "get": {
        "description": "List all Keys in a workspace",
        "operationId": "list-key-in-workspace",
        "parameters": [
          {
            "$ref": "#/components/parameters/pagination-size"
          },
          {
            "$ref": "#/components/parameters/pagination-offset"
          },
          {
            "$ref": "#/components/parameters/pagination-tags-filter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Key"
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "id": "d958f66b-8e99-44d2-b0b4-edd5bbf24658",
                      "jwk": "{\"alg\":\"RSA\",  \"kid\": \"42\",  ...}",
                      "kid": "42",
                      "name": "a-key",
                      "pem": {
                        "private_key": "-----BEGIN",
                        "public_key": "-----BEGIN"
                      },
                      "set": {
                        "id": "b86b331c-dcd0-4b3e-97ce-47c5a9543031"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "List all Keys in a workspace",
        "tags": [
          "Keys"
        ]
      },
      "post": {
        "description": "Create a new Key in a workspace",
        "operationId": "create-key-in-workspace",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Key"
                },
                "examples": {
                  "Successfully created Key": {
                    "value": {
                      "id": "d958f66b-8e99-44d2-b0b4-edd5bbf24658",
                      "jwk": "{\"alg\":\"RSA\",  \"kid\": \"42\",  ...}",
                      "kid": "42",
                      "name": "a-key",
                      "pem": {
                        "private_key": "-----BEGIN",
                        "public_key": "-----BEGIN"
                      },
                      "set": {
                        "id": "b86b331c-dcd0-4b3e-97ce-47c5a9543031"
                      }
                    }
                  }
                }
              }
            },
            "description": "Successfully created Key"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Invalid Key"
          }
        },
        "summary": "Create a new Key in a workspace",
        "tags": [
          "Keys"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/keys-request"
        }
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/workspace"
        }
      ]
    },
    "/{workspace}/keys/{key_id_or_name}": {
      "delete": {
        "description": "Delete a Key in a workspace",
        "operationId": "delete-key-in-workspace",
        "responses": {
          "204": {
            "description": "Successfully deleted Key or the resource didn't exist"
          }
        },
        "summary": "Delete a Key in a workspace",
        "tags": [
          "Keys"
        ]
      },
      "get": {
        "description": "Get a Key using ID or name in a workspace.",
        "operationId": "get-key-in-workspace",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Key"
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "id": "d958f66b-8e99-44d2-b0b4-edd5bbf24658",
                      "jwk": "{\"alg\":\"RSA\",  \"kid\": \"42\",  ...}",
                      "kid": "42",
                      "name": "a-key",
                      "pem": {
                        "private_key": "-----BEGIN",
                        "public_key": "-----BEGIN"
                      },
                      "set": {
                        "id": "b86b331c-dcd0-4b3e-97ce-47c5a9543031"
                      }
                    }
                  }
                }
              }
            },
            "description": "Successfully fetched Key"
          },
          "404": {
            "description": "Resource does not exist"
          }
        },
        "summary": "Fetch a Key in a workspace",
        "tags": [
          "Keys"
        ]
      },
      "patch": {
        "description": "Update a Key in a workspace",
        "operationId": "update-key-in-workspace",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Key"
                }
              }
            },
            "description": "Successfully updated Key"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Invalid Key"
          },
          "404": {
            "description": "Resource does not exist"
          }
        },
        "summary": "Update a Key in a workspace",
        "tags": [
          "Keys"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/keys-request"
        }
      },
      "put": {
        "description": "Create or Update Key using ID or name in a workspace.",
        "operationId": "upsert-key-in-workspace",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Key"
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "id": "d958f66b-8e99-44d2-b0b4-edd5bbf24658",
                      "jwk": "{\"alg\":\"RSA\",  \"kid\": \"42\",  ...}",
                      "kid": "42",
                      "name": "a-key",
                      "pem": {
                        "private_key": "-----BEGIN",
                        "public_key": "-----BEGIN"
                      },
                      "set": {
                        "id": "b86b331c-dcd0-4b3e-97ce-47c5a9543031"
                      }
                    }
                  }
                }
              }
            },
            "description": "Successfully upserted Key"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Invalid Key"
          }
        },
        "summary": "Upsert a Key in a workspace",
        "tags": [
          "Keys"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/keys-request"
        }
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/workspace"
        },
        {
          "$ref": "#/components/parameters/key_id_or_name"
        }
      ]
    },
    "/{workspace}/plugins": {
      "get": {
        "description": "List all plugins in a workspace",
        "operationId": "list-plugin-in-workspace",
        "parameters": [
          {
            "$ref": "#/components/parameters/pagination-size"
          },
          {
            "$ref": "#/components/parameters/pagination-offset"
          },
          {
            "$ref": "#/components/parameters/pagination-tags-filter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/Plugin"
                      },
                      "type": "array"
                    },
                    "offset": {
                      "$ref": "#/components/schemas/pagination-offset-response"
                    }
                  }
                }
              }
            },
            "description": "A successful response listing plugins"
          }
        },
        "summary": "List all plugins in a workspace",
        "tags": [
          "Plugins"
        ]
      },
      "post": {
        "description": "Create a new plugin in a workspace",
        "operationId": "create-plugin-in-workspace",
        "responses": {
          "200": {
            "$ref": "#/components/responses/plugin-response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Invalid plugin"
          }
        },
        "summary": "Create a new plugin in a workspace",
        "tags": [
          "Plugins"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/plugin-request"
        }
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/workspace"
        }
      ]
    },
    "/{workspace}/plugins/{plugin_id}": {
      "delete": {
        "description": "Delete a plugin in a workspace",
        "operationId": "delete-plugin-in-workspace",
        "responses": {
          "204": {
            "description": "Successfully deleted plugin or the resource didn't exist"
          }
        },
        "summary": "Delete a plugin in a workspace",
        "tags": [
          "Plugins"
        ]
      },
      "get": {
        "description": "Get a plugin using ID in a workspace.",
        "operationId": "get-plugin-in-workspace",
        "responses": {
          "200": {
            "$ref": "#/components/responses/plugin-response"
          },
          "404": {
            "description": "Resource does not exist"
          }
        },
        "summary": "Fetch a plugin in a workspace",
        "tags": [
          "Plugins"
        ]
      },
      "patch": {
        "description": "Update a plugin in a workspace",
        "operationId": "update-plugin-in-workspace",
        "responses": {
          "200": {
            "$ref": "#/components/responses/plugin-response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Invalid plugin"
          },
          "404": {
            "description": "Resource does not exist"
          }
        },
        "summary": "Update a plugin in a workspace",
        "tags": [
          "Plugins"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/plugin-request"
        }
      },
      "put": {
        "description": "Create or Update plugin using ID in a workspace.",
        "operationId": "upsert-plugin-in-workspace",
        "responses": {
          "200": {
            "$ref": "#/components/responses/plugin-response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Invalid plugin"
          }
        },
        "summary": "Upsert a plugin in a workspace",
        "tags": [
          "Plugins"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/plugin-request"
        }
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/workspace"
        },
        {
          "$ref": "#/components/parameters/plugin_id"
        }
      ]
    },
    "/{workspace}/routes": {
      "get": {
        "description": "List all routes in a workspace",
        "operationId": "list-route-in-workspace",
        "parameters": [
          {
            "$ref": "#/components/parameters/pagination-size"
          },
          {
            "$ref": "#/components/parameters/pagination-offset"
          },
          {
            "$ref": "#/components/parameters/pagination-tags-filter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/Route"
                      },
                      "type": "array"
                    },
                    "offset": {
                      "$ref": "#/components/schemas/pagination-offset-response"
                    }
                  }
                }
              }
            },
            "description": "A successful response listing routes"
          }
        },
        "summary": "List all routes in a workspace",
        "tags": [
          "Routes"
        ]
      },
      "post": {
        "description": "Create a new route in a workspace",
        "operationId": "create-route-in-workspace",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Route"
                }
              }
            },
            "description": "Successfully created route"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Invalid route"
          }
        },
        "summary": "Create a new route in a workspace",
        "tags": [
          "Routes"
        ]
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/workspace"
        }
      ]
    },
    "/{workspace}/routes/{route_id_or_name}": {
      "delete": {
        "description": "Delete a route in a workspace",
        "operationId": "delete-route-in-workspace",
        "responses": {
          "204": {
            "description": "Successfully deleted route or the resource didn't exist"
          }
        },
        "summary": "Delete a route in a workspace",
        "tags": [
          "Routes"
        ]
      },
      "get": {
        "description": "Get a route using ID or name in a workspace.",
        "operationId": "get-route-in-workspace",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Route"
                }
              }
            },
            "description": "Successfully fetched route"
          },
          "404": {
            "description": "Resource does not exist"
          }
        },
        "summary": "Fetch a route in a workspace",
        "tags": [
          "Routes"
        ]
      },
      "patch": {
        "description": "Update a route in a workspace",
        "operationId": "update-route-in-workspace",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Route"
                }
              }
            },
            "description": "Successfully updated route"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Invalid route"
          },
          "404": {
            "description": "Resource does not exist"
          }
        },
        "summary": "Update a route in a workspace",
        "tags": [
          "Routes"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/route-request"
        }
      },
      "put": {
        "description": "Create or Update route using ID or name in a workspace.",
        "operationId": "upsert-route-in-workspace",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Route"
                }
              }
            },
            "description": "Successfully upserted route"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Invalid route"
          }
        },
        "summary": "Upsert a route in a workspace",
        "tags": [
          "Routes"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/route-request"
        }
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/workspace"
        },
        {
          "$ref": "#/components/parameters/route_id_or_name"
        }
      ]
    },
    "/{workspace}/routes/{route_id_or_name}/plugins": {
      "get": {
        "description": "List all plugins associated with a route in a workspace",
        "parameters": [
          {
            "$ref": "#/components/parameters/pagination-size"
          },
          {
            "$ref": "#/components/parameters/pagination-offset"
          },
          {
            "$ref": "#/components/parameters/pagination-tags-filter"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/plugin-response"
          }
        },
        "summary": "List all plugins associated with a route in a workspace",
        "tags": [
          "Plugins"
        ],
        "operationId": "list-plugins-with-route-workspace"
      },
      "post": {
        "description": "Create a new plugin associated with a route in a workspace",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Plugin"
                }
              }
            },
            "description": "Successfully created plugin"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Invalid plugin"
          }
        },
        "summary": "Create a new plugin associated with a route in a workspace",
        "tags": [
          "Plugins"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/plugin-request"
        },
        "operationId": "create-plugin-with-route-workspace"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/workspace"
        },
        {
          "$ref": "#/components/parameters/route_id_or_name"
        }
      ]
    },
    "/{workspace}/routes/{route_id_or_name}/plugins/{plugin_id}": {
      "delete": {
        "description": "Delete a plugin associated with a route using ID in a workspace.",
        "responses": {
          "204": {
            "description": "Successfully deleted plugin or the resource didn't exist"
          }
        },
        "summary": "Delete a plugin associated with a route in a workspace",
        "tags": [
          "Plugins"
        ],
        "operationId": "delete-plugin-with-route-workspace"
      },
      "get": {
        "description": "Get a plugin associated with a route using ID in a workspace.",
        "responses": {
          "200": {
            "$ref": "#/components/responses/plugin-response"
          },
          "404": {
            "description": "Resource does not exist"
          }
        },
        "summary": "Fetch a plugin associated with a route in a workspace",
        "tags": [
          "Plugins"
        ],
        "operationId": "fetch-plugin-with-route-workspace"
      },
      "patch": {
        "description": "Update a plugin associated with a route using ID in a workspace.",
        "responses": {
          "200": {
            "$ref": "#/components/responses/plugin-response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Invalid plugin"
          },
          "404": {
            "description": "Resource does not exist"
          }
        },
        "summary": "Update a plugin associated with a route in a workspace",
        "tags": [
          "Plugins"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/plugin-request"
        },
        "operationId": "update-plugin-with-route-workspace"
      },
      "put": {
        "description": "Create or Update a plugin associated with a route using ID in a workspace.",
        "responses": {
          "200": {
            "$ref": "#/components/responses/plugin-response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Invalid plugin"
          }
        },
        "summary": "Upsert a plugin associated with a route in a workspace",
        "tags": [
          "Plugins"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/plugin-request"
        },
        "operationId": "upsert-plugin-with-route-workspace"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/workspace"
        },
        {
          "$ref": "#/components/parameters/route_id_or_name"
        },
        {
          "$ref": "#/components/parameters/plugin_id"
        }
      ]
    },
    "/{workspace}/services": {
      "get": {
        "description": "List all Services in a workspace",
        "operationId": "list-service-in-workspace",
        "parameters": [
          {
            "$ref": "#/components/parameters/pagination-size"
          },
          {
            "$ref": "#/components/parameters/pagination-offset"
          },
          {
            "$ref": "#/components/parameters/pagination-tags-filter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Service"
                }
              }
            },
            "description": "A successful response listing Services"
          }
        },
        "summary": "List all Services in a workspace",
        "tags": [
          "Services"
        ]
      },
      "post": {
        "description": "Create a new Service in a workspace",
        "operationId": "create-service-in-workspace",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Service"
                }
              }
            },
            "description": "Successfully created Service"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Invalid Service"
          }
        },
        "summary": "Create a new Service in a workspace",
        "tags": [
          "Services"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/service-request"
        }
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/workspace"
        }
      ]
    },
    "/{workspace}/services/{service_id_or_name}": {
      "delete": {
        "description": "Delete a Service in a workspace",
        "operationId": "delete-service-in-workspace",
        "responses": {
          "204": {
            "description": "Successfully deleted Service or the resource didn't exist"
          }
        },
        "summary": "Delete a Service in a workspace",
        "tags": [
          "Services"
        ]
      },
      "get": {
        "description": "Get a Service using ID or name in a workspace.",
        "operationId": "get-service-in-workspace",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Service"
                }
              }
            },
            "description": "Successfully fetched Service"
          },
          "404": {
            "description": "Resource does not exist"
          }
        },
        "summary": "Fetch a Service in a workspace",
        "tags": [
          "Services"
        ]
      },
      "patch": {
        "description": "Update a Service in a workspace",
        "operationId": "update-service-in-workspace",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Service"
                }
              }
            },
            "description": "Successfully updated Service"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Invalid Service"
          },
          "404": {
            "description": "Resource does not exist"
          }
        },
        "summary": "Update a Service in a workspace",
        "tags": [
          "Services"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/service-request"
        }
      },
      "put": {
        "description": "Create or Update Service using ID or name in a workspace.",
        "operationId": "upsert-service-in-workspace",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Service"
                }
              }
            },
            "description": "Successfully upserted Service"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Invalid Service"
          }
        },
        "summary": "Upsert a Service in a workspace",
        "tags": [
          "Services"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/service-request"
        }
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/workspace"
        },
        {
          "$ref": "#/components/parameters/service_id_or_name"
        }
      ]
    },
    "/{workspace}/services/{service_id_or_name}/plugins": {
      "get": {
        "description": "List all plugins associated with a Service in a workspace",
        "parameters": [
          {
            "$ref": "#/components/parameters/pagination-size"
          },
          {
            "$ref": "#/components/parameters/pagination-offset"
          },
          {
            "$ref": "#/components/parameters/pagination-tags-filter"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/plugin-response"
          }
        },
        "summary": "List all plugins associated with a Service in a workspace",
        "tags": [
          "Plugins"
        ],
        "operationId": "list-plugins-with-service-workspace"
      },
      "post": {
        "description": "Create a new plugin associated with a Service in a workspace",
        "responses": {
          "200": {
            "$ref": "#/components/responses/plugin-response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Invalid plugin"
          }
        },
        "summary": "Create a new plugin associated with a Service in a workspace",
        "tags": [
          "Plugins"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/plugin-request"
        },
        "operationId": "create-plugin-with-service-workspace"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/workspace"
        },
        {
          "$ref": "#/components/parameters/service_id_or_name"
        }
      ]
    },
    "/{workspace}/services/{service_id_or_name}/plugins/{plugin_id}": {
      "delete": {
        "description": "Delete a plugin associated with a Service using ID in a workspace.",
        "responses": {
          "204": {
            "description": "Successfully deleted plugin or the resource didn't exist"
          }
        },
        "summary": "Delete a plugin associated with a Service in a workspace",
        "tags": [
          "Plugins"
        ],
        "operationId": "delete-plugin-with-service-workspace"
      },
      "get": {
        "description": "Get a plugin associated with a Service using ID in a workspace.",
        "responses": {
          "200": {
            "$ref": "#/components/responses/plugin-response"
          },
          "404": {
            "description": "Resource does not exist"
          }
        },
        "summary": "Fetch a plugin associated with a Service in a workspace",
        "tags": [
          "Plugins"
        ],
        "operationId": "fetch-plugin-with-service-workspace"
      },
      "patch": {
        "description": "Update a plugin associated with a Service using ID in a workspace.",
        "responses": {
          "200": {
            "$ref": "#/components/responses/plugin-response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Invalid plugin"
          },
          "404": {
            "description": "Resource does not exist"
          }
        },
        "summary": "Update a plugin associated with a Service in a workspace",
        "tags": [
          "Plugins"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/plugin-request"
        },
        "operationId": "update-plugin-with-service-workspace"
      },
      "put": {
        "description": "Create or Update a plugin associated with a Service using ID in a workspace.",
        "responses": {
          "200": {
            "$ref": "#/components/responses/plugin-response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Invalid plugin"
          }
        },
        "summary": "Upsert a plugin associated with a Service in a workspace",
        "tags": [
          "Plugins"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/plugin-request"
        },
        "operationId": "upsert-plugin-with-service-workspace"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/workspace"
        },
        {
          "$ref": "#/components/parameters/service_id_or_name"
        },
        {
          "$ref": "#/components/parameters/plugin_id"
        }
      ]
    },
    "/{workspace}/services/{service_id_or_name}/routes": {
      "get": {
        "description": "List all routes associated with a Service in a workspace",
        "parameters": [
          {
            "$ref": "#/components/parameters/pagination-size"
          },
          {
            "$ref": "#/components/parameters/pagination-offset"
          },
          {
            "$ref": "#/components/parameters/pagination-tags-filter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Route"
                }
              }
            },
            "description": "A successful response listing routes"
          }
        },
        "summary": "List all routes associated with a Service in a workspace",
        "tags": [
          "Routes"
        ],
        "operationId": "list-routes-with-service-workspace"
      },
      "post": {
        "description": "Create a new route associated with a Service in a workspace",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Route"
                }
              }
            },
            "description": "Successfully created route"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Invalid route"
          }
        },
        "summary": "Create a new route associated with a Service in a workspace",
        "tags": [
          "Routes"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/route-request"
        },
        "operationId": "create-route-with-service-workspace"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/workspace"
        },
        {
          "$ref": "#/components/parameters/service_id_or_name"
        }
      ]
    },
    "/{workspace}/services/{service_id_or_name}/routes/{route_id_or_name}": {
      "delete": {
        "description": "Delete a route associated with a Service using ID or name in a workspace.",
        "responses": {
          "204": {
            "description": "Successfully deleted route or the resource didn't exist"
          }
        },
        "summary": "Delete a route associated with a Service in a workspace",
        "tags": [
          "Routes"
        ],
        "operationId": "delete-route-with-service-workspace"
      },
      "get": {
        "description": "Get a route associated with a Service using ID or name in a workspace.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Route"
                }
              }
            },
            "description": "Successfully fetched route"
          },
          "404": {
            "description": "Resource does not exist"
          }
        },
        "summary": "Fetch a route associated with a Service in a workspace",
        "tags": [
          "Routes"
        ],
        "operationId": "fetch-route-with-service-workspace"
      },
      "patch": {
        "description": "Update a route associated with a Service using ID or name in a workspace.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Route"
                }
              }
            },
            "description": "Successfully updated route"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Invalid route"
          },
          "404": {
            "description": "Resource does not exist"
          }
        },
        "summary": "Update a route associated with a Service in a workspace",
        "tags": [
          "Routes"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/route-request"
        },
        "operationId": "update-route-with-service-workspace"
      },
      "put": {
        "description": "Create or Update a route associated with a Service using ID or name in a workspace.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Route"
                }
              }
            },
            "description": "Successfully upserted route"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Invalid route"
          }
        },
        "summary": "Upsert a route associated with a Service in a workspace",
        "tags": [
          "Routes"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/route-request"
        },
        "operationId": "upsert-route-with-service-workspace"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/workspace"
        },
        {
          "$ref": "#/components/parameters/service_id_or_name"
        },
        {
          "$ref": "#/components/parameters/route_id_or_name"
        }
      ]
    },
    "/{workspace}/snis": {
      "get": {
        "description": "List all SNIs in a workspace",
        "operationId": "list-sni-in-workspace",
        "parameters": [
          {
            "$ref": "#/components/parameters/pagination-size"
          },
          {
            "$ref": "#/components/parameters/pagination-offset"
          },
          {
            "$ref": "#/components/parameters/pagination-tags-filter"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/sni-response"
          }
        },
        "summary": "List all SNIs in a workspace",
        "tags": [
          "SNIs"
        ]
      },
      "post": {
        "description": "Create a new SNI in a workspace",
        "operationId": "create-sni-in-workspace",
        "responses": {
          "200": {
            "$ref": "#/components/responses/sni-response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Invalid SNI"
          }
        },
        "summary": "Create a new SNI in a workspace",
        "tags": [
          "SNIs"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/create-sni"
        }
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/workspace"
        }
      ]
    },
    "/{workspace}/snis/{sni_name_or_id}": {
      "delete": {
        "description": "Delete an SNI in a workspace",
        "operationId": "delete-sni-in-workspace",
        "responses": {
          "204": {
            "description": "Successfully deleted SNI or the resource didn't exist"
          }
        },
        "summary": "Delete an SNI in a workspace",
        "tags": [
          "SNIs"
        ]
      },
      "get": {
        "description": "Get an SNI using ID or name in a workspace.",
        "operationId": "get-sni-in-workspace",
        "responses": {
          "200": {
            "$ref": "#/components/responses/sni-response"
          },
          "404": {
            "description": "Resource does not exist"
          }
        },
        "summary": "Fetch an SNI in a workspace",
        "tags": [
          "SNIs"
        ]
      },
      "patch": {
        "description": "Update an SNI in a workspace",
        "operationId": "update-sni-in-workspace",
        "responses": {
          "200": {
            "$ref": "#/components/responses/sni-response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Invalid SNI"
          },
          "404": {
            "description": "Resource does not exist"
          }
        },
        "summary": "Update an SNI in a workspace",
        "tags": [
          "SNIs"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/create-sni"
        }
      },
      "put": {
        "description": "Create or Update SNI using ID or name in a workspace.",
        "operationId": "upsert-sni-in-workspace",
        "responses": {
          "200": {
            "$ref": "#/components/responses/sni-response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Invalid SNI"
          }
        },
        "summary": "Upsert a SNI in a workspace",
        "tags": [
          "SNIs"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/create-sni"
        }
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/workspace"
        },
        {
          "$ref": "#/components/parameters/sni_name_or_id"
        }
      ]
    },
    "/{workspace}/upstreams": {
      "get": {
        "description": "List all Upstreams in a workspace",
        "operationId": "list-upstream-in-workspace",
        "parameters": [
          {
            "$ref": "#/components/parameters/pagination-size"
          },
          {
            "$ref": "#/components/parameters/pagination-offset"
          },
          {
            "$ref": "#/components/parameters/pagination-tags-filter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/Upstream"
                      },
                      "type": "array"
                    },
                    "offset": {
                      "$ref": "#/components/schemas/pagination-offset-response"
                    }
                  }
                }
              }
            },
            "description": "A successful response listing Upstreams"
          }
        },
        "summary": "List all Upstreams in a workspace",
        "tags": [
          "Upstreams"
        ]
      },
      "post": {
        "description": "Create a new Upstream in a workspace",
        "operationId": "create-upstream-in-workspace",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Upstream"
                }
              }
            },
            "description": "Successfully created Upstream"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Invalid Upstream"
          }
        },
        "summary": "Create a new Upstream in a workspace",
        "tags": [
          "Upstreams"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/upstream-request"
        }
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/workspace"
        }
      ]
    },
    "/{workspace}/upstreams/{upstream_id_or_name}": {
      "delete": {
        "description": "Delete an Upstream in a workspace",
        "operationId": "delete-upstream-in-workspace",
        "responses": {
          "204": {
            "description": "Successfully deleted Upstream or the resource didn't exist"
          }
        },
        "summary": "Delete an Upstream in a workspace",
        "tags": [
          "Upstreams"
        ]
      },
      "get": {
        "description": "Get an Upstream using ID or name in a workspace.",
        "operationId": "get-upstream-in-workspace",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Upstream"
                }
              }
            },
            "description": "Successfully fetched Upstream"
          },
          "404": {
            "description": "Resource does not exist"
          }
        },
        "summary": "Fetch an Upstream in a workspace",
        "tags": [
          "Upstreams"
        ]
      },
      "patch": {
        "description": "Update an Upstream in a workspace",
        "operationId": "update-upstream-in-workspace",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Upstream"
                }
              }
            },
            "description": "Successfully updated Upstream"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Invalid Upstream"
          },
          "404": {
            "description": "Resource does not exist"
          }
        },
        "summary": "Update an Upstream in a workspace",
        "tags": [
          "Upstreams"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/upstream-request"
        }
      },
      "put": {
        "description": "Create or Update Upstream using ID or name in a workspace.",
        "operationId": "upsert-upstream-in-workspace",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Upstream"
                }
              }
            },
            "description": "Successfully upserted Upstream"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Invalid Upstream"
          }
        },
        "summary": "Upsert a Upstream in a workspace",
        "tags": [
          "Upstreams"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/upstream-request"
        }
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/workspace"
        },
        {
          "$ref": "#/components/parameters/upstream_id_or_name"
        }
      ]
    },
    "/{workspace}/upstreams/{upstream_id_or_name}/targets": {
      "get": {
        "description": "List all Targets associated with a an Upstream in a workspace",
        "parameters": [
          {
            "$ref": "#/components/parameters/pagination-size"
          },
          {
            "$ref": "#/components/parameters/pagination-offset"
          },
          {
            "$ref": "#/components/parameters/pagination-tags-filter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Target"
                }
              }
            },
            "description": "A successful response listing Targets"
          }
        },
        "summary": "List all Targets associated with an Upstream in a workspace",
        "tags": [
          "Targets"
        ],
        "operationId": "list-targets-with-upstream-workspace"
      },
      "post": {
        "description": "Create a new Target associated with an Upstream in a workspace",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Target"
                }
              }
            },
            "description": "Successfully created Target"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Invalid Target"
          }
        },
        "summary": "Create a new Target associated with an Upstream in a workspace",
        "tags": [
          "Targets"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/target-request"
        },
        "operationId": "create-target-with-upstream-workspace"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/workspace"
        },
        {
          "$ref": "#/components/parameters/upstream_id_or_name"
        }
      ]
    },
    "/{workspace}/upstreams/{upstream_id_or_name}/targets/{target_id_or_target}": {
      "delete": {
        "description": "Delete a Target associated with a an Upstream using ID or target in a workspace.",
        "responses": {
          "204": {
            "description": "Successfully deleted Target or the resource didn't exist"
          }
        },
        "summary": "Delete a Target associated with a an Upstream in a workspace",
        "tags": [
          "Targets"
        ],
        "operationId": "delete-target-with-upstream-workspace"
      },
      "get": {
        "description": "Get a Target associated with an Upstream using ID or target in a workspace.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Target"
                }
              }
            },
            "description": "Successfully fetched Target"
          },
          "404": {
            "description": "Resource does not exist"
          }
        },
        "summary": "Fetch a Target associated with an Upstream in a workspace",
        "tags": [
          "Targets"
        ],
        "operationId": "fetch-target-with-upstream-workspace"
      },
      "patch": {
        "description": "Update a Target associated with a an Upstream using ID or target in a workspace.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Target"
                }
              }
            },
            "description": "Successfully updated Target"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Invalid Target"
          },
          "404": {
            "description": "Resource does not exist"
          }
        },
        "summary": "Update a Target associated with a an Upstream in a workspace",
        "tags": [
          "Targets"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/target-request"
        },
        "operationId": "update-target-with-upstream-workspace"
      },
      "put": {
        "description": "Create or Update a Target associated with an Upstream using ID or target in a workspace.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Target"
                }
              }
            },
            "description": "Successfully upserted Target"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Invalid Target"
          }
        },
        "summary": "Upsert a Target associated with an Upstream in a workspace",
        "tags": [
          "Targets"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/target-request"
        },
        "operationId": "upsert-target-with-upstream-workspace"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/workspace"
        },
        {
          "$ref": "#/components/parameters/upstream_id_or_name"
        },
        {
          "$ref": "#/components/parameters/target_id_or_target"
        }
      ]
    },
    "/{workspace}/vaults": {
      "get": {
        "description": "List all Vaults in a workspace",
        "operationId": "list-vault-in-workspace",
        "parameters": [
          {
            "$ref": "#/components/parameters/pagination-size"
          },
          {
            "$ref": "#/components/parameters/pagination-offset"
          },
          {
            "$ref": "#/components/parameters/pagination-tags-filter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/Vault"
                      },
                      "type": "array"
                    },
                    "offset": {
                      "$ref": "#/components/schemas/pagination-offset-response"
                    }
                  }
                }
              }
            },
            "description": "A successful response listing Vaults"
          }
        },
        "summary": "List all Vaults in a workspace",
        "tags": [
          "Vaults"
        ]
      },
      "post": {
        "description": "Create a new Vault in a workspace",
        "operationId": "create-vault-in-workspace",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Vault"
                }
              }
            },
            "description": "Successfully created Vault"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Invalid Vault"
          }
        },
        "summary": "Create a new Vault in a workspace",
        "tags": [
          "Vaults"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/vault-request"
        }
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/workspace"
        }
      ]
    },
    "/{workspace}/vaults/{vault_id_or_prefix}": {
      "delete": {
        "description": "Delete a Vault in a workspace",
        "operationId": "delete-vault-in-workspace",
        "responses": {
          "204": {
            "description": "Successfully deleted Vault or the resource didn't exist"
          }
        },
        "summary": "Delete a Vault in a workspace",
        "tags": [
          "Vaults"
        ]
      },
      "get": {
        "description": "Get a Vault using ID or prefix in a workspace.",
        "operationId": "get-vault-in-workspace",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Vault"
                }
              }
            },
            "description": "Successfully fetched Vault"
          },
          "404": {
            "description": "Resource does not exist"
          }
        },
        "summary": "Fetch a Vault in a workspace",
        "tags": [
          "Vaults"
        ]
      },
      "patch": {
        "description": "Update a Vault in a workspace",
        "operationId": "update-vault-in-workspace",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Vault"
                }
              }
            },
            "description": "Successfully updated Vault"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Invalid Vault"
          },
          "404": {
            "description": "Resource does not exist"
          }
        },
        "summary": "Update a Vault in a workspace",
        "tags": [
          "Vaults"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/vault-request"
        }
      },
      "put": {
        "description": "Create or Update Vault using ID or prefix in a workspace.",
        "operationId": "upsert-vault-in-workspace",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Vault"
                }
              }
            },
            "description": "Successfully upserted Vault"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Invalid Vault"
          }
        },
        "summary": "Upsert a Vault in a workspace",
        "tags": [
          "Vaults"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/vault-request"
        }
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/workspace"
        },
        {
          "$ref": "#/components/parameters/vault_id_or_prefix"
        }
      ]
    },
    "/consumer_groups": {
      "get": {
        "summary": "List consumer groups",
        "tags": [
          "consumer_groups"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/consumer_group_response"
          }
        },
        "operationId": "get-consumer_groups",
        "description": "List all consumer groups\n\nUse consumer groups to manage custom rate limiting configuration for subsets of consumers. For more information read the [consumer group examples documentation](https://docs.konghq.com/gateway/3.2.x/kong-enterprise/consumer-groups/).\n"
      },
      "post": {
        "summary": "Create a consumer group",
        "operationId": "post-consumer_groups",
        "responses": {
          "201": {
            "$ref": "#/components/responses/consumer_group_response"
          }
        },
        "description": "Create a new consumer group.",
        "requestBody": {
          "$ref": "#/components/requestBodies/consumer_group_request"
        }
      }
    },
    "/consumer_groups/{group_name_or_id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/group_name_or_id"
        }
      ],
      "get": {
        "summary": "List a specific consumer group",
        "tags": [
          "consumer_groups"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/consumer_group_response"
          }
        },
        "operationId": "get-consumer_groups-group_name",
        "description": "Returns a consumer group by passing either the `group_name` or `group_id` as a path parameter. "
      },
      "put": {
        "summary": "Create consumer group",
        "operationId": "put-consumer_groups-group_name_or_id",
        "responses": {
          "200": {
            "$ref": "#/components/responses/consumer_group_response"
          }
        },
        "description": "Create a consumer group by passing a new group name as the path parameter",
        "requestBody": {
          "$ref": "#/components/requestBodies/consumer_group_request"
        }
      },
      "delete": {
        "summary": "Delete a consumer group",
        "operationId": "delete-consumer_groups-group_name_or_id",
        "responses": {
          "204": {
            "description": "HTTP/1.1 204 No Content\n"
          }
        },
        "description": "Delete a consumer group. Deleting a consumer group removes all consumers from that group. This operation does not delete existing consuemrs.\n"
      }
    },
    "/consumers/{consumer_username_or_id}/consumer_groups": {
      "parameters": [
        {
          "$ref": "#/components/parameters/Gatewayapi_Consumer_username_or_id"
        }
      ],
      "get": {
        "summary": "List consumer groups for a consumer",
        "responses": {
          "200": {
            "$ref": "#/components/responses/consumer_group_response"
          }
        },
        "operationId": "get-consumers-consumer_name_or_id-consumer_groups",
        "description": "View all consumer groups that a consumer is assigned to.\n",
        "tags": [
          "consumer_groups"
        ]
      },
      "post": {
        "summary": "Add a consumer to a specific consumer group.",
        "operationId": "post-consumers-consumer_username_or_id-consumer_groups",
        "responses": {
          "200": {
            "$ref": "#/components/responses/add_consumer_to_group_response"
          }
        },
        "description": "Add a consumer to a specific consumer group.\n\nIf you add a consumer to multiple groups:\n\nIf all groups are allowed by the Rate Limiting Advanced plugin, only the first group’s settings will apply.\nOtherwise, whichever group is specified in the Rate Limiting Advanced plugin will be active.\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "group": {
                    "type": "string",
                    "description": "The name or ID of the group to add the consumer to.\n",
                    "example": "288f2bfc-04e2-4ec3-b6f3-40408dff5417"
                  }
                },
                "required": [
                  "group"
                ]
              },
              "examples": {
                "Example request body": {
                  "value": {
                    "group": "288f2bfc-04e2-4ec3-b6f3-40408dff5417"
                  }
                }
              }
            }
          },
          "description": "The request body contains the group ID for the group that you are adding a consumer into."
        }
      },
      "delete": {
        "summary": "Remove a consumer from all groups",
        "operationId": "delete-consumers-consumer_username_or_id-consumer_groups",
        "responses": {
          "204": {
            "description": "HTTP/1.1 204 No Content\n"
          }
        },
        "description": "Remove a consumer from all groups."
      }
    },
    "/consumer_groups/{group_name_or_id}/consumers": {
      "parameters": [
        {
          "$ref": "#/components/parameters/group_name_or_id"
        }
      ],
      "get": {
        "summary": "List all consumers in a consumer group",
        "tags": [
          "consumer_groups"
        ],
        "operationId": "get-consumer_groups-group_name_or_id-consumers",
        "description": "List all consumers in a consumer group",
        "parameters": [
          {
            "$ref": "#/components/parameters/Gatewayapi_Pagination-tags-filter"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/consumer_response"
          }
        }
      },
      "post": {
        "summary": "Add a consumer to a group",
        "operationId": "post-consumer_groups-group_name_or_id-consumers",
        "responses": {
          "200": {
            "$ref": "#/components/responses/add_consumer_to_group_response"
          }
        },
        "description": "Add a consumer to a specific consumer group.\n\nIf you add a consumer to multiple groups:\n\nIf all groups are allowed by the Rate Limiting Advanced plugin, only the first group’s settings will apply.\nOtherwise, whichever group is specified in the Rate Limiting Advanced plugin will be active.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "consumer": {
                    "type": "string",
                    "description": "The name or ID of the consumer to add to this group.\n",
                    "example": "8a4bba3c-7f82-45f0-8121-ed4d2847c4a4"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Remove all consumers from a consumer group",
        "operationId": "delete-consumer_groups-group_name_or_id-consumers",
        "responses": {
          "204": {
            "description": "HTTP/1.1 204 No Content\n"
          }
        },
        "description": "Removes all consumers from a specified consumer group."
      }
    },
    "/consumers/{consumer_name_or_id}/consumer_groups/{group_name_or_id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/consumer_name_or_id"
        },
        {
          "$ref": "#/components/parameters/group_name_or_id"
        }
      ],
      "delete": {
        "summary": "Remove a consumer from a consumer group",
        "operationId": "delete-consumers-consumer_name_or_id-consumer_groups-group_name_or_id",
        "responses": {
          "204": {
            "description": "HTTP/1.1 204 No Content\n"
          }
        },
        "description": "Removes a consumer from a consumer group. This operation does not delete the consumer group.",
        "tags": [
          "consumer_groups"
        ]
      }
    },
    "/consumer_groups/{group_name_or_id}/consumers/{consumer_username_or_id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/group_name_or_id"
        },
        {
          "$ref": "#/components/parameters/consumer_username_or_id"
        }
      ],
      "delete": {
        "summary": "Remove a consumer from a consumer group",
        "operationId": "delete-consumer_groups-group_name_or_id-consumers-consumer_name_or_id",
        "responses": {
          "204": {
            "description": "HTTP/1.1 204 No Content\n"
          }
        },
        "description": "The consumer groups endpoint for removing a consumer from a specified consumer group.",
        "tags": [
          "consumer_groups"
        ]
      }
    },
    "/consumer_groups/{group_name_or_id}/overrides/plugins/rate-limiting-advanced": {
      "parameters": [
        {
          "$ref": "#/components/parameters/group_name_or_id"
        }
      ],
      "put": {
        "summary": "Configure rate limiting for a consumer group",
        "operationId": "put-consumer_groups-group_name_or_id-overrides-plugins-rate-limiting-advanced",
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "x-examples": {
                    "Example 1": {
                      "config": {
                        "limit": [
                          10
                        ],
                        "retry_after_jitter_max": 0,
                        "window_size": [
                          10
                        ],
                        "window_type": "sliding"
                      },
                      "group": "test-group",
                      "plugin": "rate-limiting-advanced"
                    }
                  },
                  "properties": {
                    "config": {
                      "type": "object",
                      "properties": {
                        "limit": {
                          "type": "array",
                          "description": "An array of one or more requests-per-window limits to apply. There must be a matching number of window limits and sizes specified.\n",
                          "items": {
                            "type": "integer",
                            "example": 10
                          }
                        },
                        "retry_after_jitter_max": {
                          "type": "integer",
                          "description": "The upper bound of a jitter (random delay) in seconds to be added to the Retry-After header of denied requests (status = 429) in order to prevent all the clients from coming back at the same time. The lower bound of the jitter is 0; in this case, the Retry-After header is equal to the RateLimit-Reset header.\n"
                        },
                        "window_size": {
                          "type": "array",
                          "description": "An array of one or more window sizes to apply a limit to (defined in seconds). There must be a matching number of window limits and sizes specified.\n",
                          "items": {
                            "type": "integer",
                            "example": 10
                          }
                        },
                        "window_type": {
                          "type": "string",
                          "description": "Set the time window type to either sliding (default) or fixed.\n",
                          "example": "sliding"
                        }
                      }
                    },
                    "group": {
                      "type": "string",
                      "description": "The consumer group",
                      "example": "test-group"
                    },
                    "plugin": {
                      "type": "string",
                      "description": "The name of the plugin",
                      "example": "rate-limiting-advanced"
                    }
                  }
                },
                "examples": {
                  "Example ": {
                    "value": {
                      "config": {
                        "limit": [
                          10
                        ],
                        "retry_after_jitter_max": 0,
                        "window_size": [
                          10
                        ],
                        "window_type": "sliding"
                      },
                      "group": "test-group",
                      "plugin": "rate-limiting-advanced"
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Define custom rate limiting settings for a consumer group. This endpoint overrides the settings of the Rate Limiting Advanced plugin.\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "config.limit": {
                    "type": "string",
                    "description": "An array of one or more requests-per-window limits to apply. There must be a matching number of window limits and sizes specified.\n"
                  },
                  "config.window_size": {
                    "type": "string",
                    "description": "An array of one or more window sizes to apply a limit to (defined in seconds). There must be a matching number of window limits and sizes specified.\n",
                    "example": " 10"
                  },
                  "config.window_type": {
                    "type": "string",
                    "description": "Set the time window type to either sliding (default) or fixed.\n",
                    "default": "sliding",
                    "enum": [
                      "sliding",
                      "fixed"
                    ]
                  },
                  "config.retry_after_jitter_max": {
                    "type": "string",
                    "description": "The upper bound of a jitter (random delay) in seconds to be added to the Retry-After header of denied requests (status = 429) in order to prevent all the clients from coming back at the same time. The lower bound of the jitter is 0; in this case, the Retry-After header is equal to the RateLimit-Reset header."
                  }
                },
                "required": [
                  "config.limit",
                  "config.window_size"
                ]
              },
              "examples": {
                "Request body": {
                  "value": {
                    "config.limit": "string",
                    "config.window_size": " 10",
                    "config.window_type": "sliding",
                    "config.retry_after_jitter_max": "string"
                  }
                }
              }
            }
          },
          "description": "Request Body\n"
        },
        "tags": [
          "consumer_groups"
        ]
      },
      "delete": {
        "summary": "Delete the configurations for a consumer group",
        "operationId": "delete-consumer_groups-group_name_or_id-overrides-plugins-rate-limiting-advanced",
        "responses": {
          "204": {
            "description": "HTTP/1.1 204 No Content\n"
          }
        },
        "description": "Delete custom rate limiting settings for a consumer group.\n"
      }
    },
    "/licenses": {
      "get": {
        "summary": "List licenses",
        "tags": [
          "licenses"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/license-response"
          }
        },
        "operationId": "get-licenses",
        "description": "List active licenses. The data planes use the most recent updated_at license.\n"
      },
      "post": {
        "summary": "Add a license",
        "operationId": "post-licenses",
        "responses": {
          "201": {
            "$ref": "#/components/responses/license-response"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "description": "Create a license using an auto-generated UUID. When using `POST`, if the request payload does contain a valid Kong Gateway license, the license will be added.\n\nIf the request payload does not contain a valid licence, a `400 BAD REQUEST` will be returned.",
        "requestBody": {
          "$ref": "#/components/requestBodies/license-request"
        },
        "tags": [
          "licenses"
        ]
      }
    },
    "/licenses/{license-id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/license-id"
        }
      ],
      "get": {
        "summary": "List a specific license",
        "tags": [
          "licenses"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/license-response"
          }
        },
        "operationId": "get-licenses-license-id",
        "description": "List a specific license using the license id parameter."
      },
      "put": {
        "summary": "Update or add a license",
        "operationId": "put-licenses-license-id",
        "responses": {
          "200": {
            "$ref": "#/components/responses/license-response"
          },
          "400": {
            "description": "Bad Request"
          },
          "405": {
            "description": "Method Not Allowed"
          }
        },
        "description": "When using `PUT`, if the request payload does not contain an entity’s primary key (`id` for licenses), the license will be added and assigned the given ID.\n\nIf the request payload does contain an entity’s primary key (id for Licenses), the license will be replaced with the given payload attribute. If the ID is not a valid UUID, a `400 BAD REQUEST` will be returned. If the ID is omitted, a `405 NOT ALLOWED` will be returned.",
        "requestBody": {
          "$ref": "#/components/requestBodies/license-request"
        }
      },
      "patch": {
        "summary": "Update a license",
        "operationId": "patch-licenses-license-id",
        "responses": {
          "200": {
            "$ref": "#/components/responses/license-response"
          }
        },
        "description": "When using `PATCH`, if the request payload does contain an entity’s primary key (`id` for licenses), the license will be replaced with the given payload attribute.\n\nIf the request payload does not contain an entity’s primary key (`id` for licenses), a `404 NOT FOUND `will be returned or if the request payload contains a invalid licence, a `400 BAD REQUEST` will be returned.",
        "requestBody": {
          "$ref": "#/components/requestBodies/license-request"
        }
      },
      "delete": {
        "summary": "Delete a license",
        "operationId": "delete-licenses-license-id",
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "description": "Delete a license by passing the license ID as a path parameter."
      }
    },
    "/license/report": {
      "get": {
        "summary": "Generate a report",
        "tags": [
          "licenses"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/report-response"
          }
        },
        "operationId": "get-license-report",
        "description": "Generate a report on the Kong Gateway instance to gather monthly usage data.\n"
      }
    },
    "/keyring": {
      "get": {
        "summary": "Fetch cluster Keyring",
        "tags": [
          "Keyring"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/key-ring-response"
          }
        },
        "operationId": "get-keyring",
        "description": "Kong Gateway provides a mechanism to store sensitive data fields, such as consumer secrets, in an encrypted format within the database.This provides for encryption-at-rest security controls in a Kong cluster. For more information review the [keyring and data encryption documentation](https://docs.konghq.com/gateway/latest/kong-enterprise/db-encryption/#getting-started)."
      }
    },
    "/keyring/generate": {
      "post": {
        "summary": "Generate key",
        "operationId": "post-keyring-generate",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "x-examples": {
                    "Example 1": {
                      "key": "t6NWgbj3g9cbNVC3/D6oZ2Md1Br5gWtRrqb1T2FZy44=",
                      "id": "8zgITLQh"
                    }
                  },
                  "properties": {
                    "key": {
                      "type": "string",
                      "description": "Key material",
                      "example": "t6NWgbj3g9cbNVC3/D6oZ2Md1Br5gWtRrqb1T2FZy44="
                    },
                    "id": {
                      "type": "string",
                      "description": "The key's ID",
                      "example": "8zgITLQh"
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Generate key material.\n\nKong supports rotating keys by allowing for multiple keys to exist on the keyring at the same time. This allows for data fields written by one key to be read back, while a fresher encryption key is used for write operations. Rotating keys is a matter of importing or generating a new key into the keyring, and marking it as active. ",
        "tags": [
          "Keyring"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "x-examples": {
                  "Example 1": {
                    "key": "t6NWgbj3g9cbNVC3/D6oZ2Md1Br5gWtRrqb1T2FZy44=",
                    "id": "8zgITLQh"
                  }
                },
                "properties": {
                  "key": {
                    "type": "string",
                    "example": "t6NWgbj3g9cbNVC3/D6oZ2Md1Br5gWtRrqb1T2FZy44="
                  },
                  "id": {
                    "type": "string",
                    "example": "8zgITLQh"
                  }
                }
              },
              "examples": {
                "Example 1": {
                  "value": {
                    "key": "t6NWgbj3g9cbNVC3/D6oZ2Md1Br5gWtRrqb1T2FZy44=",
                    "id": "8zgITLQh"
                  }
                }
              }
            }
          },
          "description": ""
        }
      }
    },
    "/keyring/activate": {
      "post": {
        "summary": "Activate key",
        "operationId": "post-keyring-activate",
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "description": "Kong can write new sensitive data fields with the current active key, and read previously written fields in the database with the prior key, provided that key is in the keyring. Kong automatically selects the appropriate key to use when decrypting fields from the database.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "x-examples": {
                  "Example 1": {
                    "key": "3Rwvk223"
                  }
                },
                "properties": {
                  "key": {
                    "type": "string",
                    "description": "The key ID",
                    "example": "3Rwvk223"
                  }
                }
              }
            }
          },
          "description": "The request body contains a key ID that can be generated from the `/keyring/generate` endpoint."
        },
        "tags": [
          "Keyring"
        ]
      }
    },
    "/keyring/recover": {
      "post": {
        "summary": "Recover keyring",
        "operationId": "post-keyring-recover",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "x-examples": {
                    "Example 1": {
                      "message": "successfully recovered 1 keys",
                      "recovered": [
                        "RfsDJ2Ol"
                      ],
                      "not_recovered": [
                        "xSD219lH"
                      ]
                    }
                  },
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "A message containing details about your request.",
                      "example": "successfully recovered 1 keys"
                    },
                    "recovered": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "example": "RfsDJ2Ol"
                      }
                    },
                    "not_recovered": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "example": "xSD219lH"
                      }
                    }
                  }
                },
                "examples": {
                  "example": {
                    "value": {
                      "message": "successfully recovered 1 keys",
                      "recovered": [
                        "RfsDJ2Ol"
                      ],
                      "not_recovered": [
                        "xSD219lH"
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "description": "The keyring material is then encrypted with the public RSA key defined with the `keyring_recovery_public_key` Kong configuration value in the database. The corresponding private key can be used to decrypt the keyring material in the database.\n\nThe response contains a list of keys that were successfully recovered and that could not be recovered. The Kong error log will contain the detailed reason why the keys could not be recovered.\n",
        "requestBody": {
          "description": "The request body contains a single file named `recovery_private_key` that represents a private RSA key used for decrypting a keyring material stored in the database. \n\nThe private key is uploaded in the PEM format, which is a binary format used for storing cryptographic keys and certificates. The contents of the file are encoded as a string using a specified encoding (such as base64) and included in the request body",
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "recovery_private_key": {
                    "type": "string",
                    "format": "binary",
                    "example": "/path/to/generated/<base64-encoded-contents-of-key.pem>",
                    "description": "Private key in PEM format."
                  }
                }
              },
              "examples": {
                "Example 1": {
                  "value": {
                    "recovery_private_key": "/path/to/generated/<base64-encoded-contents-of-key.pem>"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Keyring"
        ]
      }
    },
    "/keyring/export": {
      "post": {
        "summary": "Export keyring",
        "operationId": "post-keyring-export",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "x-examples": {
                    "Example 1": {
                      "data": "eyJrIjoIn0="
                    }
                  },
                  "description": " opaque blob containing a keyring.",
                  "properties": {
                    "data": {
                      "type": "string",
                      "example": "eyJrIjoiV1JZeTdubDlYeFZpR3VVQWtWTXBcL0JiVW1jMWZrWHluc0dKd"
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "value": {
                      "data": "eyJrIjoiV1JZeTdubDlYeFZpR3VVQWtWTXBcL0JiVW1jMWZrWHluc0dKd"
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Export the keyring. The exported material can be re-imported to the cluster in the event of an outage or to restore a previously-deleted key.\nThe exported keyring should be stored in a safe location for disaster recovery purposes. It is not designed to be modified or decrypted before being used during a disaster recovery process.\n",
        "tags": [
          "Keyring"
        ]
      }
    },
    "/keyring/import": {
      "post": {
        "summary": "Import Keyring",
        "operationId": "post-keyring-import",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "x-examples": {
                    "Example 1": {
                      "created_at": 1576518704,
                      "consumer": {
                        "id": "6375b5fd-9c95-4822-b2dd-80ffbccb7ec9"
                      },
                      "id": "fc46ce48-c1d6-4078-9f51-5a777350a8a2",
                      "password": "da61c0083b6d19ef3db2490d0da96a71572da0fa",
                      "username": "bob"
                    }
                  },
                  "properties": {
                    "created_at": {
                      "type": "integer",
                      "description": "Datetime representation of the keyring creation date."
                    },
                    "consumer": {
                      "type": "object",
                      "description": "The consumer object.",
                      "properties": {
                        "id": {
                          "type": "string",
                          "example": "6375b5fd-9c95-4822-b2dd-80ffbccb7ec9",
                          "description": "ID of the consumer object."
                        }
                      }
                    },
                    "id": {
                      "type": "string",
                      "example": "6375b5fd-9c95-4822-b2dd-80ffbccb7ec9",
                      "description": "UUID of the keyring"
                    },
                    "password": {
                      "type": "string",
                      "example": "da61c0083b6d19ef3db2490d0da96a71572da0fa",
                      "description": "Password associated with the keyring."
                    },
                    "username": {
                      "type": "string",
                      "example": "user",
                      "description": "Username associated with the keyring"
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Restart Kong and re-import the previously exported keyring. This operation requires that the keyring_private_key point to the private RSA key associated with the public key used during the initial keyring export.",
        "tags": [
          "Keyring"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "x-examples": {
                  "Example 1": {
                    "key": "t6NWgbj3g9cbNVC3/D6oZ2Md1Br5gWtRrqb1T2FZy44=",
                    "id": "8zgITLQh"
                  }
                },
                "properties": {
                  "key": {
                    "type": "string",
                    "example": "t6NWgbj3g9cbNVC3/D6oZ2Md1Br5gWtRrqb1T2FZy44="
                  },
                  "id": {
                    "type": "string",
                    "example": "8zgITLQh"
                  }
                }
              },
              "examples": {
                "Example 1": {
                  "value": {}
                }
              }
            }
          },
          "description": "Import Keyring"
        }
      }
    }
  },
  "servers": [
    {
      "description": "Default Admin API URL",
      "url": "{protocol}://{hostname}:{port}{path}",
      "variables": {
        "hostname": {
          "default": "localhost",
          "description": "Hostname for Kong's Admin API"
        },
        "path": {
          "default": "/",
          "description": "Base path for Kong's Admin API"
        },
        "port": {
          "default": "8001",
          "description": "Port for Kong's Admin API"
        },
        "protocol": {
          "default": "http",
          "description": "Protocol for requests to Kong's Admin API",
          "enum": [
            "http",
            "https"
          ]
        }
      }
    }
  ],
  "tags": [
    {
      "description": "Gateway services",
      "name": "Services"
    },
    {
      "description": "Gateway routes",
      "name": "Routes"
    },
    {
      "description": "Plugins",
      "name": "Plugins"
    },
    {
      "description": "Consumers",
      "name": "Consumers"
    },
    {
      "description": "Certificates",
      "name": "Certificates"
    },
    {
      "description": "SNIs",
      "name": "SNIs"
    },
    {
      "description": "Targets",
      "name": "Targets"
    },
    {
      "description": "CA certificates",
      "name": "CA Certificates"
    },
    {
      "description": "Upstreams",
      "name": "Upstreams"
    },
    {
      "description": "Vaults",
      "name": "Vaults"
    },
    {
      "description": "Keys",
      "name": "Keys"
    },
    {
      "description": "Keyring",
      "name": "Keyring"
    },
    {
      "description": "Key-sets",
      "name": "Key-sets"
    },
    {
      "description": "Workspaces",
      "name": "Workspaces"
    },
    {
      "description": "All about Basic-auth credentials in Kong",
      "name": "Basic-auth credentials"
    },
    {
      "description": "License",
      "name": "licenses"
    },
    {
      "description": "Consumer Groups",
      "name": "consumer_groups"
    }
  ]
}